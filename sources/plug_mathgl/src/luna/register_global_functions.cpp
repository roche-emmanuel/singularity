#include <plug_common.h>

#include <mgl2/addon.h>
#include <mgl2/base.h>
#include <mgl2/base_cf.h>
#include <mgl2/canvas_cf.h>
#include <mgl2/cont.h>
#include <mgl2/data.h>
#include <mgl2/data_cf.h>
#include <mgl2/datac_cf.h>
#include <mgl2/define.h>
#include <mgl2/fit.h>
#include <mgl2/font.h>
#include <mgl2/mgl_cf.h>
#include <mgl2/other.h>
#include <mgl2/plot.h>
#include <mgl2/prim.h>
#include <mgl2/surf.h>
#include <mgl2/type.h>
#include <mgl2/vect.h>
#include <mgl2/volume.h>
#include <mgl2/wnd.h>

// Function checkers:
inline static bool _lg_typecheck_mgl_ipowc(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( !Luna<void>::has_uniqueid(L,1,37931827) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_expi_overload_1(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( !Luna<void>::has_uniqueid(L,1,37931827) ) return false;
	if( (!(Luna< std::complex< double > >::checkSubType< dual >(L,1))) ) return false;
	return true;
}

inline static bool _lg_typecheck_expi_overload_2(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( lua_isnumber(L,1)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_difr_axial(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,37931827)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( !Luna<void>::has_uniqueid(L,3,37931827) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,37931827)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,37931827)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_difr_grid(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,37931827)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( !Luna<void>::has_uniqueid(L,3,37931827) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,37931827)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,37931827)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_gauss_rnd(lua_State *L) {
	if( lua_gettop(L)!=0 ) return false;

	return true;
}

inline static bool _lg_typecheck_mgl_fft_freq(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( lua_isnumber(L,1)==0 ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_strcls(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_strpos(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_chrpos(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_istrue(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_d(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( lua_isnumber(L,1)==0 ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_GetX(lua_State *L) {
	int luatop = lua_gettop(L);
	if( luatop<3 || luatop>4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( luatop>3 && (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_GetY(lua_State *L) {
	int luatop = lua_gettop(L);
	if( luatop<3 || luatop>4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( luatop>3 && (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_GetZ(lua_State *L) {
	int luatop = lua_gettop(L);
	if( luatop<3 || luatop>4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( luatop>3 && (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_have_color(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_check_dim0(lua_State *L) {
	int luatop = lua_gettop(L);
	if( luatop<6 || luatop>7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( luatop>6 && lua_isboolean(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_check_dim1(lua_State *L) {
	int luatop = lua_gettop(L);
	if( luatop<6 || luatop>7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( luatop>6 && lua_isboolean(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_check_dim2(lua_State *L) {
	int luatop = lua_gettop(L);
	if( luatop<6 || luatop>7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( luatop>6 && lua_isboolean(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_check_dim3(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isboolean(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_check_vec3(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_check_trig(lua_State *L) {
	int luatop = lua_gettop(L);
	if( luatop<7 || luatop>8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( luatop>7 && (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_isboth(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_warn(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_warn_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_warn(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_warn_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_mess(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_flag(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_flag(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_use_graph(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_use_graph_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_rdc_acc(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_rdc_acc_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_start_group(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_start_group_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_end_group(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_end_group_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_highlight(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_highlight_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_palette(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_palette_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_color(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_color_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_def_sch(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_def_sch_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_alpha_default(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_alpha_default_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_bar_width(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_bar_width_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_meshnum(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_meshnum_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_facenum(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_facenum_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_clear_unused(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_clear_unused_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_ambbr(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_ambbr_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_light_dif(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_light_dif_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_cut(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_cut_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_cut_box(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_cut_box_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_cutoff(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_cutoff_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_ranges(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_ranges_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_range_val(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_range_val_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_range_dat(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_range_dat_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_zoom_axis(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_zoom_axis_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_origin(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_origin_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_func(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_func_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_coor(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_coor_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_ternary(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_ternary_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_tick_rotate(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_tick_rotate_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_tick_skip(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_tick_skip_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_def_font(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_def_font_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_mark_size(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_mark_size_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_arrow_size(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_arrow_size_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_font_size(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_font_size_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_rotated_text(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_rotated_text_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_load_font(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_load_font_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_copy_font(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_copy_font_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_restore_font(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_restore_font_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_create_graph(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_create_graph_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_delete_graph(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_delete_graph_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_size(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_size_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_def_param(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_def_param_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_quality(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_quality_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_combine_gr(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_combine_gr_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_finish(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_finish_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_tick_len(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_tick_len_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_axis_stl(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_axis_stl_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_adjust_ticks(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_adjust_ticks_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_ticks(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_ticks_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_ticks_str(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_ticks_str_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_ticks_val(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_ticks_val_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tune_ticks(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tune_ticks_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_tick_templ(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_tick_templ_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_ticks_time(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_ticks_time_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_tick_shift(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_tick_shift_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_box(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_box_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_box_str(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_box_str_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_axis(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_axis_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_axis_grid(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_axis_grid_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_colorbar(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_colorbar_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_colorbar_ext(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_colorbar_ext_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_colorbar_val(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_colorbar_val_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_colorbar_val_ext(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_colorbar_val_ext_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_add_legend(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_add_legend_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_clear_legend(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_clear_legend_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_legend_pos(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_legend_pos_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_legend(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_legend_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_legend_marks(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_legend_marks_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_show_image(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_show_image_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_frame(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_frame_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_tga(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_tga_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_bmp(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_bmp_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_jpg(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_jpg_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_png(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_png_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_png_solid(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_png_solid_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_bps(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_bps_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_eps(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_eps_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_svg(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_svg_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_obj(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_obj_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_stl(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_stl_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_off(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_off_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_xyz(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_xyz_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_prc(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_prc_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_gif(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_gif_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_start_gif(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_start_gif_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_close_gif(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_close_gif_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_plotid(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_plotid_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_export_mgld(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_export_mgld_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_import_mgld(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_import_mgld_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_json(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_write_json_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_rgb(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_rgb_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_rgba(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_rgba_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_obj_id(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_obj_id_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_obj_id(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_obj_id_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_spl_id(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_spl_id_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_width(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_width_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_height(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_height_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_calc_xyz(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_calc_xyz_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_calc_scr(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_calc_scr_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_is_active(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_is_active_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_new_frame(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_new_frame_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_end_frame(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_end_frame_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_num_frame(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_num_frame_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_reset_frames(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_reset_frames_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_frame(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_frame_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_frame(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_frame_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_show_frame(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_show_frame_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_del_frame(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_del_frame_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_transp_type(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_transp_type_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_alpha(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_alpha_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_fog(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_fog_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_light(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_light_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_light_n(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_light_n_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_add_light(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_add_light_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_add_light_ext(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_add_light_ext_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_add_light_loc(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( lua_isnumber(L,10)==0 ) return false;
	if( lua_isnumber(L,11)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_add_light_loc_(lua_State *L) {
	if( lua_gettop(L)!=12 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( lua_isnumber(L,10)==0 ) return false;
	if( lua_isnumber(L,11)==0 ) return false;
	if( (lua_isnumber(L,12)==0 || lua_tointeger(L,12) != lua_tonumber(L,12)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mat_pop(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mat_pop_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mat_push(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mat_push_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_clf(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_clf_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_clf_rgb(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_clf_rgb_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_subplot(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_subplot_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_multiplot(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_multiplot_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_inplot(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_inplot_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_relplot(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_relplot_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_columnplot(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_columnplot_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_stickplot(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_stickplot_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_title(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_title_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_plotfactor(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_plotfactor_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_aspect(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_aspect_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_rotate(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_rotate_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_rotate_vector(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_rotate_vector_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_perspective(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_perspective_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_view(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_view_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_zoom(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_zoom_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mpi_send(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mpi_send_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mpi_recv(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mpi_recv_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_draw_thr(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,3625364)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_set_delay(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_set_delay_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_setup_window(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_setup_window_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_toggle_alpha(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_toggle_alpha_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_toggle_light(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_toggle_light_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_toggle_zoom(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_toggle_zoom_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_toggle_rotate(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_toggle_rotate_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_toggle_no(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_toggle_no_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_update(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_update_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_reload(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_reload_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_adjust(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_adjust_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_next_frame(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_next_frame_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_prev_frame(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_prev_frame_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_animation(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_wnd_animation_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_last_mouse_pos(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_last_mouse_pos_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_create_parser(lua_State *L) {
	if( lua_gettop(L)!=0 ) return false;

	return true;
}

inline static bool _lg_typecheck_mgl_create_parser_(lua_State *L) {
	if( lua_gettop(L)!=0 ) return false;

	return true;
}

inline static bool _lg_typecheck_mgl_use_parser(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_use_parser_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_delete_parser(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_delete_parser_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_add_param(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_add_param_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_add_var(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_add_var_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_find_var(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_find_var_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_del_all(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_del_all_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parse_line(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,51318766)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parse_line_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parse_text(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,51318766)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parse_text_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_restore_once(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_restore_once_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_allow_setsize(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_allow_setsize_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_allow_file_io(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_allow_file_io_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_stop(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_stop_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_cmd_type(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_cmd_type_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_cmd_desc(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_cmd_frmt(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_cmd_name(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_cmd_num(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_calc(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,51318766)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_parser_calc_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_create_expr(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_create_expr_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_delete_expr(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,16490188)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_delete_expr_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_expr_eval(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,16490188)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_eval_expr_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_expr_eval_v(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,16490188)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_expr_diff(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,16490188)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_diff_expr_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_expr_diff_v(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,16490188)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_text_xyz(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_text_xyz_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_text_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_text_xy_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_text_y(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_text_y_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_gen(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_gen(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_xy_val(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_xy_val_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_val(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_val_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_xy_val(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_xy_val_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_val(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_val_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contd_xy_val(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contd_xy_val_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contd_val(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contd_val_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contd_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contd_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contd(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contd_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contv_xy_val(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contv_xy_val_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contv_val(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contv_val_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contv_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contv_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contv(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contv_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_axial_xy_val(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_axial_xy_val_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_axial_val(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_axial_val_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_axial_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_axial_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_axial(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_axial_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_torus(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_torus_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_grid3_xyz(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_grid3_xyz_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_grid3(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_grid3_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dens3_xyz(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dens3_xyz_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dens3(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dens3_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont3_xyz_val(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont3_xyz_val_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont3_val(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont3_val_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont3_xyz(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont3_xyz_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont3(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont3_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf3_xyz_val(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf3_xyz_val_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf3_val(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf3_val_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf3_xyz(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf3_xyz_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf3(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf3_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mglLinear(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( lua_isnumber(L,1)==0 ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mglSpline3(lua_State *L) {
	int luatop = lua_gettop(L);
	if( luatop<7 || luatop>10 ) return false;

	if( lua_isnumber(L,1)==0 ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( luatop>7 && lua_isnumber(L,8)==0 ) return false;
	if( luatop>8 && lua_isnumber(L,9)==0 ) return false;
	if( luatop>9 && lua_isnumber(L,10)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mglTransformA(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( !Luna<void>::has_uniqueid(L,1,45413231) ) return false;
	if( !Luna<void>::has_uniqueid(L,2,45413231) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mglTransform(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( !Luna<void>::has_uniqueid(L,1,45413231) ) return false;
	if( !Luna<void>::has_uniqueid(L,2,45413231) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mglFourier(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( !Luna<void>::has_uniqueid(L,1,45413231) ) return false;
	if( !Luna<void>::has_uniqueid(L,2,45413231) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mglSTFA(lua_State *L) {
	int luatop = lua_gettop(L);
	if( luatop<3 || luatop>4 ) return false;

	if( !Luna<void>::has_uniqueid(L,1,45413231) ) return false;
	if( !Luna<void>::has_uniqueid(L,2,45413231) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( luatop>3 && (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mglPDE(lua_State *L) {
	int luatop = lua_gettop(L);
	if( luatop<4 || luatop>7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( !Luna<void>::has_uniqueid(L,3,45413231) ) return false;
	if( !Luna<void>::has_uniqueid(L,4,45413231) ) return false;
	if( luatop>4 && lua_isnumber(L,5)==0 ) return false;
	if( luatop>5 && lua_isnumber(L,6)==0 ) return false;
	if( luatop>6 && lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mglQO2d_overload_1(lua_State *L) {
	int luatop = lua_gettop(L);
	if( luatop<4 || luatop>6 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( !Luna<void>::has_uniqueid(L,2,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,2))) ) return false;
	if( !Luna<void>::has_uniqueid(L,3,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,3))) ) return false;
	if( !Luna<void>::has_uniqueid(L,4,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,4))) ) return false;
	if( luatop>4 && lua_isnumber(L,5)==0 ) return false;
	if( luatop>5 && lua_isnumber(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mglQO2d_overload_2(lua_State *L) {
	int luatop = lua_gettop(L);
	if( luatop<6 || luatop>8 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( !Luna<void>::has_uniqueid(L,2,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,2))) ) return false;
	if( !Luna<void>::has_uniqueid(L,3,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,3))) ) return false;
	if( !Luna<void>::has_uniqueid(L,4,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,4))) ) return false;
	if( !Luna<void>::has_uniqueid(L,5,45413231) ) return false;
	if( (!(Luna< mglDataA >::checkSubType< mglData >(L,5))) ) return false;
	if( !Luna<void>::has_uniqueid(L,6,45413231) ) return false;
	if( (!(Luna< mglDataA >::checkSubType< mglData >(L,6))) ) return false;
	if( luatop>6 && lua_isnumber(L,7)==0 ) return false;
	if( luatop>7 && lua_isnumber(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mglRay(lua_State *L) {
	int luatop = lua_gettop(L);
	if( luatop<3 || luatop>5 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( !Luna<void>::has_uniqueid(L,2,56902440) ) return false;
	if( !Luna<void>::has_uniqueid(L,3,56902440) ) return false;
	if( luatop>3 && lua_isnumber(L,4)==0 ) return false;
	if( luatop>4 && lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mglJacobian_overload_1(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( !Luna<void>::has_uniqueid(L,1,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,1))) ) return false;
	if( !Luna<void>::has_uniqueid(L,2,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,2))) ) return false;
	return true;
}

inline static bool _lg_typecheck_mglJacobian_overload_2(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( !Luna<void>::has_uniqueid(L,1,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,1))) ) return false;
	if( !Luna<void>::has_uniqueid(L,2,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,2))) ) return false;
	if( !Luna<void>::has_uniqueid(L,3,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,3))) ) return false;
	return true;
}

inline static bool _lg_typecheck_mglTriangulation_overload_1(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( !Luna<void>::has_uniqueid(L,1,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,1))) ) return false;
	if( !Luna<void>::has_uniqueid(L,2,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,2))) ) return false;
	if( !Luna<void>::has_uniqueid(L,3,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,3))) ) return false;
	return true;
}

inline static bool _lg_typecheck_mglTriangulation_overload_2(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( !Luna<void>::has_uniqueid(L,1,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,1))) ) return false;
	if( !Luna<void>::has_uniqueid(L,2,45413231) ) return false;
	if( (!(Luna< mglDataA >::check(L,2))) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_srnd(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_rnd(lua_State *L) {
	if( lua_gettop(L)!=0 ) return false;

	return true;
}

inline static bool _lg_typecheck_mgl_ipow(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( lua_isnumber(L,1)==0 ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_create_data(lua_State *L) {
	if( lua_gettop(L)!=0 ) return false;

	return true;
}

inline static bool _lg_typecheck_mgl_create_data_(lua_State *L) {
	if( lua_gettop(L)!=0 ) return false;

	return true;
}

inline static bool _lg_typecheck_mgl_create_data_size(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_create_data_size_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_create_data_file(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_create_data_file_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_delete_data(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_delete_data_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_info(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_rearrange(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_rearrange_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_float(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_float_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_float1_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_double(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_double_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_double1_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_float2_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_double2_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_float3_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_double3_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_value(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_value_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_get_value(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_get_value_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_values(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_values_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_read_hdf(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_read_hdf_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_save_hdf(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_save_hdf_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datas_hdf(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_read(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_read_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_read_mat(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_read_mat_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_read_dim(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_read_dim_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_read_range(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_read_range__overload_1(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,1)==0 && !(Luna< uintptr_t >::check(L,1)) ) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_read_range__overload_2(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,1)==0 && !(Luna< uintptr_t >::check(L,1)) ) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_read_all(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_read_all__overload_1(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,1)==0 && !(Luna< uintptr_t >::check(L,1)) ) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_read_all__overload_2(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,1)==0 && !(Luna< uintptr_t >::check(L,1)) ) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_save(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_save_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_export(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_export_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_import(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_import_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_create(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_create_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_transpose(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_transpose_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_norm(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_norm_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_norm_slice(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_norm_slice_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_subdata(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_subdata_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_subdata_ext(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_subdata_ext_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_column(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_column_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_id(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_set_id_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_fill(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_fill_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_fill_eq(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_fill_eq_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_grid(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_grid_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_put_val(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_put_val_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_put_dat(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_put_dat_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_modify(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_modify_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_modify_vw(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_modify_vw_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_squeeze(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_squeeze_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_max(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_max_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_min(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_min_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_value(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_data(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_get_nx(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_get_nx_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_get_ny(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_get_ny_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_get_nz(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_get_nz_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_first(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_first_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_last(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_last_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_find(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_find_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_find_any(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_find_any_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_max_int(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_max_int_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_max_real(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_max_real_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_min_int(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_min_int_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_min_real(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_min_real_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_momentum_val(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_momentum_val_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_combine(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_combine_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_extend(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_extend_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_insert(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_insert_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_delete(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_delete_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_smooth(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_smooth_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_sum(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_sum_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_max_dir(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_max_dir_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_min_dir(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_min_dir_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_cumsum(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_cumsum_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_integral(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_integral_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_diff(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_diff_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_diff_par(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_diff_par_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_diff2(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_diff2_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_swap(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_swap_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_roll(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_roll_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_mirror(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_mirror_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_sort(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_sort_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_hankel(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_hankel_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_sinfft(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_sinfft_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_cosfft(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_cosfft_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_fill_sample(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_fill_sample_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_spline(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_spline_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_linear(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_linear_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_spline_ext(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_spline_ext_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_linear_ext(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_linear_ext_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_solve_1d(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_solve_1d_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_solve(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_solve_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_trace(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_trace_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_resize(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_resize_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_resize_box(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( lua_isnumber(L,10)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_resize_box_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( lua_isnumber(L,10)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_hist(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_momentum_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_hist_w(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_hist_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_momentum(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_hist_w_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_evaluate(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_evaluate_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_envelop(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_envelop_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_sew(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_sew_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_crop(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_crop__overload_1(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,1)==0 && !(Luna< uintptr_t >::check(L,1)) ) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_crop__overload_2(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,1)==0 && !(Luna< uintptr_t >::check(L,1)) ) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_clean(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_clean_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_mul_dat(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_mul_dat_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_div_dat(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_div_dat_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_add_dat(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_add_dat_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_sub_dat(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_sub_dat_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_mul_num(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_mul_num_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_div_num(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_div_num_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_add_num(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_add_num_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_sub_num(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_sub_num_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_pde_solve(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_pde_solve_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_qo2d_solve(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( (lua_isnil(L,8)==0 && !Luna<void>::has_uniqueid(L,8,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_qo2d_solve_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,23992870)) ) return false;
	if( (lua_isnil(L,8)==0 && !Luna<void>::has_uniqueid(L,8,23992870)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_ray_trace(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_ray_trace_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_jacobian_2d(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_jacobian_2d_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_jacobian_3d(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_jacobian_3d_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_transform_a(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_transform_a_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_transform(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_transform_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_fourier(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_fourier_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_stfa(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_data_stfa_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_triangulation_3d(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_triangulation_3d_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_triangulation_2d(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_triangulation_2d_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_create_datac(lua_State *L) {
	if( lua_gettop(L)!=0 ) return false;

	return true;
}

inline static bool _lg_typecheck_mgl_create_datac_(lua_State *L) {
	if( lua_gettop(L)!=0 ) return false;

	return true;
}

inline static bool _lg_typecheck_mgl_create_datac_size(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_create_datac_size_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_create_datac_file(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_create_datac_file_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_delete_datac(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_delete_datac_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_rearrange(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_rearrange_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_link(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,37931827)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_link_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,37931827)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_set_float(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_set_float_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_set_double(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_set_double_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_set_complex(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,37931827)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_set_complex_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,37931827)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_set(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_set_(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_get_value(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_data(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_value(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_set_ri(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_set_ri_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_set_ap(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_set_ap_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_read(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_read_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_read_mat(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_read_mat_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_read_dim(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_read_dim_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_read_range(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_read_all(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_save(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_save_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_read_hdf(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_read_hdf_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_save_hdf(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_save_hdf_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_create(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_create_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_transpose(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_transpose_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_set_id(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_set_id_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_modify(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_modify_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_modify_vw(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_modify_vw_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_squeeze(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_squeeze_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_extend(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_extend_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_insert(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_insert_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_delete(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_delete_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_smooth(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_smooth_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_cumsum(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_cumsum_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_integral(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_integral_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_diff(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_diff_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_diff2(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_diff2_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_swap(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_swap_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_roll(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_roll_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_mirror(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_mirror_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_crop(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_hankel(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_hankel_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_fft(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_fft_(lua_State *L) {
	if( lua_gettop(L)!=3 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_real(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_real_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_imag(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_imag_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_abs(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_abs_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_arg(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_arg_(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_linear(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_linear_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_linear_ext(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,45413231)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,37931827)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,37931827)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,37931827)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_datac_linear_ext_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,37931827)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,37931827)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,37931827)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mglchr(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_num_thr(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_set_test_mode(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_strtrim(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_strlwr(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnumber(L,1)==0 || lua_tointeger(L,1) != lua_tonumber(L,1)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_1(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_2(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_3(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_xy(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_xyz(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_xyza(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnil(L,8)==0 && !Luna<void>::has_uniqueid(L,8,45413231)) ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_ys(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_xys(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_xyzs(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnil(L,8)==0 && !Luna<void>::has_uniqueid(L,8,45413231)) ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_xyzas(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnil(L,9)==0 && !Luna<void>::has_uniqueid(L,9,45413231)) ) return false;
	if( lua_isstring(L,10)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_get_fit(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_hist_x(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_hist_xy(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_hist_xyz(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_puts_fit(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_1_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_2_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_3_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_xy_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_xyz_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,23992870)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_xyza_(lua_State *L) {
	if( lua_gettop(L)!=12 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnil(L,8)==0 && !Luna<void>::has_uniqueid(L,8,23992870)) ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	if( (lua_isnumber(L,12)==0 || lua_tointeger(L,12) != lua_tonumber(L,12)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_ys_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_xys_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,23992870)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_xyzs_(lua_State *L) {
	if( lua_gettop(L)!=12 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnil(L,8)==0 && !Luna<void>::has_uniqueid(L,8,23992870)) ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	if( (lua_isnumber(L,12)==0 || lua_tointeger(L,12) != lua_tonumber(L,12)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fit_xyzas_(lua_State *L) {
	if( lua_gettop(L)!=13 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnil(L,9)==0 && !Luna<void>::has_uniqueid(L,9,23992870)) ) return false;
	if( lua_isstring(L,10)==0 ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	if( (lua_isnumber(L,12)==0 || lua_tointeger(L,12) != lua_tonumber(L,12)) ) return false;
	if( (lua_isnumber(L,13)==0 || lua_tointeger(L,13) != lua_tonumber(L,13)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_hist_x_(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_hist_xy_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_hist_xyz_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_puts_fit_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mglGetStyle(lua_State *L) {
	int luatop = lua_gettop(L);
	if( luatop<2 || luatop>3 ) return false;

	if( lua_isstring(L,1)==0 ) return false;
	if( (lua_isnumber(L,2)==0 || lua_tointeger(L,2) != lua_tonumber(L,2)) ) return false;
	if( luatop>2 && (lua_isnumber(L,3)==0 || lua_tointeger(L,3) != lua_tonumber(L,3)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_create_graph_gl(lua_State *L) {
	if( lua_gettop(L)!=0 ) return false;

	return true;
}

inline static bool _lg_typecheck_mgl_create_graph_gl_(lua_State *L) {
	if( lua_gettop(L)!=0 ) return false;

	return true;
}

inline static bool _lg_typecheck_mgl_triplot_xyzc(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_triplot_xyzc_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_triplot_xyz(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_triplot_xyz_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_triplot_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_triplot_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_quadplot_xyzc(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_quadplot_xyzc_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_quadplot_xyz(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_quadplot_xyz_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_quadplot_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_quadplot_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tricont_xyzcv(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tricont_xyzcv_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,23992870)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tricont_xycv(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tricont_xycv_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tricont_xyzc(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tricont_xyzc_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tricont_xyc(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tricont_xyc_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dots(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dots_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dots_a(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dots_a_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_crust(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_crust_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dens_x(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dens_x_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dens_y(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dens_y_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dens_z(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dens_z_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_x(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_x_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_y(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_y_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_z(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_z_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_x_val(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_x_val_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_y_val(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_y_val_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_z_val(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cont_z_val_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_x(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_x_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_y(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_y_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_z(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_z_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_x_val(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_x_val_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_y_val(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_y_val_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_z_val(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_contf_z_val_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fplot(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fplot_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fplot_xyz(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fplot_xyz_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_radar(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_radar_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_plot_xyz(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_plot_xyz_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_plot_xy(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_plot_xy_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_plot(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_plot_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tens_xyz(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tens_xyz_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tens_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tens_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tens(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tens_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tape_xyz(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tape_xyz_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tape_xy(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tape_xy_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tape(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tape_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_boxplot_xy(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_boxplot_xy_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_boxplot(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_boxplot_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_area_xyz(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_area_xyz_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_area_xy(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_area_xy_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_area(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_area_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_region_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_region_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_region(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_region_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_stem_xyz(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_stem_xyz_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_stem_xy(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_stem_xy_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_stem(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_stem_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_step_xyz(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_step_xyz_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_step_xy(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_step_xy_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_step(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_step_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_bars_xyz(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_bars_xyz_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_bars_xy(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_bars_xy_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_bars(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_bars_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_barh_yx(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_barh_yx_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_barh(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_barh_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_chart(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_chart_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_error_exy(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_error_exy_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_error_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_error_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_error(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_error_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mark_xyz(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mark_xyz_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mark_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mark_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mark_y(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mark_y_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tube_xyzr(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tube_xyzr_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tube_xyr(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tube_xyr_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tube_r(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tube_r_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tube_xyz(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tube_xyz_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tube_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tube_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tube(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tube_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_candle_xyv(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_candle_xyv_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_candle_yv(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_candle_yv_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_candle(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_candle_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mark(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mark_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_ball(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_ball_(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_line(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_line_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_curve(lua_State *L) {
	if( lua_gettop(L)!=15 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( lua_isnumber(L,10)==0 ) return false;
	if( lua_isnumber(L,11)==0 ) return false;
	if( lua_isnumber(L,12)==0 ) return false;
	if( lua_isnumber(L,13)==0 ) return false;
	if( lua_isstring(L,14)==0 ) return false;
	if( (lua_isnumber(L,15)==0 || lua_tointeger(L,15) != lua_tonumber(L,15)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_curve_(lua_State *L) {
	if( lua_gettop(L)!=16 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( lua_isnumber(L,10)==0 ) return false;
	if( lua_isnumber(L,11)==0 ) return false;
	if( lua_isnumber(L,12)==0 ) return false;
	if( lua_isnumber(L,13)==0 ) return false;
	if( lua_isstring(L,14)==0 ) return false;
	if( (lua_isnumber(L,15)==0 || lua_tointeger(L,15) != lua_tonumber(L,15)) ) return false;
	if( (lua_isnumber(L,16)==0 || lua_tointeger(L,16) != lua_tonumber(L,16)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_error_box(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_error_box_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_face(lua_State *L) {
	if( lua_gettop(L)!=14 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( lua_isnumber(L,10)==0 ) return false;
	if( lua_isnumber(L,11)==0 ) return false;
	if( lua_isnumber(L,12)==0 ) return false;
	if( lua_isnumber(L,13)==0 ) return false;
	if( lua_isstring(L,14)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_face_(lua_State *L) {
	if( lua_gettop(L)!=15 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( lua_isnumber(L,10)==0 ) return false;
	if( lua_isnumber(L,11)==0 ) return false;
	if( lua_isnumber(L,12)==0 ) return false;
	if( lua_isnumber(L,13)==0 ) return false;
	if( lua_isstring(L,14)==0 ) return false;
	if( (lua_isnumber(L,15)==0 || lua_tointeger(L,15) != lua_tonumber(L,15)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_facex(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_facex_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_facey(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_facey_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_facez(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_facez_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_sphere(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_sphere_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_drop(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( lua_isnumber(L,10)==0 ) return false;
	if( lua_isnumber(L,11)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_drop_(lua_State *L) {
	if( lua_gettop(L)!=12 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( lua_isnumber(L,10)==0 ) return false;
	if( lua_isnumber(L,11)==0 ) return false;
	if( (lua_isnumber(L,12)==0 || lua_tointeger(L,12) != lua_tonumber(L,12)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cone(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( lua_isstring(L,10)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cone_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( lua_isstring(L,10)==0 ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_ellipse(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_ellipse_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_rhomb(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_rhomb_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isnumber(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cones_xyz(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cones_xyz_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cones_xz(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cones(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cones_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dew_xy(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dew_xy_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dew_2d(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dew_2d_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_puts(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_puts_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_puts_dir(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( lua_isnumber(L,10)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_puts_dir_(lua_State *L) {
	if( lua_gettop(L)!=12 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( lua_isnumber(L,10)==0 ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	if( (lua_isnumber(L,12)==0 || lua_tointeger(L,12) != lua_tonumber(L,12)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_textmark_xyzr(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_textmark_xyzr_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_textmark_xyr(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_textmark_xyr_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_textmark_yr(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_textmark_yr_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_textmark(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_textmark_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_table(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_table_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fsurf(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fsurf_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fsurf_xyz(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fsurf_xyz_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isstring(L,2)==0 ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_grid_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_grid_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_grid(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_grid_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mesh_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mesh_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mesh(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_mesh_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fall_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fall_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fall(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_fall_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_belt_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_belt_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_belt(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_belt_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dens_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dens_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dens(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_dens_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_boxs_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_boxs_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_boxs(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_boxs_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tile_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tile_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tile(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tile_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tiles_xy(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tiles_xy_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tiles(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_tiles_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surfc_xy(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surfc_xy_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surfc(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surfc_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surfa_xy(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surfa_xy_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surfa(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surfa_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_stfa_xy(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_stfa_xy_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_stfa(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_stfa_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnumber(L,4)==0 || lua_tointeger(L,4) != lua_tonumber(L,4)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_map_xy(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_map_xy_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_map(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_map_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_norm(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( !Luna<void>::has_uniqueid(L,1,56902440) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_traj_xy(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_traj_xy_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_traj_xyz(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_traj_xyz_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,23992870)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_vect_xy(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_vect_xy_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_vect_2d(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_vect_2d_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_vect_xyz(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_vect_xyz_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,23992870)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_vect_3d(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_vect_3d_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flow_xy(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flow_xy_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flow_2d(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flow_2d_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flow_xyz(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flow_xyz_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,23992870)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flow_3d(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flow_3d_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flowp_xy(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( (lua_isnil(L,8)==0 && !Luna<void>::has_uniqueid(L,8,45413231)) ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( lua_isstring(L,10)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flowp_xy_(lua_State *L) {
	if( lua_gettop(L)!=12 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,23992870)) ) return false;
	if( (lua_isnil(L,8)==0 && !Luna<void>::has_uniqueid(L,8,23992870)) ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( lua_isstring(L,10)==0 ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	if( (lua_isnumber(L,12)==0 || lua_tointeger(L,12) != lua_tonumber(L,12)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flowp_2d(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flowp_2d_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flowp_xyz(lua_State *L) {
	if( lua_gettop(L)!=12 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( (lua_isnil(L,8)==0 && !Luna<void>::has_uniqueid(L,8,45413231)) ) return false;
	if( (lua_isnil(L,9)==0 && !Luna<void>::has_uniqueid(L,9,45413231)) ) return false;
	if( (lua_isnil(L,10)==0 && !Luna<void>::has_uniqueid(L,10,45413231)) ) return false;
	if( lua_isstring(L,11)==0 ) return false;
	if( lua_isstring(L,12)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flowp_xyz_(lua_State *L) {
	if( lua_gettop(L)!=14 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,23992870)) ) return false;
	if( (lua_isnil(L,8)==0 && !Luna<void>::has_uniqueid(L,8,23992870)) ) return false;
	if( (lua_isnil(L,9)==0 && !Luna<void>::has_uniqueid(L,9,23992870)) ) return false;
	if( (lua_isnil(L,10)==0 && !Luna<void>::has_uniqueid(L,10,23992870)) ) return false;
	if( lua_isstring(L,11)==0 ) return false;
	if( lua_isstring(L,12)==0 ) return false;
	if( (lua_isnumber(L,13)==0 || lua_tointeger(L,13) != lua_tonumber(L,13)) ) return false;
	if( (lua_isnumber(L,14)==0 || lua_tointeger(L,14) != lua_tonumber(L,14)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flowp_3d(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_flowp_3d_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( lua_isnumber(L,3)==0 ) return false;
	if( lua_isnumber(L,4)==0 ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,23992870)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_pipe_xy(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_pipe_xy_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_pipe_2d(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_pipe_2d_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isnumber(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_pipe_xyz(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( lua_isstring(L,10)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_pipe_xyz_(lua_State *L) {
	if( lua_gettop(L)!=12 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,23992870)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( lua_isstring(L,10)==0 ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	if( (lua_isnumber(L,12)==0 || lua_tointeger(L,12) != lua_tonumber(L,12)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_pipe_3d(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_pipe_3d_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_grad_xyz(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_grad_xyz_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_grad_xy(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_grad_xy_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_grad(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_grad_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_vect3_xyz(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( lua_isstring(L,10)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_vect3_xyz_(lua_State *L) {
	if( lua_gettop(L)!=12 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,23992870)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isnumber(L,9)==0 ) return false;
	if( lua_isstring(L,10)==0 ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	if( (lua_isnumber(L,12)==0 || lua_tointeger(L,12) != lua_tonumber(L,12)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_vect3(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_vect3_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3_xyz_val(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3_xyz_val_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3_val(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3_val_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3_xyz(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3_xyz_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3a_xyz_val(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3a_xyz_val_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,23992870)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3a_val(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3a_val_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3a_xyz(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3a_xyz_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3a(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3a_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3c_xyz_val(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,45413231)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3c_xyz_val_(lua_State *L) {
	if( lua_gettop(L)!=11 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( (lua_isnil(L,7)==0 && !Luna<void>::has_uniqueid(L,7,23992870)) ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( lua_isstring(L,9)==0 ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	if( (lua_isnumber(L,11)==0 || lua_tointeger(L,11) != lua_tonumber(L,11)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3c_val(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3c_val_(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3c_xyz(lua_State *L) {
	if( lua_gettop(L)!=8 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3c_xyz_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3c(lua_State *L) {
	if( lua_gettop(L)!=5 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_surf3c_(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( lua_isstring(L,5)==0 ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	if( (lua_isnumber(L,7)==0 || lua_tointeger(L,7) != lua_tonumber(L,7)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cloud_xyz(lua_State *L) {
	if( lua_gettop(L)!=7 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cloud_xyz_(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isstring(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cloud(lua_State *L) {
	if( lua_gettop(L)!=4 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_cloud_(lua_State *L) {
	if( lua_gettop(L)!=6 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( lua_isstring(L,3)==0 ) return false;
	if( lua_isstring(L,4)==0 ) return false;
	if( (lua_isnumber(L,5)==0 || lua_tointeger(L,5) != lua_tonumber(L,5)) ) return false;
	if( (lua_isnumber(L,6)==0 || lua_tointeger(L,6) != lua_tonumber(L,6)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_beam_val(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,45413231)) ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_beam_val_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( lua_isnumber(L,2)==0 ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( (lua_isnil(L,6)==0 && !Luna<void>::has_uniqueid(L,6,23992870)) ) return false;
	if( lua_isnumber(L,7)==0 ) return false;
	if( lua_isstring(L,8)==0 ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_beam(lua_State *L) {
	if( lua_gettop(L)!=9 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,45413231)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,45413231)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,45413231)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,45413231)) ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_beam_(lua_State *L) {
	if( lua_gettop(L)!=10 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,23992870)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,23992870)) ) return false;
	if( (lua_isnil(L,3)==0 && !Luna<void>::has_uniqueid(L,3,23992870)) ) return false;
	if( (lua_isnil(L,4)==0 && !Luna<void>::has_uniqueid(L,4,23992870)) ) return false;
	if( (lua_isnil(L,5)==0 && !Luna<void>::has_uniqueid(L,5,23992870)) ) return false;
	if( lua_isnumber(L,6)==0 ) return false;
	if( lua_isstring(L,7)==0 ) return false;
	if( (lua_isnumber(L,8)==0 || lua_tointeger(L,8) != lua_tonumber(L,8)) ) return false;
	if( (lua_isnumber(L,9)==0 || lua_tointeger(L,9) != lua_tonumber(L,9)) ) return false;
	if( (lua_isnumber(L,10)==0 || lua_tointeger(L,10) != lua_tonumber(L,10)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_draw_graph(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,3625364)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_draw_class(lua_State *L) {
	if( lua_gettop(L)!=2 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,88502113)) ) return false;
	if( (lua_isnil(L,2)==0 && !Luna<void>::has_uniqueid(L,2,3625364)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_click_class(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,3625364)) ) return false;
	return true;
}

inline static bool _lg_typecheck_mgl_reload_class(lua_State *L) {
	if( lua_gettop(L)!=1 ) return false;

	if( (lua_isnil(L,1)==0 && !Luna<void>::has_uniqueid(L,1,3625364)) ) return false;
	return true;
}


// Function binds:
// dual mgl_ipowc(dual x, int n)
static int _bind_mgl_ipowc(lua_State *L) {
	if (!_lg_typecheck_mgl_ipowc(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in dual mgl_ipowc(dual x, int n) function, expected prototype:\ndual mgl_ipowc(dual x, int n)\nClass arguments details:\narg 1 ID = 3094652\n");
	}

	dual* x_ptr=(Luna< std::complex< double > >::checkSubType< dual >(L,1));
	if( !x_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg x in mgl_ipowc function");
	}
	dual x=*x_ptr;
	int n=(int)lua_tointeger(L,2);

	dual stack_lret = mgl_ipowc(x, n);
	dual* lret = new dual(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< dual >::push(L,lret,true);

	return 1;
}

// dual expi(dual a)
static int _bind_expi_overload_1(lua_State *L) {
	if (!_lg_typecheck_expi_overload_1(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in dual expi(dual a) function, expected prototype:\ndual expi(dual a)\nClass arguments details:\narg 1 ID = 3094652\n");
	}

	dual* a_ptr=(Luna< std::complex< double > >::checkSubType< dual >(L,1));
	if( !a_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg a in expi function");
	}
	dual a=*a_ptr;

	dual stack_lret = expi(a);
	dual* lret = new dual(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< dual >::push(L,lret,true);

	return 1;
}

// dual expi(double a)
static int _bind_expi_overload_2(lua_State *L) {
	if (!_lg_typecheck_expi_overload_2(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in dual expi(double a) function, expected prototype:\ndual expi(double a)\nClass arguments details:\n");
	}

	double a=(double)lua_tonumber(L,1);

	dual stack_lret = expi(a);
	dual* lret = new dual(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< dual >::push(L,lret,true);

	return 1;
}

// Overload binder for expi
static int _bind_expi(lua_State *L) {
	if (_lg_typecheck_expi_overload_1(L)) return _bind_expi_overload_1(L);
	if (_lg_typecheck_expi_overload_2(L)) return _bind_expi_overload_2(L);

	luaL_error(L, "error in function expi, cannot match any of the overloads for function expi:\n  expi(dual)\n  expi(double)\n");
	return 0;
}

// bool mgl_difr_axial(dual * a, int n, dual q, int Border, dual * b, dual * d, int kk, double di)
static int _bind_mgl_difr_axial(lua_State *L) {
	if (!_lg_typecheck_mgl_difr_axial(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in bool mgl_difr_axial(dual * a, int n, dual q, int Border, dual * b, dual * d, int kk, double di) function, expected prototype:\nbool mgl_difr_axial(dual * a, int n, dual q, int Border, dual * b, dual * d, int kk, double di)\nClass arguments details:\narg 1 ID = 3094652\narg 3 ID = 3094652\narg 5 ID = 3094652\narg 6 ID = 3094652\n");
	}

	dual* a=(Luna< std::complex< double > >::checkSubType< dual >(L,1));
	int n=(int)lua_tointeger(L,2);
	dual* q_ptr=(Luna< std::complex< double > >::checkSubType< dual >(L,3));
	if( !q_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg q in mgl_difr_axial function");
	}
	dual q=*q_ptr;
	int Border=(int)lua_tointeger(L,4);
	dual* b=(Luna< std::complex< double > >::checkSubType< dual >(L,5));
	dual* d=(Luna< std::complex< double > >::checkSubType< dual >(L,6));
	int kk=(int)lua_tointeger(L,7);
	double di=(double)lua_tonumber(L,8);

	bool lret = mgl_difr_axial(a, n, q, Border, b, d, kk, di);
	lua_pushboolean(L,lret?1:0);

	return 1;
}

// bool mgl_difr_grid(dual * a, int n, dual q, int Border, dual * b, dual * d, int kk)
static int _bind_mgl_difr_grid(lua_State *L) {
	if (!_lg_typecheck_mgl_difr_grid(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in bool mgl_difr_grid(dual * a, int n, dual q, int Border, dual * b, dual * d, int kk) function, expected prototype:\nbool mgl_difr_grid(dual * a, int n, dual q, int Border, dual * b, dual * d, int kk)\nClass arguments details:\narg 1 ID = 3094652\narg 3 ID = 3094652\narg 5 ID = 3094652\narg 6 ID = 3094652\n");
	}

	dual* a=(Luna< std::complex< double > >::checkSubType< dual >(L,1));
	int n=(int)lua_tointeger(L,2);
	dual* q_ptr=(Luna< std::complex< double > >::checkSubType< dual >(L,3));
	if( !q_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg q in mgl_difr_grid function");
	}
	dual q=*q_ptr;
	int Border=(int)lua_tointeger(L,4);
	dual* b=(Luna< std::complex< double > >::checkSubType< dual >(L,5));
	dual* d=(Luna< std::complex< double > >::checkSubType< dual >(L,6));
	int kk=(int)lua_tointeger(L,7);

	bool lret = mgl_difr_grid(a, n, q, Border, b, d, kk);
	lua_pushboolean(L,lret?1:0);

	return 1;
}

// double mgl_gauss_rnd()
static int _bind_mgl_gauss_rnd(lua_State *L) {
	if (!_lg_typecheck_mgl_gauss_rnd(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_gauss_rnd() function, expected prototype:\ndouble mgl_gauss_rnd()\nClass arguments details:\n");
	}


	double lret = mgl_gauss_rnd();
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_fft_freq(double * freq, size_t nn)
static int _bind_mgl_fft_freq(lua_State *L) {
	if (!_lg_typecheck_mgl_fft_freq(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_fft_freq(double * freq, size_t nn) function, expected prototype:\nvoid mgl_fft_freq(double * freq, size_t nn)\nClass arguments details:\n");
	}

	double freq=(double)lua_tonumber(L,1);
	size_t nn=(size_t)lua_tointeger(L,2);

	mgl_fft_freq(&freq, nn);

	return 0;
}

// void mgl_strcls(char * str)
static int _bind_mgl_strcls(lua_State *L) {
	if (!_lg_typecheck_mgl_strcls(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_strcls(char * str) function, expected prototype:\nvoid mgl_strcls(char * str)\nClass arguments details:\n");
	}

	char str=(char)lua_tointeger(L,1);

	mgl_strcls(&str);

	return 0;
}

// int mgl_strpos(const char * str, char * fnd)
static int _bind_mgl_strpos(lua_State *L) {
	if (!_lg_typecheck_mgl_strpos(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_strpos(const char * str, char * fnd) function, expected prototype:\nint mgl_strpos(const char * str, char * fnd)\nClass arguments details:\n");
	}

	const char * str=(const char *)lua_tostring(L,1);
	char fnd=(char)lua_tointeger(L,2);

	int lret = mgl_strpos(str, &fnd);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_chrpos(const char * str, char fnd)
static int _bind_mgl_chrpos(lua_State *L) {
	if (!_lg_typecheck_mgl_chrpos(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_chrpos(const char * str, char fnd) function, expected prototype:\nint mgl_chrpos(const char * str, char fnd)\nClass arguments details:\n");
	}

	const char * str=(const char *)lua_tostring(L,1);
	char fnd=(char)lua_tointeger(L,2);

	int lret = mgl_chrpos(str, fnd);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_istrue(char ch)
static int _bind_mgl_istrue(lua_State *L) {
	if (!_lg_typecheck_mgl_istrue(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_istrue(char ch) function, expected prototype:\nint mgl_istrue(char ch)\nClass arguments details:\n");
	}

	char ch=(char)lua_tointeger(L,1);

	int lret = mgl_istrue(ch);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_d(double v, double v1, double v2)
static int _bind_mgl_d(lua_State *L) {
	if (!_lg_typecheck_mgl_d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_d(double v, double v1, double v2) function, expected prototype:\ndouble mgl_d(double v, double v1, double v2)\nClass arguments details:\n");
	}

	double v=(double)lua_tonumber(L,1);
	double v1=(double)lua_tonumber(L,2);
	double v2=(double)lua_tonumber(L,3);

	double lret = mgl_d(v, v1, v2);
	lua_pushnumber(L,lret);

	return 1;
}

// mglPoint GetX(const mglDataA * x, int i, int j, int k = 0)
static int _bind_GetX(lua_State *L) {
	if (!_lg_typecheck_GetX(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglPoint GetX(const mglDataA * x, int i, int j, int k = 0) function, expected prototype:\nmglPoint GetX(const mglDataA * x, int i, int j, int k = 0)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	int luatop = lua_gettop(L);

	const mglDataA* x=(Luna< mglDataA >::check(L,1));
	int i=(int)lua_tointeger(L,2);
	int j=(int)lua_tointeger(L,3);
	int k=luatop>3 ? (int)lua_tointeger(L,4) : 0;

	mglPoint stack_lret = GetX(x, i, j, k);
	mglPoint* lret = new mglPoint(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglPoint >::push(L,lret,true);

	return 1;
}

// mglPoint GetY(const mglDataA * y, int i, int j, int k = 0)
static int _bind_GetY(lua_State *L) {
	if (!_lg_typecheck_GetY(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglPoint GetY(const mglDataA * y, int i, int j, int k = 0) function, expected prototype:\nmglPoint GetY(const mglDataA * y, int i, int j, int k = 0)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	int luatop = lua_gettop(L);

	const mglDataA* y=(Luna< mglDataA >::check(L,1));
	int i=(int)lua_tointeger(L,2);
	int j=(int)lua_tointeger(L,3);
	int k=luatop>3 ? (int)lua_tointeger(L,4) : 0;

	mglPoint stack_lret = GetY(y, i, j, k);
	mglPoint* lret = new mglPoint(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglPoint >::push(L,lret,true);

	return 1;
}

// mglPoint GetZ(const mglDataA * z, int i, int j, int k = 0)
static int _bind_GetZ(lua_State *L) {
	if (!_lg_typecheck_GetZ(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglPoint GetZ(const mglDataA * z, int i, int j, int k = 0) function, expected prototype:\nmglPoint GetZ(const mglDataA * z, int i, int j, int k = 0)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	int luatop = lua_gettop(L);

	const mglDataA* z=(Luna< mglDataA >::check(L,1));
	int i=(int)lua_tointeger(L,2);
	int j=(int)lua_tointeger(L,3);
	int k=luatop>3 ? (int)lua_tointeger(L,4) : 0;

	mglPoint stack_lret = GetZ(z, i, j, k);
	mglPoint* lret = new mglPoint(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglPoint >::push(L,lret,true);

	return 1;
}

// long mgl_have_color(const char * stl)
static int _bind_mgl_have_color(lua_State *L) {
	if (!_lg_typecheck_mgl_have_color(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_have_color(const char * stl) function, expected prototype:\nlong mgl_have_color(const char * stl)\nClass arguments details:\n");
	}

	const char * stl=(const char *)lua_tostring(L,1);

	long lret = mgl_have_color(stl);
	lua_pushnumber(L,lret);

	return 1;
}

// bool mgl_check_dim0(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * name, bool less = false)
static int _bind_mgl_check_dim0(lua_State *L) {
	if (!_lg_typecheck_mgl_check_dim0(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in bool mgl_check_dim0(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * name, bool less = false) function, expected prototype:\nbool mgl_check_dim0(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * name, bool less = false)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	int luatop = lua_gettop(L);

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* r=(Luna< mglDataA >::check(L,5));
	const char * name=(const char *)lua_tostring(L,6);
	bool less=luatop>6 ? (bool)(lua_toboolean(L,7)==1) : false;

	bool lret = mgl_check_dim0(gr, x, y, z, r, name, less);
	lua_pushboolean(L,lret?1:0);

	return 1;
}

// bool mgl_check_dim1(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * name, bool less = false)
static int _bind_mgl_check_dim1(lua_State *L) {
	if (!_lg_typecheck_mgl_check_dim1(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in bool mgl_check_dim1(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * name, bool less = false) function, expected prototype:\nbool mgl_check_dim1(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * name, bool less = false)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	int luatop = lua_gettop(L);

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* r=(Luna< mglDataA >::check(L,5));
	const char * name=(const char *)lua_tostring(L,6);
	bool less=luatop>6 ? (bool)(lua_toboolean(L,7)==1) : false;

	bool lret = mgl_check_dim1(gr, x, y, z, r, name, less);
	lua_pushboolean(L,lret?1:0);

	return 1;
}

// bool mgl_check_dim2(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * name, bool less = false)
static int _bind_mgl_check_dim2(lua_State *L) {
	if (!_lg_typecheck_mgl_check_dim2(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in bool mgl_check_dim2(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * name, bool less = false) function, expected prototype:\nbool mgl_check_dim2(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * name, bool less = false)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	int luatop = lua_gettop(L);

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	const char * name=(const char *)lua_tostring(L,6);
	bool less=luatop>6 ? (bool)(lua_toboolean(L,7)==1) : false;

	bool lret = mgl_check_dim2(gr, x, y, z, a, name, less);
	lua_pushboolean(L,lret?1:0);

	return 1;
}

// bool mgl_check_dim3(mglBase * gr, bool both, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * name)
static int _bind_mgl_check_dim3(lua_State *L) {
	if (!_lg_typecheck_mgl_check_dim3(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in bool mgl_check_dim3(mglBase * gr, bool both, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * name) function, expected prototype:\nbool mgl_check_dim3(mglBase * gr, bool both, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * name)\nClass arguments details:\narg 1 ID = 88502113\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 7 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	bool both=(bool)(lua_toboolean(L,2)==1);
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const mglDataA* a=(Luna< mglDataA >::check(L,6));
	const mglDataA* b=(Luna< mglDataA >::check(L,7));
	const char * name=(const char *)lua_tostring(L,8);

	bool lret = mgl_check_dim3(gr, both, x, y, z, a, b, name);
	lua_pushboolean(L,lret?1:0);

	return 1;
}

// bool mgl_check_vec3(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * name)
static int _bind_mgl_check_vec3(lua_State *L) {
	if (!_lg_typecheck_mgl_check_vec3(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in bool mgl_check_vec3(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * name) function, expected prototype:\nbool mgl_check_vec3(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * name)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 7 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* ax=(Luna< mglDataA >::check(L,5));
	const mglDataA* ay=(Luna< mglDataA >::check(L,6));
	const mglDataA* az=(Luna< mglDataA >::check(L,7));
	const char * name=(const char *)lua_tostring(L,8);

	bool lret = mgl_check_vec3(gr, x, y, z, ax, ay, az, name);
	lua_pushboolean(L,lret?1:0);

	return 1;
}

// bool mgl_check_trig(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * name, int d = 3)
static int _bind_mgl_check_trig(lua_State *L) {
	if (!_lg_typecheck_mgl_check_trig(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in bool mgl_check_trig(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * name, int d = 3) function, expected prototype:\nbool mgl_check_trig(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * name, int d = 3)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	int luatop = lua_gettop(L);

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* nums=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const mglDataA* a=(Luna< mglDataA >::check(L,6));
	const char * name=(const char *)lua_tostring(L,7);
	int d=luatop>7 ? (int)lua_tointeger(L,8) : 3;

	bool lret = mgl_check_trig(gr, nums, x, y, z, a, name, d);
	lua_pushboolean(L,lret?1:0);

	return 1;
}

// bool mgl_isboth(const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a)
static int _bind_mgl_isboth(lua_State *L) {
	if (!_lg_typecheck_mgl_isboth(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in bool mgl_isboth(const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a) function, expected prototype:\nbool mgl_isboth(const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	const mglDataA* x=(Luna< mglDataA >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const mglDataA* z=(Luna< mglDataA >::check(L,3));
	const mglDataA* a=(Luna< mglDataA >::check(L,4));

	bool lret = mgl_isboth(x, y, z, a);
	lua_pushboolean(L,lret?1:0);

	return 1;
}

// int mgl_get_warn(mglBase * gr)
static int _bind_mgl_get_warn(lua_State *L) {
	if (!_lg_typecheck_mgl_get_warn(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_get_warn(mglBase * gr) function, expected prototype:\nint mgl_get_warn(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	int lret = mgl_get_warn(gr);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_get_warn_(uintptr_t * gr)
static int _bind_mgl_get_warn_(lua_State *L) {
	if (!_lg_typecheck_mgl_get_warn_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_get_warn_(uintptr_t * gr) function, expected prototype:\nint mgl_get_warn_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	int lret = mgl_get_warn_(gr);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_set_warn(mglBase * gr, int code, const char * text)
static int _bind_mgl_set_warn(lua_State *L) {
	if (!_lg_typecheck_mgl_set_warn(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_warn(mglBase * gr, int code, const char * text) function, expected prototype:\nvoid mgl_set_warn(mglBase * gr, int code, const char * text)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int code=(int)lua_tointeger(L,2);
	const char * text=(const char *)lua_tostring(L,3);

	mgl_set_warn(gr, code, text);

	return 0;
}

// void mgl_set_warn_(uintptr_t * gr, int * code, const char * text, int arg4)
static int _bind_mgl_set_warn_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_warn_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_warn_(uintptr_t * gr, int * code, const char * text, int arg4) function, expected prototype:\nvoid mgl_set_warn_(uintptr_t * gr, int * code, const char * text, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int code=(int)lua_tointeger(L,2);
	const char * text=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_set_warn_(gr, &code, text, _arg4);

	return 0;
}

// const char * mgl_get_mess(mglBase * gr)
static int _bind_mgl_get_mess(lua_State *L) {
	if (!_lg_typecheck_mgl_get_mess(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in const char * mgl_get_mess(mglBase * gr) function, expected prototype:\nconst char * mgl_get_mess(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	const char * lret = mgl_get_mess(gr);
	lua_pushstring(L,lret);

	return 1;
}

// int mgl_get_flag(mglBase * gr, long flag)
static int _bind_mgl_get_flag(lua_State *L) {
	if (!_lg_typecheck_mgl_get_flag(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_get_flag(mglBase * gr, long flag) function, expected prototype:\nint mgl_get_flag(mglBase * gr, long flag)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	long flag=(long)lua_tointeger(L,2);

	int lret = mgl_get_flag(gr, flag);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_set_flag(mglBase * gr, int val, long flag)
static int _bind_mgl_set_flag(lua_State *L) {
	if (!_lg_typecheck_mgl_set_flag(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_flag(mglBase * gr, int val, long flag) function, expected prototype:\nvoid mgl_set_flag(mglBase * gr, int val, long flag)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int val=(int)lua_tointeger(L,2);
	long flag=(long)lua_tointeger(L,3);

	mgl_set_flag(gr, val, flag);

	return 0;
}

// long mgl_use_graph(mglBase * gr, int inc)
static int _bind_mgl_use_graph(lua_State *L) {
	if (!_lg_typecheck_mgl_use_graph(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_use_graph(mglBase * gr, int inc) function, expected prototype:\nlong mgl_use_graph(mglBase * gr, int inc)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int inc=(int)lua_tointeger(L,2);

	long lret = mgl_use_graph(gr, inc);
	lua_pushnumber(L,lret);

	return 1;
}

// long mgl_use_graph_(uintptr_t * gr, int * inc)
static int _bind_mgl_use_graph_(lua_State *L) {
	if (!_lg_typecheck_mgl_use_graph_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_use_graph_(uintptr_t * gr, int * inc) function, expected prototype:\nlong mgl_use_graph_(uintptr_t * gr, int * inc)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int inc=(int)lua_tointeger(L,2);

	long lret = mgl_use_graph_(gr, &inc);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_set_rdc_acc(mglBase * gr, int reduce)
static int _bind_mgl_set_rdc_acc(lua_State *L) {
	if (!_lg_typecheck_mgl_set_rdc_acc(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_rdc_acc(mglBase * gr, int reduce) function, expected prototype:\nvoid mgl_set_rdc_acc(mglBase * gr, int reduce)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int reduce=(int)lua_tointeger(L,2);

	mgl_set_rdc_acc(gr, reduce);

	return 0;
}

// void mgl_set_rdc_acc_(uintptr_t * gr, int * reduce)
static int _bind_mgl_set_rdc_acc_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_rdc_acc_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_rdc_acc_(uintptr_t * gr, int * reduce) function, expected prototype:\nvoid mgl_set_rdc_acc_(uintptr_t * gr, int * reduce)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int reduce=(int)lua_tointeger(L,2);

	mgl_set_rdc_acc_(gr, &reduce);

	return 0;
}

// void mgl_start_group(mglBase * gr, const char * arg2)
static int _bind_mgl_start_group(lua_State *L) {
	if (!_lg_typecheck_mgl_start_group(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_start_group(mglBase * gr, const char * arg2) function, expected prototype:\nvoid mgl_start_group(mglBase * gr, const char * arg2)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * _arg2=(const char *)lua_tostring(L,2);

	mgl_start_group(gr, _arg2);

	return 0;
}

// void mgl_start_group_(uintptr_t * gr, const char * arg2, int arg3)
static int _bind_mgl_start_group_(lua_State *L) {
	if (!_lg_typecheck_mgl_start_group_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_start_group_(uintptr_t * gr, const char * arg2, int arg3) function, expected prototype:\nvoid mgl_start_group_(uintptr_t * gr, const char * arg2, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * _arg2=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_start_group_(gr, _arg2, _arg3);

	return 0;
}

// void mgl_end_group(mglBase * gr)
static int _bind_mgl_end_group(lua_State *L) {
	if (!_lg_typecheck_mgl_end_group(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_end_group(mglBase * gr) function, expected prototype:\nvoid mgl_end_group(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_end_group(gr);

	return 0;
}

// void mgl_end_group_(uintptr_t * gr)
static int _bind_mgl_end_group_(lua_State *L) {
	if (!_lg_typecheck_mgl_end_group_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_end_group_(uintptr_t * gr) function, expected prototype:\nvoid mgl_end_group_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_end_group_(gr);

	return 0;
}

// void mgl_highlight(mglBase * gr, int id)
static int _bind_mgl_highlight(lua_State *L) {
	if (!_lg_typecheck_mgl_highlight(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_highlight(mglBase * gr, int id) function, expected prototype:\nvoid mgl_highlight(mglBase * gr, int id)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int id=(int)lua_tointeger(L,2);

	mgl_highlight(gr, id);

	return 0;
}

// void mgl_highlight_(uintptr_t * gr, int * id)
static int _bind_mgl_highlight_(lua_State *L) {
	if (!_lg_typecheck_mgl_highlight_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_highlight_(uintptr_t * gr, int * id) function, expected prototype:\nvoid mgl_highlight_(uintptr_t * gr, int * id)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int id=(int)lua_tointeger(L,2);

	mgl_highlight_(gr, &id);

	return 0;
}

// void mgl_set_palette(mglBase * gr, const char * colors)
static int _bind_mgl_set_palette(lua_State *L) {
	if (!_lg_typecheck_mgl_set_palette(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_palette(mglBase * gr, const char * colors) function, expected prototype:\nvoid mgl_set_palette(mglBase * gr, const char * colors)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * colors=(const char *)lua_tostring(L,2);

	mgl_set_palette(gr, colors);

	return 0;
}

// void mgl_set_palette_(uintptr_t * gr, const char * colors, int arg3)
static int _bind_mgl_set_palette_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_palette_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_palette_(uintptr_t * gr, const char * colors, int arg3) function, expected prototype:\nvoid mgl_set_palette_(uintptr_t * gr, const char * colors, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * colors=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_set_palette_(gr, colors, _arg3);

	return 0;
}

// void mgl_set_color(char id, double r, double g, double b)
static int _bind_mgl_set_color(lua_State *L) {
	if (!_lg_typecheck_mgl_set_color(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_color(char id, double r, double g, double b) function, expected prototype:\nvoid mgl_set_color(char id, double r, double g, double b)\nClass arguments details:\n");
	}

	char id=(char)lua_tointeger(L,1);
	double r=(double)lua_tonumber(L,2);
	double g=(double)lua_tonumber(L,3);
	double b=(double)lua_tonumber(L,4);

	mgl_set_color(id, r, g, b);

	return 0;
}

// void mgl_set_color_(char * id, double * r, double * g, double * b, int arg5)
static int _bind_mgl_set_color_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_color_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_color_(char * id, double * r, double * g, double * b, int arg5) function, expected prototype:\nvoid mgl_set_color_(char * id, double * r, double * g, double * b, int arg5)\nClass arguments details:\n");
	}

	char id=(char)lua_tointeger(L,1);
	double r=(double)lua_tonumber(L,2);
	double g=(double)lua_tonumber(L,3);
	double b=(double)lua_tonumber(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_set_color_(&id, &r, &g, &b, _arg5);

	return 0;
}

// void mgl_set_def_sch(mglBase * gr, const char * sch)
static int _bind_mgl_set_def_sch(lua_State *L) {
	if (!_lg_typecheck_mgl_set_def_sch(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_def_sch(mglBase * gr, const char * sch) function, expected prototype:\nvoid mgl_set_def_sch(mglBase * gr, const char * sch)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * sch=(const char *)lua_tostring(L,2);

	mgl_set_def_sch(gr, sch);

	return 0;
}

// void mgl_set_def_sch_(uintptr_t * gr, const char * sch, int arg3)
static int _bind_mgl_set_def_sch_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_def_sch_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_def_sch_(uintptr_t * gr, const char * sch, int arg3) function, expected prototype:\nvoid mgl_set_def_sch_(uintptr_t * gr, const char * sch, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * sch=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_set_def_sch_(gr, sch, _arg3);

	return 0;
}

// void mgl_set_alpha_default(mglBase * gr, double alpha)
static int _bind_mgl_set_alpha_default(lua_State *L) {
	if (!_lg_typecheck_mgl_set_alpha_default(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_alpha_default(mglBase * gr, double alpha) function, expected prototype:\nvoid mgl_set_alpha_default(mglBase * gr, double alpha)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double alpha=(double)lua_tonumber(L,2);

	mgl_set_alpha_default(gr, alpha);

	return 0;
}

// void mgl_set_alpha_default_(uintptr_t * gr, double * alpha)
static int _bind_mgl_set_alpha_default_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_alpha_default_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_alpha_default_(uintptr_t * gr, double * alpha) function, expected prototype:\nvoid mgl_set_alpha_default_(uintptr_t * gr, double * alpha)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double alpha=(double)lua_tonumber(L,2);

	mgl_set_alpha_default_(gr, &alpha);

	return 0;
}

// void mgl_set_bar_width(mglBase * gr, double width)
static int _bind_mgl_set_bar_width(lua_State *L) {
	if (!_lg_typecheck_mgl_set_bar_width(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_bar_width(mglBase * gr, double width) function, expected prototype:\nvoid mgl_set_bar_width(mglBase * gr, double width)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double width=(double)lua_tonumber(L,2);

	mgl_set_bar_width(gr, width);

	return 0;
}

// void mgl_set_bar_width_(uintptr_t * gr, double * width)
static int _bind_mgl_set_bar_width_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_bar_width_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_bar_width_(uintptr_t * gr, double * width) function, expected prototype:\nvoid mgl_set_bar_width_(uintptr_t * gr, double * width)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double width=(double)lua_tonumber(L,2);

	mgl_set_bar_width_(gr, &width);

	return 0;
}

// void mgl_set_meshnum(mglBase * gr, int num)
static int _bind_mgl_set_meshnum(lua_State *L) {
	if (!_lg_typecheck_mgl_set_meshnum(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_meshnum(mglBase * gr, int num) function, expected prototype:\nvoid mgl_set_meshnum(mglBase * gr, int num)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int num=(int)lua_tointeger(L,2);

	mgl_set_meshnum(gr, num);

	return 0;
}

// void mgl_set_meshnum_(uintptr_t * gr, int * num)
static int _bind_mgl_set_meshnum_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_meshnum_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_meshnum_(uintptr_t * gr, int * num) function, expected prototype:\nvoid mgl_set_meshnum_(uintptr_t * gr, int * num)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int num=(int)lua_tointeger(L,2);

	mgl_set_meshnum_(gr, &num);

	return 0;
}

// void mgl_set_facenum(mglBase * gr, int num)
static int _bind_mgl_set_facenum(lua_State *L) {
	if (!_lg_typecheck_mgl_set_facenum(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_facenum(mglBase * gr, int num) function, expected prototype:\nvoid mgl_set_facenum(mglBase * gr, int num)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int num=(int)lua_tointeger(L,2);

	mgl_set_facenum(gr, num);

	return 0;
}

// void mgl_set_facenum_(uintptr_t * gr, int * num)
static int _bind_mgl_set_facenum_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_facenum_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_facenum_(uintptr_t * gr, int * num) function, expected prototype:\nvoid mgl_set_facenum_(uintptr_t * gr, int * num)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int num=(int)lua_tointeger(L,2);

	mgl_set_facenum_(gr, &num);

	return 0;
}

// void mgl_clear_unused(mglBase * gr)
static int _bind_mgl_clear_unused(lua_State *L) {
	if (!_lg_typecheck_mgl_clear_unused(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_clear_unused(mglBase * gr) function, expected prototype:\nvoid mgl_clear_unused(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_clear_unused(gr);

	return 0;
}

// void mgl_clear_unused_(uintptr_t * gr)
static int _bind_mgl_clear_unused_(lua_State *L) {
	if (!_lg_typecheck_mgl_clear_unused_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_clear_unused_(uintptr_t * gr) function, expected prototype:\nvoid mgl_clear_unused_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_clear_unused_(gr);

	return 0;
}

// void mgl_set_ambbr(mglBase * gr, double i)
static int _bind_mgl_set_ambbr(lua_State *L) {
	if (!_lg_typecheck_mgl_set_ambbr(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_ambbr(mglBase * gr, double i) function, expected prototype:\nvoid mgl_set_ambbr(mglBase * gr, double i)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double i=(double)lua_tonumber(L,2);

	mgl_set_ambbr(gr, i);

	return 0;
}

// void mgl_set_ambbr_(uintptr_t * gr, double * i)
static int _bind_mgl_set_ambbr_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_ambbr_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_ambbr_(uintptr_t * gr, double * i) function, expected prototype:\nvoid mgl_set_ambbr_(uintptr_t * gr, double * i)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double i=(double)lua_tonumber(L,2);

	mgl_set_ambbr_(gr, &i);

	return 0;
}

// void mgl_set_light_dif(mglBase * gr, int enable)
static int _bind_mgl_set_light_dif(lua_State *L) {
	if (!_lg_typecheck_mgl_set_light_dif(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_light_dif(mglBase * gr, int enable) function, expected prototype:\nvoid mgl_set_light_dif(mglBase * gr, int enable)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int enable=(int)lua_tointeger(L,2);

	mgl_set_light_dif(gr, enable);

	return 0;
}

// void mgl_set_light_dif_(uintptr_t * gr, int * enable)
static int _bind_mgl_set_light_dif_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_light_dif_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_light_dif_(uintptr_t * gr, int * enable) function, expected prototype:\nvoid mgl_set_light_dif_(uintptr_t * gr, int * enable)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int enable=(int)lua_tointeger(L,2);

	mgl_set_light_dif_(gr, &enable);

	return 0;
}

// void mgl_set_cut(mglBase * gr, int cut)
static int _bind_mgl_set_cut(lua_State *L) {
	if (!_lg_typecheck_mgl_set_cut(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_cut(mglBase * gr, int cut) function, expected prototype:\nvoid mgl_set_cut(mglBase * gr, int cut)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int cut=(int)lua_tointeger(L,2);

	mgl_set_cut(gr, cut);

	return 0;
}

// void mgl_set_cut_(uintptr_t * gr, int * cut)
static int _bind_mgl_set_cut_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_cut_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_cut_(uintptr_t * gr, int * cut) function, expected prototype:\nvoid mgl_set_cut_(uintptr_t * gr, int * cut)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int cut=(int)lua_tointeger(L,2);

	mgl_set_cut_(gr, &cut);

	return 0;
}

// void mgl_set_cut_box(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2)
static int _bind_mgl_set_cut_box(lua_State *L) {
	if (!_lg_typecheck_mgl_set_cut_box(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_cut_box(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2) function, expected prototype:\nvoid mgl_set_cut_box(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double x2=(double)lua_tonumber(L,5);
	double y2=(double)lua_tonumber(L,6);
	double z2=(double)lua_tonumber(L,7);

	mgl_set_cut_box(gr, x1, y1, z1, x2, y2, z2);

	return 0;
}

// void mgl_set_cut_box_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2)
static int _bind_mgl_set_cut_box_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_cut_box_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_cut_box_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2) function, expected prototype:\nvoid mgl_set_cut_box_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double x2=(double)lua_tonumber(L,5);
	double y2=(double)lua_tonumber(L,6);
	double z2=(double)lua_tonumber(L,7);

	mgl_set_cut_box_(gr, &x1, &y1, &z1, &x2, &y2, &z2);

	return 0;
}

// void mgl_set_cutoff(mglBase * gr, const char * EqC)
static int _bind_mgl_set_cutoff(lua_State *L) {
	if (!_lg_typecheck_mgl_set_cutoff(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_cutoff(mglBase * gr, const char * EqC) function, expected prototype:\nvoid mgl_set_cutoff(mglBase * gr, const char * EqC)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * EqC=(const char *)lua_tostring(L,2);

	mgl_set_cutoff(gr, EqC);

	return 0;
}

// void mgl_set_cutoff_(uintptr_t * gr, const char * EqC, int arg3)
static int _bind_mgl_set_cutoff_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_cutoff_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_cutoff_(uintptr_t * gr, const char * EqC, int arg3) function, expected prototype:\nvoid mgl_set_cutoff_(uintptr_t * gr, const char * EqC, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * EqC=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_set_cutoff_(gr, EqC, _arg3);

	return 0;
}

// void mgl_set_ranges(mglBase * gr, double x1, double x2, double y1, double y2, double z1, double z2)
static int _bind_mgl_set_ranges(lua_State *L) {
	if (!_lg_typecheck_mgl_set_ranges(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_ranges(mglBase * gr, double x1, double x2, double y1, double y2, double z1, double z2) function, expected prototype:\nvoid mgl_set_ranges(mglBase * gr, double x1, double x2, double y1, double y2, double z1, double z2)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double x2=(double)lua_tonumber(L,3);
	double y1=(double)lua_tonumber(L,4);
	double y2=(double)lua_tonumber(L,5);
	double z1=(double)lua_tonumber(L,6);
	double z2=(double)lua_tonumber(L,7);

	mgl_set_ranges(gr, x1, x2, y1, y2, z1, z2);

	return 0;
}

// void mgl_set_ranges_(uintptr_t * gr, double * x1, double * x2, double * y1, double * y2, double * z1, double * z2)
static int _bind_mgl_set_ranges_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_ranges_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_ranges_(uintptr_t * gr, double * x1, double * x2, double * y1, double * y2, double * z1, double * z2) function, expected prototype:\nvoid mgl_set_ranges_(uintptr_t * gr, double * x1, double * x2, double * y1, double * y2, double * z1, double * z2)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double x2=(double)lua_tonumber(L,3);
	double y1=(double)lua_tonumber(L,4);
	double y2=(double)lua_tonumber(L,5);
	double z1=(double)lua_tonumber(L,6);
	double z2=(double)lua_tonumber(L,7);

	mgl_set_ranges_(gr, &x1, &x2, &y1, &y2, &z1, &z2);

	return 0;
}

// void mgl_set_range_val(mglBase * gr, char dir, double v1, double v2)
static int _bind_mgl_set_range_val(lua_State *L) {
	if (!_lg_typecheck_mgl_set_range_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_range_val(mglBase * gr, char dir, double v1, double v2) function, expected prototype:\nvoid mgl_set_range_val(mglBase * gr, char dir, double v1, double v2)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	char dir=(char)lua_tointeger(L,2);
	double v1=(double)lua_tonumber(L,3);
	double v2=(double)lua_tonumber(L,4);

	mgl_set_range_val(gr, dir, v1, v2);

	return 0;
}

// void mgl_set_range_val_(uintptr_t * gr, const char * dir, double * v1, double * v2, int arg5)
static int _bind_mgl_set_range_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_range_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_range_val_(uintptr_t * gr, const char * dir, double * v1, double * v2, int arg5) function, expected prototype:\nvoid mgl_set_range_val_(uintptr_t * gr, const char * dir, double * v1, double * v2, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	double v1=(double)lua_tonumber(L,3);
	double v2=(double)lua_tonumber(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_set_range_val_(gr, dir, &v1, &v2, _arg5);

	return 0;
}

// void mgl_set_range_dat(mglBase * gr, char dir, const mglDataA * a, int add)
static int _bind_mgl_set_range_dat(lua_State *L) {
	if (!_lg_typecheck_mgl_set_range_dat(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_range_dat(mglBase * gr, char dir, const mglDataA * a, int add) function, expected prototype:\nvoid mgl_set_range_dat(mglBase * gr, char dir, const mglDataA * a, int add)\nClass arguments details:\narg 1 ID = 88502113\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	char dir=(char)lua_tointeger(L,2);
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	int add=(int)lua_tointeger(L,4);

	mgl_set_range_dat(gr, dir, a, add);

	return 0;
}

// void mgl_set_range_dat_(uintptr_t * gr, const char * dir, uintptr_t * a, int * add, int arg5)
static int _bind_mgl_set_range_dat_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_range_dat_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_range_dat_(uintptr_t * gr, const char * dir, uintptr_t * a, int * add, int arg5) function, expected prototype:\nvoid mgl_set_range_dat_(uintptr_t * gr, const char * dir, uintptr_t * a, int * add, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	uintptr_t* a=(Luna< uintptr_t >::check(L,3));
	int add=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_set_range_dat_(gr, dir, a, &add, _arg5);

	return 0;
}

// void mgl_zoom_axis(mglBase * gr, double x1, double y1, double z1, double c1, double x2, double y2, double z2, double c2)
static int _bind_mgl_zoom_axis(lua_State *L) {
	if (!_lg_typecheck_mgl_zoom_axis(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_zoom_axis(mglBase * gr, double x1, double y1, double z1, double c1, double x2, double y2, double z2, double c2) function, expected prototype:\nvoid mgl_zoom_axis(mglBase * gr, double x1, double y1, double z1, double c1, double x2, double y2, double z2, double c2)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double c1=(double)lua_tonumber(L,5);
	double x2=(double)lua_tonumber(L,6);
	double y2=(double)lua_tonumber(L,7);
	double z2=(double)lua_tonumber(L,8);
	double c2=(double)lua_tonumber(L,9);

	mgl_zoom_axis(gr, x1, y1, z1, c1, x2, y2, z2, c2);

	return 0;
}

// void mgl_zoom_axis_(uintptr_t * gr, double * x1, double * y1, double * z1, double * c1, double * x2, double * y2, double * z2, double * c2)
static int _bind_mgl_zoom_axis_(lua_State *L) {
	if (!_lg_typecheck_mgl_zoom_axis_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_zoom_axis_(uintptr_t * gr, double * x1, double * y1, double * z1, double * c1, double * x2, double * y2, double * z2, double * c2) function, expected prototype:\nvoid mgl_zoom_axis_(uintptr_t * gr, double * x1, double * y1, double * z1, double * c1, double * x2, double * y2, double * z2, double * c2)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double c1=(double)lua_tonumber(L,5);
	double x2=(double)lua_tonumber(L,6);
	double y2=(double)lua_tonumber(L,7);
	double z2=(double)lua_tonumber(L,8);
	double c2=(double)lua_tonumber(L,9);

	mgl_zoom_axis_(gr, &x1, &y1, &z1, &c1, &x2, &y2, &z2, &c2);

	return 0;
}

// void mgl_set_origin(mglBase * gr, double x0, double y0, double z0)
static int _bind_mgl_set_origin(lua_State *L) {
	if (!_lg_typecheck_mgl_set_origin(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_origin(mglBase * gr, double x0, double y0, double z0) function, expected prototype:\nvoid mgl_set_origin(mglBase * gr, double x0, double y0, double z0)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);

	mgl_set_origin(gr, x0, y0, z0);

	return 0;
}

// void mgl_set_origin_(uintptr_t * gr, double * x0, double * y0, double * z0)
static int _bind_mgl_set_origin_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_origin_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_origin_(uintptr_t * gr, double * x0, double * y0, double * z0) function, expected prototype:\nvoid mgl_set_origin_(uintptr_t * gr, double * x0, double * y0, double * z0)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);

	mgl_set_origin_(gr, &x0, &y0, &z0);

	return 0;
}

// void mgl_set_func(mglBase * gr, const char * EqX, const char * EqY, const char * EqZ, const char * EqA)
static int _bind_mgl_set_func(lua_State *L) {
	if (!_lg_typecheck_mgl_set_func(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_func(mglBase * gr, const char * EqX, const char * EqY, const char * EqZ, const char * EqA) function, expected prototype:\nvoid mgl_set_func(mglBase * gr, const char * EqX, const char * EqY, const char * EqZ, const char * EqA)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * EqX=(const char *)lua_tostring(L,2);
	const char * EqY=(const char *)lua_tostring(L,3);
	const char * EqZ=(const char *)lua_tostring(L,4);
	const char * EqA=(const char *)lua_tostring(L,5);

	mgl_set_func(gr, EqX, EqY, EqZ, EqA);

	return 0;
}

// void mgl_set_func_(uintptr_t * gr, const char * EqX, const char * EqY, const char * EqZ, const char * EqA, int arg6, int arg7, int arg8, int arg9)
static int _bind_mgl_set_func_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_func_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_func_(uintptr_t * gr, const char * EqX, const char * EqY, const char * EqZ, const char * EqA, int arg6, int arg7, int arg8, int arg9) function, expected prototype:\nvoid mgl_set_func_(uintptr_t * gr, const char * EqX, const char * EqY, const char * EqZ, const char * EqA, int arg6, int arg7, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * EqX=(const char *)lua_tostring(L,2);
	const char * EqY=(const char *)lua_tostring(L,3);
	const char * EqZ=(const char *)lua_tostring(L,4);
	const char * EqA=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_set_func_(gr, EqX, EqY, EqZ, EqA, _arg6, _arg7, _arg8, _arg9);

	return 0;
}

// void mgl_set_coor(mglBase * gr, int how)
static int _bind_mgl_set_coor(lua_State *L) {
	if (!_lg_typecheck_mgl_set_coor(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_coor(mglBase * gr, int how) function, expected prototype:\nvoid mgl_set_coor(mglBase * gr, int how)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int how=(int)lua_tointeger(L,2);

	mgl_set_coor(gr, how);

	return 0;
}

// void mgl_set_coor_(uintptr_t * gr, int * how)
static int _bind_mgl_set_coor_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_coor_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_coor_(uintptr_t * gr, int * how) function, expected prototype:\nvoid mgl_set_coor_(uintptr_t * gr, int * how)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int how=(int)lua_tointeger(L,2);

	mgl_set_coor_(gr, &how);

	return 0;
}

// void mgl_set_ternary(mglBase * gr, int enable)
static int _bind_mgl_set_ternary(lua_State *L) {
	if (!_lg_typecheck_mgl_set_ternary(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_ternary(mglBase * gr, int enable) function, expected prototype:\nvoid mgl_set_ternary(mglBase * gr, int enable)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int enable=(int)lua_tointeger(L,2);

	mgl_set_ternary(gr, enable);

	return 0;
}

// void mgl_set_ternary_(uintptr_t * gr, int * enable)
static int _bind_mgl_set_ternary_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_ternary_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_ternary_(uintptr_t * gr, int * enable) function, expected prototype:\nvoid mgl_set_ternary_(uintptr_t * gr, int * enable)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int enable=(int)lua_tointeger(L,2);

	mgl_set_ternary_(gr, &enable);

	return 0;
}

// void mgl_set_tick_rotate(mglBase * gr, int enable)
static int _bind_mgl_set_tick_rotate(lua_State *L) {
	if (!_lg_typecheck_mgl_set_tick_rotate(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_tick_rotate(mglBase * gr, int enable) function, expected prototype:\nvoid mgl_set_tick_rotate(mglBase * gr, int enable)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int enable=(int)lua_tointeger(L,2);

	mgl_set_tick_rotate(gr, enable);

	return 0;
}

// void mgl_set_tick_rotate_(uintptr_t * gr, int * enable)
static int _bind_mgl_set_tick_rotate_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_tick_rotate_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_tick_rotate_(uintptr_t * gr, int * enable) function, expected prototype:\nvoid mgl_set_tick_rotate_(uintptr_t * gr, int * enable)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int enable=(int)lua_tointeger(L,2);

	mgl_set_tick_rotate_(gr, &enable);

	return 0;
}

// void mgl_set_tick_skip(mglBase * gr, int enable)
static int _bind_mgl_set_tick_skip(lua_State *L) {
	if (!_lg_typecheck_mgl_set_tick_skip(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_tick_skip(mglBase * gr, int enable) function, expected prototype:\nvoid mgl_set_tick_skip(mglBase * gr, int enable)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int enable=(int)lua_tointeger(L,2);

	mgl_set_tick_skip(gr, enable);

	return 0;
}

// void mgl_set_tick_skip_(uintptr_t * gr, int * enable)
static int _bind_mgl_set_tick_skip_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_tick_skip_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_tick_skip_(uintptr_t * gr, int * enable) function, expected prototype:\nvoid mgl_set_tick_skip_(uintptr_t * gr, int * enable)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int enable=(int)lua_tointeger(L,2);

	mgl_set_tick_skip_(gr, &enable);

	return 0;
}

// void mgl_def_font(const char * name, const char * path)
static int _bind_mgl_def_font(lua_State *L) {
	if (!_lg_typecheck_mgl_def_font(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_def_font(const char * name, const char * path) function, expected prototype:\nvoid mgl_def_font(const char * name, const char * path)\nClass arguments details:\n");
	}

	const char * name=(const char *)lua_tostring(L,1);
	const char * path=(const char *)lua_tostring(L,2);

	mgl_def_font(name, path);

	return 0;
}

// void mgl_def_font_(const char * name, const char * path, int arg3, int arg4)
static int _bind_mgl_def_font_(lua_State *L) {
	if (!_lg_typecheck_mgl_def_font_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_def_font_(const char * name, const char * path, int arg3, int arg4) function, expected prototype:\nvoid mgl_def_font_(const char * name, const char * path, int arg3, int arg4)\nClass arguments details:\n");
	}

	const char * name=(const char *)lua_tostring(L,1);
	const char * path=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_def_font_(name, path, _arg3, _arg4);

	return 0;
}

// void mgl_set_mark_size(mglBase * gr, double size)
static int _bind_mgl_set_mark_size(lua_State *L) {
	if (!_lg_typecheck_mgl_set_mark_size(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_mark_size(mglBase * gr, double size) function, expected prototype:\nvoid mgl_set_mark_size(mglBase * gr, double size)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double size=(double)lua_tonumber(L,2);

	mgl_set_mark_size(gr, size);

	return 0;
}

// void mgl_set_mark_size_(uintptr_t * gr, double * size)
static int _bind_mgl_set_mark_size_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_mark_size_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_mark_size_(uintptr_t * gr, double * size) function, expected prototype:\nvoid mgl_set_mark_size_(uintptr_t * gr, double * size)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double size=(double)lua_tonumber(L,2);

	mgl_set_mark_size_(gr, &size);

	return 0;
}

// void mgl_set_arrow_size(mglBase * gr, double size)
static int _bind_mgl_set_arrow_size(lua_State *L) {
	if (!_lg_typecheck_mgl_set_arrow_size(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_arrow_size(mglBase * gr, double size) function, expected prototype:\nvoid mgl_set_arrow_size(mglBase * gr, double size)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double size=(double)lua_tonumber(L,2);

	mgl_set_arrow_size(gr, size);

	return 0;
}

// void mgl_set_arrow_size_(uintptr_t * gr, double * size)
static int _bind_mgl_set_arrow_size_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_arrow_size_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_arrow_size_(uintptr_t * gr, double * size) function, expected prototype:\nvoid mgl_set_arrow_size_(uintptr_t * gr, double * size)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double size=(double)lua_tonumber(L,2);

	mgl_set_arrow_size_(gr, &size);

	return 0;
}

// void mgl_set_font_size(mglBase * gr, double size)
static int _bind_mgl_set_font_size(lua_State *L) {
	if (!_lg_typecheck_mgl_set_font_size(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_font_size(mglBase * gr, double size) function, expected prototype:\nvoid mgl_set_font_size(mglBase * gr, double size)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double size=(double)lua_tonumber(L,2);

	mgl_set_font_size(gr, size);

	return 0;
}

// void mgl_set_font_size_(uintptr_t * gr, double * size)
static int _bind_mgl_set_font_size_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_font_size_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_font_size_(uintptr_t * gr, double * size) function, expected prototype:\nvoid mgl_set_font_size_(uintptr_t * gr, double * size)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double size=(double)lua_tonumber(L,2);

	mgl_set_font_size_(gr, &size);

	return 0;
}

// void mgl_set_rotated_text(mglBase * gr, int enable)
static int _bind_mgl_set_rotated_text(lua_State *L) {
	if (!_lg_typecheck_mgl_set_rotated_text(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_rotated_text(mglBase * gr, int enable) function, expected prototype:\nvoid mgl_set_rotated_text(mglBase * gr, int enable)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int enable=(int)lua_tointeger(L,2);

	mgl_set_rotated_text(gr, enable);

	return 0;
}

// void mgl_set_rotated_text_(uintptr_t * gr, int * enable)
static int _bind_mgl_set_rotated_text_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_rotated_text_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_rotated_text_(uintptr_t * gr, int * enable) function, expected prototype:\nvoid mgl_set_rotated_text_(uintptr_t * gr, int * enable)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int enable=(int)lua_tointeger(L,2);

	mgl_set_rotated_text_(gr, &enable);

	return 0;
}

// void mgl_load_font(mglBase * gr, const char * name, const char * path)
static int _bind_mgl_load_font(lua_State *L) {
	if (!_lg_typecheck_mgl_load_font(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_load_font(mglBase * gr, const char * name, const char * path) function, expected prototype:\nvoid mgl_load_font(mglBase * gr, const char * name, const char * path)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * name=(const char *)lua_tostring(L,2);
	const char * path=(const char *)lua_tostring(L,3);

	mgl_load_font(gr, name, path);

	return 0;
}

// void mgl_load_font_(uintptr_t * gr, char * name, char * path, int l, int n)
static int _bind_mgl_load_font_(lua_State *L) {
	if (!_lg_typecheck_mgl_load_font_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_load_font_(uintptr_t * gr, char * name, char * path, int l, int n) function, expected prototype:\nvoid mgl_load_font_(uintptr_t * gr, char * name, char * path, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	char name=(char)lua_tointeger(L,2);
	char path=(char)lua_tointeger(L,3);
	int l=(int)lua_tointeger(L,4);
	int n=(int)lua_tointeger(L,5);

	mgl_load_font_(gr, &name, &path, l, n);

	return 0;
}

// void mgl_copy_font(mglBase * gr, mglBase * gr_from)
static int _bind_mgl_copy_font(lua_State *L) {
	if (!_lg_typecheck_mgl_copy_font(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_copy_font(mglBase * gr, mglBase * gr_from) function, expected prototype:\nvoid mgl_copy_font(mglBase * gr, mglBase * gr_from)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	mglBase* gr_from=(Luna< mglBase >::check(L,2));

	mgl_copy_font(gr, gr_from);

	return 0;
}

// void mgl_copy_font_(uintptr_t * gr, uintptr_t * gr_from)
static int _bind_mgl_copy_font_(lua_State *L) {
	if (!_lg_typecheck_mgl_copy_font_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_copy_font_(uintptr_t * gr, uintptr_t * gr_from) function, expected prototype:\nvoid mgl_copy_font_(uintptr_t * gr, uintptr_t * gr_from)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* gr_from=(Luna< uintptr_t >::check(L,2));

	mgl_copy_font_(gr, gr_from);

	return 0;
}

// void mgl_restore_font(mglBase * gr)
static int _bind_mgl_restore_font(lua_State *L) {
	if (!_lg_typecheck_mgl_restore_font(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_restore_font(mglBase * gr) function, expected prototype:\nvoid mgl_restore_font(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_restore_font(gr);

	return 0;
}

// void mgl_restore_font_(uintptr_t * gr)
static int _bind_mgl_restore_font_(lua_State *L) {
	if (!_lg_typecheck_mgl_restore_font_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_restore_font_(uintptr_t * gr) function, expected prototype:\nvoid mgl_restore_font_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_restore_font_(gr);

	return 0;
}

// mglBase * mgl_create_graph(int width, int height)
static int _bind_mgl_create_graph(lua_State *L) {
	if (!_lg_typecheck_mgl_create_graph(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglBase * mgl_create_graph(int width, int height) function, expected prototype:\nmglBase * mgl_create_graph(int width, int height)\nClass arguments details:\n");
	}

	int width=(int)lua_tointeger(L,1);
	int height=(int)lua_tointeger(L,2);

	mglBase * lret = mgl_create_graph(width, height);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglBase >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_create_graph_(int * width, int * height)
static int _bind_mgl_create_graph_(lua_State *L) {
	if (!_lg_typecheck_mgl_create_graph_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_create_graph_(int * width, int * height) function, expected prototype:\nuintptr_t mgl_create_graph_(int * width, int * height)\nClass arguments details:\n");
	}

	int width=(int)lua_tointeger(L,1);
	int height=(int)lua_tointeger(L,2);

	uintptr_t stack_lret = mgl_create_graph_(&width, &height);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// void mgl_delete_graph(mglBase * gr)
static int _bind_mgl_delete_graph(lua_State *L) {
	if (!_lg_typecheck_mgl_delete_graph(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_delete_graph(mglBase * gr) function, expected prototype:\nvoid mgl_delete_graph(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_delete_graph(gr);

	return 0;
}

// void mgl_delete_graph_(uintptr_t * gr)
static int _bind_mgl_delete_graph_(lua_State *L) {
	if (!_lg_typecheck_mgl_delete_graph_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_delete_graph_(uintptr_t * gr) function, expected prototype:\nvoid mgl_delete_graph_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_delete_graph_(gr);

	return 0;
}

// void mgl_set_size(mglBase * gr, int width, int height)
static int _bind_mgl_set_size(lua_State *L) {
	if (!_lg_typecheck_mgl_set_size(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_size(mglBase * gr, int width, int height) function, expected prototype:\nvoid mgl_set_size(mglBase * gr, int width, int height)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int width=(int)lua_tointeger(L,2);
	int height=(int)lua_tointeger(L,3);

	mgl_set_size(gr, width, height);

	return 0;
}

// void mgl_set_size_(uintptr_t * gr, int * width, int * height)
static int _bind_mgl_set_size_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_size_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_size_(uintptr_t * gr, int * width, int * height) function, expected prototype:\nvoid mgl_set_size_(uintptr_t * gr, int * width, int * height)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int width=(int)lua_tointeger(L,2);
	int height=(int)lua_tointeger(L,3);

	mgl_set_size_(gr, &width, &height);

	return 0;
}

// void mgl_set_def_param(mglBase * gr)
static int _bind_mgl_set_def_param(lua_State *L) {
	if (!_lg_typecheck_mgl_set_def_param(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_def_param(mglBase * gr) function, expected prototype:\nvoid mgl_set_def_param(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_set_def_param(gr);

	return 0;
}

// void mgl_set_def_param_(uintptr_t * gr)
static int _bind_mgl_set_def_param_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_def_param_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_def_param_(uintptr_t * gr) function, expected prototype:\nvoid mgl_set_def_param_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_set_def_param_(gr);

	return 0;
}

// void mgl_set_quality(mglBase * gr, int qual)
static int _bind_mgl_set_quality(lua_State *L) {
	if (!_lg_typecheck_mgl_set_quality(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_quality(mglBase * gr, int qual) function, expected prototype:\nvoid mgl_set_quality(mglBase * gr, int qual)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int qual=(int)lua_tointeger(L,2);

	mgl_set_quality(gr, qual);

	return 0;
}

// void mgl_set_quality_(uintptr_t * gr, int * qual)
static int _bind_mgl_set_quality_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_quality_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_quality_(uintptr_t * gr, int * qual) function, expected prototype:\nvoid mgl_set_quality_(uintptr_t * gr, int * qual)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int qual=(int)lua_tointeger(L,2);

	mgl_set_quality_(gr, &qual);

	return 0;
}

// void mgl_combine_gr(mglBase * gr, mglBase * in)
static int _bind_mgl_combine_gr(lua_State *L) {
	if (!_lg_typecheck_mgl_combine_gr(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_combine_gr(mglBase * gr, mglBase * in) function, expected prototype:\nvoid mgl_combine_gr(mglBase * gr, mglBase * in)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	mglBase* in=(Luna< mglBase >::check(L,2));

	mgl_combine_gr(gr, in);

	return 0;
}

// void mgl_combine_gr_(uintptr_t * gr, uintptr_t * in)
static int _bind_mgl_combine_gr_(lua_State *L) {
	if (!_lg_typecheck_mgl_combine_gr_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_combine_gr_(uintptr_t * gr, uintptr_t * in) function, expected prototype:\nvoid mgl_combine_gr_(uintptr_t * gr, uintptr_t * in)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* in=(Luna< uintptr_t >::check(L,2));

	mgl_combine_gr_(gr, in);

	return 0;
}

// void mgl_finish(mglBase * gr)
static int _bind_mgl_finish(lua_State *L) {
	if (!_lg_typecheck_mgl_finish(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_finish(mglBase * gr) function, expected prototype:\nvoid mgl_finish(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_finish(gr);

	return 0;
}

// void mgl_finish_(uintptr_t * gr)
static int _bind_mgl_finish_(lua_State *L) {
	if (!_lg_typecheck_mgl_finish_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_finish_(uintptr_t * gr) function, expected prototype:\nvoid mgl_finish_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_finish_(gr);

	return 0;
}

// void mgl_set_tick_len(mglBase * gr, double len, double stt)
static int _bind_mgl_set_tick_len(lua_State *L) {
	if (!_lg_typecheck_mgl_set_tick_len(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_tick_len(mglBase * gr, double len, double stt) function, expected prototype:\nvoid mgl_set_tick_len(mglBase * gr, double len, double stt)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double len=(double)lua_tonumber(L,2);
	double stt=(double)lua_tonumber(L,3);

	mgl_set_tick_len(gr, len, stt);

	return 0;
}

// void mgl_set_tick_len_(uintptr_t * gr, double * len, double * stt)
static int _bind_mgl_set_tick_len_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_tick_len_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_tick_len_(uintptr_t * gr, double * len, double * stt) function, expected prototype:\nvoid mgl_set_tick_len_(uintptr_t * gr, double * len, double * stt)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double len=(double)lua_tonumber(L,2);
	double stt=(double)lua_tonumber(L,3);

	mgl_set_tick_len_(gr, &len, &stt);

	return 0;
}

// void mgl_set_axis_stl(mglBase * gr, const char * stl, const char * tck, const char * sub)
static int _bind_mgl_set_axis_stl(lua_State *L) {
	if (!_lg_typecheck_mgl_set_axis_stl(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_axis_stl(mglBase * gr, const char * stl, const char * tck, const char * sub) function, expected prototype:\nvoid mgl_set_axis_stl(mglBase * gr, const char * stl, const char * tck, const char * sub)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * stl=(const char *)lua_tostring(L,2);
	const char * tck=(const char *)lua_tostring(L,3);
	const char * sub=(const char *)lua_tostring(L,4);

	mgl_set_axis_stl(gr, stl, tck, sub);

	return 0;
}

// void mgl_set_axis_stl_(uintptr_t * gr, const char * stl, const char * tck, const char * sub, int arg5, int arg6, int arg7)
static int _bind_mgl_set_axis_stl_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_axis_stl_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_axis_stl_(uintptr_t * gr, const char * stl, const char * tck, const char * sub, int arg5, int arg6, int arg7) function, expected prototype:\nvoid mgl_set_axis_stl_(uintptr_t * gr, const char * stl, const char * tck, const char * sub, int arg5, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * stl=(const char *)lua_tostring(L,2);
	const char * tck=(const char *)lua_tostring(L,3);
	const char * sub=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_set_axis_stl_(gr, stl, tck, sub, _arg5, _arg6, _arg7);

	return 0;
}

// void mgl_adjust_ticks(mglBase * gr, const char * dir)
static int _bind_mgl_adjust_ticks(lua_State *L) {
	if (!_lg_typecheck_mgl_adjust_ticks(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_adjust_ticks(mglBase * gr, const char * dir) function, expected prototype:\nvoid mgl_adjust_ticks(mglBase * gr, const char * dir)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_adjust_ticks(gr, dir);

	return 0;
}

// void mgl_adjust_ticks_(uintptr_t * gr, const char * dir, int arg3)
static int _bind_mgl_adjust_ticks_(lua_State *L) {
	if (!_lg_typecheck_mgl_adjust_ticks_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_adjust_ticks_(uintptr_t * gr, const char * dir, int arg3) function, expected prototype:\nvoid mgl_adjust_ticks_(uintptr_t * gr, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_adjust_ticks_(gr, dir, _arg3);

	return 0;
}

// void mgl_set_ticks(mglBase * gr, char dir, double d, int ns, double org)
static int _bind_mgl_set_ticks(lua_State *L) {
	if (!_lg_typecheck_mgl_set_ticks(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_ticks(mglBase * gr, char dir, double d, int ns, double org) function, expected prototype:\nvoid mgl_set_ticks(mglBase * gr, char dir, double d, int ns, double org)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	char dir=(char)lua_tointeger(L,2);
	double d=(double)lua_tonumber(L,3);
	int ns=(int)lua_tointeger(L,4);
	double org=(double)lua_tonumber(L,5);

	mgl_set_ticks(gr, dir, d, ns, org);

	return 0;
}

// void mgl_set_ticks_(uintptr_t * gr, char * dir, double * d, int * ns, double * org, int arg6)
static int _bind_mgl_set_ticks_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_ticks_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_ticks_(uintptr_t * gr, char * dir, double * d, int * ns, double * org, int arg6) function, expected prototype:\nvoid mgl_set_ticks_(uintptr_t * gr, char * dir, double * d, int * ns, double * org, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	char dir=(char)lua_tointeger(L,2);
	double d=(double)lua_tonumber(L,3);
	int ns=(int)lua_tointeger(L,4);
	double org=(double)lua_tonumber(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_set_ticks_(gr, &dir, &d, &ns, &org, _arg6);

	return 0;
}

// void mgl_set_ticks_str(mglBase * gr, char dir, const char * lbl, int add)
static int _bind_mgl_set_ticks_str(lua_State *L) {
	if (!_lg_typecheck_mgl_set_ticks_str(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_ticks_str(mglBase * gr, char dir, const char * lbl, int add) function, expected prototype:\nvoid mgl_set_ticks_str(mglBase * gr, char dir, const char * lbl, int add)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	char dir=(char)lua_tointeger(L,2);
	const char * lbl=(const char *)lua_tostring(L,3);
	int add=(int)lua_tointeger(L,4);

	mgl_set_ticks_str(gr, dir, lbl, add);

	return 0;
}

// void mgl_set_ticks_str_(uintptr_t * gr, const char * dir, const char * lbl, int * add, int arg5, int arg6)
static int _bind_mgl_set_ticks_str_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_ticks_str_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_ticks_str_(uintptr_t * gr, const char * dir, const char * lbl, int * add, int arg5, int arg6) function, expected prototype:\nvoid mgl_set_ticks_str_(uintptr_t * gr, const char * dir, const char * lbl, int * add, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	const char * lbl=(const char *)lua_tostring(L,3);
	int add=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_set_ticks_str_(gr, dir, lbl, &add, _arg5, _arg6);

	return 0;
}

// void mgl_set_ticks_val(mglBase * gr, char dir, const mglDataA * val, const char * lbl, int add)
static int _bind_mgl_set_ticks_val(lua_State *L) {
	if (!_lg_typecheck_mgl_set_ticks_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_ticks_val(mglBase * gr, char dir, const mglDataA * val, const char * lbl, int add) function, expected prototype:\nvoid mgl_set_ticks_val(mglBase * gr, char dir, const mglDataA * val, const char * lbl, int add)\nClass arguments details:\narg 1 ID = 88502113\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	char dir=(char)lua_tointeger(L,2);
	const mglDataA* val=(Luna< mglDataA >::check(L,3));
	const char * lbl=(const char *)lua_tostring(L,4);
	int add=(int)lua_tointeger(L,5);

	mgl_set_ticks_val(gr, dir, val, lbl, add);

	return 0;
}

// void mgl_set_ticks_val_(uintptr_t * gr, const char * dir, uintptr_t * val, const char * lbl, int * add, int arg6, int arg7)
static int _bind_mgl_set_ticks_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_ticks_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_ticks_val_(uintptr_t * gr, const char * dir, uintptr_t * val, const char * lbl, int * add, int arg6, int arg7) function, expected prototype:\nvoid mgl_set_ticks_val_(uintptr_t * gr, const char * dir, uintptr_t * val, const char * lbl, int * add, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	uintptr_t* val=(Luna< uintptr_t >::check(L,3));
	const char * lbl=(const char *)lua_tostring(L,4);
	int add=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_set_ticks_val_(gr, dir, val, lbl, &add, _arg6, _arg7);

	return 0;
}

// void mgl_tune_ticks(mglBase * gr, int tune, double fact_pos)
static int _bind_mgl_tune_ticks(lua_State *L) {
	if (!_lg_typecheck_mgl_tune_ticks(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tune_ticks(mglBase * gr, int tune, double fact_pos) function, expected prototype:\nvoid mgl_tune_ticks(mglBase * gr, int tune, double fact_pos)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int tune=(int)lua_tointeger(L,2);
	double fact_pos=(double)lua_tonumber(L,3);

	mgl_tune_ticks(gr, tune, fact_pos);

	return 0;
}

// void mgl_tune_ticks_(uintptr_t * gr, int * tune, double * fact_pos)
static int _bind_mgl_tune_ticks_(lua_State *L) {
	if (!_lg_typecheck_mgl_tune_ticks_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tune_ticks_(uintptr_t * gr, int * tune, double * fact_pos) function, expected prototype:\nvoid mgl_tune_ticks_(uintptr_t * gr, int * tune, double * fact_pos)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int tune=(int)lua_tointeger(L,2);
	double fact_pos=(double)lua_tonumber(L,3);

	mgl_tune_ticks_(gr, &tune, &fact_pos);

	return 0;
}

// void mgl_set_tick_templ(mglBase * gr, char dir, const char * templ)
static int _bind_mgl_set_tick_templ(lua_State *L) {
	if (!_lg_typecheck_mgl_set_tick_templ(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_tick_templ(mglBase * gr, char dir, const char * templ) function, expected prototype:\nvoid mgl_set_tick_templ(mglBase * gr, char dir, const char * templ)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	char dir=(char)lua_tointeger(L,2);
	const char * templ=(const char *)lua_tostring(L,3);

	mgl_set_tick_templ(gr, dir, templ);

	return 0;
}

// void mgl_set_tick_templ_(uintptr_t * gr, const char * dir, const char * templ, int arg4, int arg5)
static int _bind_mgl_set_tick_templ_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_tick_templ_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_tick_templ_(uintptr_t * gr, const char * dir, const char * templ, int arg4, int arg5) function, expected prototype:\nvoid mgl_set_tick_templ_(uintptr_t * gr, const char * dir, const char * templ, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	const char * templ=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_set_tick_templ_(gr, dir, templ, _arg4, _arg5);

	return 0;
}

// void mgl_set_ticks_time(mglBase * gr, char dir, double d, const char * t)
static int _bind_mgl_set_ticks_time(lua_State *L) {
	if (!_lg_typecheck_mgl_set_ticks_time(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_ticks_time(mglBase * gr, char dir, double d, const char * t) function, expected prototype:\nvoid mgl_set_ticks_time(mglBase * gr, char dir, double d, const char * t)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	char dir=(char)lua_tointeger(L,2);
	double d=(double)lua_tonumber(L,3);
	const char * t=(const char *)lua_tostring(L,4);

	mgl_set_ticks_time(gr, dir, d, t);

	return 0;
}

// void mgl_set_ticks_time_(uintptr_t * gr, const char * dir, double * d, const char * t, int arg5, int arg6)
static int _bind_mgl_set_ticks_time_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_ticks_time_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_ticks_time_(uintptr_t * gr, const char * dir, double * d, const char * t, int arg5, int arg6) function, expected prototype:\nvoid mgl_set_ticks_time_(uintptr_t * gr, const char * dir, double * d, const char * t, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	double d=(double)lua_tonumber(L,3);
	const char * t=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_set_ticks_time_(gr, dir, &d, t, _arg5, _arg6);

	return 0;
}

// void mgl_set_tick_shift(mglBase * gr, double sx, double sy, double sz, double sc)
static int _bind_mgl_set_tick_shift(lua_State *L) {
	if (!_lg_typecheck_mgl_set_tick_shift(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_tick_shift(mglBase * gr, double sx, double sy, double sz, double sc) function, expected prototype:\nvoid mgl_set_tick_shift(mglBase * gr, double sx, double sy, double sz, double sc)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double sx=(double)lua_tonumber(L,2);
	double sy=(double)lua_tonumber(L,3);
	double sz=(double)lua_tonumber(L,4);
	double sc=(double)lua_tonumber(L,5);

	mgl_set_tick_shift(gr, sx, sy, sz, sc);

	return 0;
}

// void mgl_set_tick_shift_(uintptr_t * gr, double * sx, double * sy, double * sz, double * sc)
static int _bind_mgl_set_tick_shift_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_tick_shift_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_tick_shift_(uintptr_t * gr, double * sx, double * sy, double * sz, double * sc) function, expected prototype:\nvoid mgl_set_tick_shift_(uintptr_t * gr, double * sx, double * sy, double * sz, double * sc)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double sx=(double)lua_tonumber(L,2);
	double sy=(double)lua_tonumber(L,3);
	double sz=(double)lua_tonumber(L,4);
	double sc=(double)lua_tonumber(L,5);

	mgl_set_tick_shift_(gr, &sx, &sy, &sz, &sc);

	return 0;
}

// void mgl_box(mglBase * gr)
static int _bind_mgl_box(lua_State *L) {
	if (!_lg_typecheck_mgl_box(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_box(mglBase * gr) function, expected prototype:\nvoid mgl_box(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_box(gr);

	return 0;
}

// void mgl_box_(uintptr_t * gr)
static int _bind_mgl_box_(lua_State *L) {
	if (!_lg_typecheck_mgl_box_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_box_(uintptr_t * gr) function, expected prototype:\nvoid mgl_box_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_box_(gr);

	return 0;
}

// void mgl_box_str(mglBase * gr, const char * col, int ticks)
static int _bind_mgl_box_str(lua_State *L) {
	if (!_lg_typecheck_mgl_box_str(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_box_str(mglBase * gr, const char * col, int ticks) function, expected prototype:\nvoid mgl_box_str(mglBase * gr, const char * col, int ticks)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * col=(const char *)lua_tostring(L,2);
	int ticks=(int)lua_tointeger(L,3);

	mgl_box_str(gr, col, ticks);

	return 0;
}

// void mgl_box_str_(uintptr_t * gr, const char * col, int * ticks, int arg4)
static int _bind_mgl_box_str_(lua_State *L) {
	if (!_lg_typecheck_mgl_box_str_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_box_str_(uintptr_t * gr, const char * col, int * ticks, int arg4) function, expected prototype:\nvoid mgl_box_str_(uintptr_t * gr, const char * col, int * ticks, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * col=(const char *)lua_tostring(L,2);
	int ticks=(int)lua_tointeger(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_box_str_(gr, col, &ticks, _arg4);

	return 0;
}

// void mgl_axis(mglBase * gr, const char * dir, const char * stl, const char * opt)
static int _bind_mgl_axis(lua_State *L) {
	if (!_lg_typecheck_mgl_axis(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_axis(mglBase * gr, const char * dir, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_axis(mglBase * gr, const char * dir, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	const char * stl=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_axis(gr, dir, stl, opt);

	return 0;
}

// void mgl_axis_(uintptr_t * gr, const char * dir, const char * stl, const char * opt, int arg5, int arg6, int arg7)
static int _bind_mgl_axis_(lua_State *L) {
	if (!_lg_typecheck_mgl_axis_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_axis_(uintptr_t * gr, const char * dir, const char * stl, const char * opt, int arg5, int arg6, int arg7) function, expected prototype:\nvoid mgl_axis_(uintptr_t * gr, const char * dir, const char * stl, const char * opt, int arg5, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	const char * stl=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_axis_(gr, dir, stl, opt, _arg5, _arg6, _arg7);

	return 0;
}

// void mgl_axis_grid(mglBase * gr, const char * dir, const char * pen, const char * opt)
static int _bind_mgl_axis_grid(lua_State *L) {
	if (!_lg_typecheck_mgl_axis_grid(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_axis_grid(mglBase * gr, const char * dir, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_axis_grid(mglBase * gr, const char * dir, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_axis_grid(gr, dir, pen, opt);

	return 0;
}

// void mgl_axis_grid_(uintptr_t * gr, const char * dir, const char * pen, const char * opt, int arg5, int arg6, int arg7)
static int _bind_mgl_axis_grid_(lua_State *L) {
	if (!_lg_typecheck_mgl_axis_grid_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_axis_grid_(uintptr_t * gr, const char * dir, const char * pen, const char * opt, int arg5, int arg6, int arg7) function, expected prototype:\nvoid mgl_axis_grid_(uintptr_t * gr, const char * dir, const char * pen, const char * opt, int arg5, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_axis_grid_(gr, dir, pen, opt, _arg5, _arg6, _arg7);

	return 0;
}

// void mgl_colorbar(mglBase * gr, const char * sch)
static int _bind_mgl_colorbar(lua_State *L) {
	if (!_lg_typecheck_mgl_colorbar(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_colorbar(mglBase * gr, const char * sch) function, expected prototype:\nvoid mgl_colorbar(mglBase * gr, const char * sch)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * sch=(const char *)lua_tostring(L,2);

	mgl_colorbar(gr, sch);

	return 0;
}

// void mgl_colorbar_(uintptr_t * gr, const char * sch, int arg3)
static int _bind_mgl_colorbar_(lua_State *L) {
	if (!_lg_typecheck_mgl_colorbar_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_colorbar_(uintptr_t * gr, const char * sch, int arg3) function, expected prototype:\nvoid mgl_colorbar_(uintptr_t * gr, const char * sch, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * sch=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_colorbar_(gr, sch, _arg3);

	return 0;
}

// void mgl_colorbar_ext(mglBase * gr, const char * sch, double x, double y, double w, double h)
static int _bind_mgl_colorbar_ext(lua_State *L) {
	if (!_lg_typecheck_mgl_colorbar_ext(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_colorbar_ext(mglBase * gr, const char * sch, double x, double y, double w, double h) function, expected prototype:\nvoid mgl_colorbar_ext(mglBase * gr, const char * sch, double x, double y, double w, double h)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * sch=(const char *)lua_tostring(L,2);
	double x=(double)lua_tonumber(L,3);
	double y=(double)lua_tonumber(L,4);
	double w=(double)lua_tonumber(L,5);
	double h=(double)lua_tonumber(L,6);

	mgl_colorbar_ext(gr, sch, x, y, w, h);

	return 0;
}

// void mgl_colorbar_ext_(uintptr_t * gr, const char * sch, double * x, double * y, double * w, double * h, int arg7)
static int _bind_mgl_colorbar_ext_(lua_State *L) {
	if (!_lg_typecheck_mgl_colorbar_ext_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_colorbar_ext_(uintptr_t * gr, const char * sch, double * x, double * y, double * w, double * h, int arg7) function, expected prototype:\nvoid mgl_colorbar_ext_(uintptr_t * gr, const char * sch, double * x, double * y, double * w, double * h, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * sch=(const char *)lua_tostring(L,2);
	double x=(double)lua_tonumber(L,3);
	double y=(double)lua_tonumber(L,4);
	double w=(double)lua_tonumber(L,5);
	double h=(double)lua_tonumber(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_colorbar_ext_(gr, sch, &x, &y, &w, &h, _arg7);

	return 0;
}

// void mgl_colorbar_val(mglBase * gr, const mglDataA * dat, const char * sch)
static int _bind_mgl_colorbar_val(lua_State *L) {
	if (!_lg_typecheck_mgl_colorbar_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_colorbar_val(mglBase * gr, const mglDataA * dat, const char * sch) function, expected prototype:\nvoid mgl_colorbar_val(mglBase * gr, const mglDataA * dat, const char * sch)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* dat=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);

	mgl_colorbar_val(gr, dat, sch);

	return 0;
}

// void mgl_colorbar_val_(uintptr_t * gr, uintptr_t * dat, const char * sch, int arg4)
static int _bind_mgl_colorbar_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_colorbar_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_colorbar_val_(uintptr_t * gr, uintptr_t * dat, const char * sch, int arg4) function, expected prototype:\nvoid mgl_colorbar_val_(uintptr_t * gr, uintptr_t * dat, const char * sch, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* dat=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_colorbar_val_(gr, dat, sch, _arg4);

	return 0;
}

// void mgl_colorbar_val_ext(mglBase * gr, const mglDataA * dat, const char * sch, double x, double y, double w, double h)
static int _bind_mgl_colorbar_val_ext(lua_State *L) {
	if (!_lg_typecheck_mgl_colorbar_val_ext(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_colorbar_val_ext(mglBase * gr, const mglDataA * dat, const char * sch, double x, double y, double w, double h) function, expected prototype:\nvoid mgl_colorbar_val_ext(mglBase * gr, const mglDataA * dat, const char * sch, double x, double y, double w, double h)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* dat=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	double x=(double)lua_tonumber(L,4);
	double y=(double)lua_tonumber(L,5);
	double w=(double)lua_tonumber(L,6);
	double h=(double)lua_tonumber(L,7);

	mgl_colorbar_val_ext(gr, dat, sch, x, y, w, h);

	return 0;
}

// void mgl_colorbar_val_ext_(uintptr_t * gr, uintptr_t * dat, const char * sch, double * x, double * y, double * w, double * h, int arg8)
static int _bind_mgl_colorbar_val_ext_(lua_State *L) {
	if (!_lg_typecheck_mgl_colorbar_val_ext_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_colorbar_val_ext_(uintptr_t * gr, uintptr_t * dat, const char * sch, double * x, double * y, double * w, double * h, int arg8) function, expected prototype:\nvoid mgl_colorbar_val_ext_(uintptr_t * gr, uintptr_t * dat, const char * sch, double * x, double * y, double * w, double * h, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* dat=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	double x=(double)lua_tonumber(L,4);
	double y=(double)lua_tonumber(L,5);
	double w=(double)lua_tonumber(L,6);
	double h=(double)lua_tonumber(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_colorbar_val_ext_(gr, dat, sch, &x, &y, &w, &h, _arg8);

	return 0;
}

// void mgl_add_legend(mglBase * gr, const char * text, const char * style)
static int _bind_mgl_add_legend(lua_State *L) {
	if (!_lg_typecheck_mgl_add_legend(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_add_legend(mglBase * gr, const char * text, const char * style) function, expected prototype:\nvoid mgl_add_legend(mglBase * gr, const char * text, const char * style)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * text=(const char *)lua_tostring(L,2);
	const char * style=(const char *)lua_tostring(L,3);

	mgl_add_legend(gr, text, style);

	return 0;
}

// void mgl_add_legend_(uintptr_t * gr, const char * text, const char * style, int arg4, int arg5)
static int _bind_mgl_add_legend_(lua_State *L) {
	if (!_lg_typecheck_mgl_add_legend_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_add_legend_(uintptr_t * gr, const char * text, const char * style, int arg4, int arg5) function, expected prototype:\nvoid mgl_add_legend_(uintptr_t * gr, const char * text, const char * style, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * text=(const char *)lua_tostring(L,2);
	const char * style=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_add_legend_(gr, text, style, _arg4, _arg5);

	return 0;
}

// void mgl_clear_legend(mglBase * gr)
static int _bind_mgl_clear_legend(lua_State *L) {
	if (!_lg_typecheck_mgl_clear_legend(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_clear_legend(mglBase * gr) function, expected prototype:\nvoid mgl_clear_legend(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_clear_legend(gr);

	return 0;
}

// void mgl_clear_legend_(uintptr_t * gr)
static int _bind_mgl_clear_legend_(lua_State *L) {
	if (!_lg_typecheck_mgl_clear_legend_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_clear_legend_(uintptr_t * gr) function, expected prototype:\nvoid mgl_clear_legend_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_clear_legend_(gr);

	return 0;
}

// void mgl_legend_pos(mglBase * gr, double x, double y, const char * font, const char * opt)
static int _bind_mgl_legend_pos(lua_State *L) {
	if (!_lg_typecheck_mgl_legend_pos(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_legend_pos(mglBase * gr, double x, double y, const char * font, const char * opt) function, expected prototype:\nvoid mgl_legend_pos(mglBase * gr, double x, double y, const char * font, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	const char * font=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_legend_pos(gr, x, y, font, opt);

	return 0;
}

// void mgl_legend_pos_(uintptr_t * gr, double * x, double * y, const char * font, const char * opt, int arg6, int arg7)
static int _bind_mgl_legend_pos_(lua_State *L) {
	if (!_lg_typecheck_mgl_legend_pos_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_legend_pos_(uintptr_t * gr, double * x, double * y, const char * font, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_legend_pos_(uintptr_t * gr, double * x, double * y, const char * font, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	const char * font=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_legend_pos_(gr, &x, &y, font, opt, _arg6, _arg7);

	return 0;
}

// void mgl_legend(mglBase * gr, int where, const char * font, const char * opt)
static int _bind_mgl_legend(lua_State *L) {
	if (!_lg_typecheck_mgl_legend(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_legend(mglBase * gr, int where, const char * font, const char * opt) function, expected prototype:\nvoid mgl_legend(mglBase * gr, int where, const char * font, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int where=(int)lua_tointeger(L,2);
	const char * font=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_legend(gr, where, font, opt);

	return 0;
}

// void mgl_legend_(uintptr_t * gr, int * where, const char * font, const char * opt, int arg5, int arg6)
static int _bind_mgl_legend_(lua_State *L) {
	if (!_lg_typecheck_mgl_legend_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_legend_(uintptr_t * gr, int * where, const char * font, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_legend_(uintptr_t * gr, int * where, const char * font, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int where=(int)lua_tointeger(L,2);
	const char * font=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_legend_(gr, &where, font, opt, _arg5, _arg6);

	return 0;
}

// void mgl_set_legend_marks(mglBase * gr, int num)
static int _bind_mgl_set_legend_marks(lua_State *L) {
	if (!_lg_typecheck_mgl_set_legend_marks(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_legend_marks(mglBase * gr, int num) function, expected prototype:\nvoid mgl_set_legend_marks(mglBase * gr, int num)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int num=(int)lua_tointeger(L,2);

	mgl_set_legend_marks(gr, num);

	return 0;
}

// void mgl_set_legend_marks_(uintptr_t * gr, int * num)
static int _bind_mgl_set_legend_marks_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_legend_marks_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_legend_marks_(uintptr_t * gr, int * num) function, expected prototype:\nvoid mgl_set_legend_marks_(uintptr_t * gr, int * num)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int num=(int)lua_tointeger(L,2);

	mgl_set_legend_marks_(gr, &num);

	return 0;
}

// void mgl_show_image(mglBase * gr, const char * viewer, int keep)
static int _bind_mgl_show_image(lua_State *L) {
	if (!_lg_typecheck_mgl_show_image(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_show_image(mglBase * gr, const char * viewer, int keep) function, expected prototype:\nvoid mgl_show_image(mglBase * gr, const char * viewer, int keep)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * viewer=(const char *)lua_tostring(L,2);
	int keep=(int)lua_tointeger(L,3);

	mgl_show_image(gr, viewer, keep);

	return 0;
}

// void mgl_show_image_(uintptr_t * gr, const char * viewer, int * keep, int arg4)
static int _bind_mgl_show_image_(lua_State *L) {
	if (!_lg_typecheck_mgl_show_image_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_show_image_(uintptr_t * gr, const char * viewer, int * keep, int arg4) function, expected prototype:\nvoid mgl_show_image_(uintptr_t * gr, const char * viewer, int * keep, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * viewer=(const char *)lua_tostring(L,2);
	int keep=(int)lua_tointeger(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_show_image_(gr, viewer, &keep, _arg4);

	return 0;
}

// void mgl_write_frame(mglBase * gr, const char * fname, const char * descr)
static int _bind_mgl_write_frame(lua_State *L) {
	if (!_lg_typecheck_mgl_write_frame(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_frame(mglBase * gr, const char * fname, const char * descr) function, expected prototype:\nvoid mgl_write_frame(mglBase * gr, const char * fname, const char * descr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);

	mgl_write_frame(gr, fname, descr);

	return 0;
}

// void mgl_write_frame_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)
static int _bind_mgl_write_frame_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_frame_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_frame_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5) function, expected prototype:\nvoid mgl_write_frame_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_write_frame_(gr, fname, descr, _arg4, _arg5);

	return 0;
}

// void mgl_write_tga(mglBase * gr, const char * fname, const char * descr)
static int _bind_mgl_write_tga(lua_State *L) {
	if (!_lg_typecheck_mgl_write_tga(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_tga(mglBase * gr, const char * fname, const char * descr) function, expected prototype:\nvoid mgl_write_tga(mglBase * gr, const char * fname, const char * descr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);

	mgl_write_tga(gr, fname, descr);

	return 0;
}

// void mgl_write_tga_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)
static int _bind_mgl_write_tga_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_tga_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_tga_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5) function, expected prototype:\nvoid mgl_write_tga_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_write_tga_(gr, fname, descr, _arg4, _arg5);

	return 0;
}

// void mgl_write_bmp(mglBase * gr, const char * fname, const char * descr)
static int _bind_mgl_write_bmp(lua_State *L) {
	if (!_lg_typecheck_mgl_write_bmp(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_bmp(mglBase * gr, const char * fname, const char * descr) function, expected prototype:\nvoid mgl_write_bmp(mglBase * gr, const char * fname, const char * descr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);

	mgl_write_bmp(gr, fname, descr);

	return 0;
}

// void mgl_write_bmp_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)
static int _bind_mgl_write_bmp_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_bmp_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_bmp_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5) function, expected prototype:\nvoid mgl_write_bmp_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_write_bmp_(gr, fname, descr, _arg4, _arg5);

	return 0;
}

// void mgl_write_jpg(mglBase * gr, const char * fname, const char * descr)
static int _bind_mgl_write_jpg(lua_State *L) {
	if (!_lg_typecheck_mgl_write_jpg(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_jpg(mglBase * gr, const char * fname, const char * descr) function, expected prototype:\nvoid mgl_write_jpg(mglBase * gr, const char * fname, const char * descr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);

	mgl_write_jpg(gr, fname, descr);

	return 0;
}

// void mgl_write_jpg_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)
static int _bind_mgl_write_jpg_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_jpg_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_jpg_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5) function, expected prototype:\nvoid mgl_write_jpg_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_write_jpg_(gr, fname, descr, _arg4, _arg5);

	return 0;
}

// void mgl_write_png(mglBase * gr, const char * fname, const char * descr)
static int _bind_mgl_write_png(lua_State *L) {
	if (!_lg_typecheck_mgl_write_png(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_png(mglBase * gr, const char * fname, const char * descr) function, expected prototype:\nvoid mgl_write_png(mglBase * gr, const char * fname, const char * descr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);

	mgl_write_png(gr, fname, descr);

	return 0;
}

// void mgl_write_png_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)
static int _bind_mgl_write_png_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_png_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_png_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5) function, expected prototype:\nvoid mgl_write_png_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_write_png_(gr, fname, descr, _arg4, _arg5);

	return 0;
}

// void mgl_write_png_solid(mglBase * gr, const char * fname, const char * descr)
static int _bind_mgl_write_png_solid(lua_State *L) {
	if (!_lg_typecheck_mgl_write_png_solid(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_png_solid(mglBase * gr, const char * fname, const char * descr) function, expected prototype:\nvoid mgl_write_png_solid(mglBase * gr, const char * fname, const char * descr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);

	mgl_write_png_solid(gr, fname, descr);

	return 0;
}

// void mgl_write_png_solid_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)
static int _bind_mgl_write_png_solid_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_png_solid_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_png_solid_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5) function, expected prototype:\nvoid mgl_write_png_solid_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_write_png_solid_(gr, fname, descr, _arg4, _arg5);

	return 0;
}

// void mgl_write_bps(mglBase * gr, const char * fname, const char * descr)
static int _bind_mgl_write_bps(lua_State *L) {
	if (!_lg_typecheck_mgl_write_bps(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_bps(mglBase * gr, const char * fname, const char * descr) function, expected prototype:\nvoid mgl_write_bps(mglBase * gr, const char * fname, const char * descr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);

	mgl_write_bps(gr, fname, descr);

	return 0;
}

// void mgl_write_bps_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)
static int _bind_mgl_write_bps_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_bps_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_bps_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5) function, expected prototype:\nvoid mgl_write_bps_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_write_bps_(gr, fname, descr, _arg4, _arg5);

	return 0;
}

// void mgl_write_eps(mglBase * gr, const char * fname, const char * descr)
static int _bind_mgl_write_eps(lua_State *L) {
	if (!_lg_typecheck_mgl_write_eps(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_eps(mglBase * gr, const char * fname, const char * descr) function, expected prototype:\nvoid mgl_write_eps(mglBase * gr, const char * fname, const char * descr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);

	mgl_write_eps(gr, fname, descr);

	return 0;
}

// void mgl_write_eps_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)
static int _bind_mgl_write_eps_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_eps_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_eps_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5) function, expected prototype:\nvoid mgl_write_eps_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_write_eps_(gr, fname, descr, _arg4, _arg5);

	return 0;
}

// void mgl_write_svg(mglBase * gr, const char * fname, const char * descr)
static int _bind_mgl_write_svg(lua_State *L) {
	if (!_lg_typecheck_mgl_write_svg(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_svg(mglBase * gr, const char * fname, const char * descr) function, expected prototype:\nvoid mgl_write_svg(mglBase * gr, const char * fname, const char * descr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);

	mgl_write_svg(gr, fname, descr);

	return 0;
}

// void mgl_write_svg_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)
static int _bind_mgl_write_svg_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_svg_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_svg_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5) function, expected prototype:\nvoid mgl_write_svg_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_write_svg_(gr, fname, descr, _arg4, _arg5);

	return 0;
}

// void mgl_write_obj(mglBase * gr, const char * fname, const char * descr, int use_png)
static int _bind_mgl_write_obj(lua_State *L) {
	if (!_lg_typecheck_mgl_write_obj(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_obj(mglBase * gr, const char * fname, const char * descr, int use_png) function, expected prototype:\nvoid mgl_write_obj(mglBase * gr, const char * fname, const char * descr, int use_png)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int use_png=(int)lua_tointeger(L,4);

	mgl_write_obj(gr, fname, descr, use_png);

	return 0;
}

// void mgl_write_obj_(uintptr_t * gr, const char * fname, const char * descr, int * use_png, int arg5, int arg6)
static int _bind_mgl_write_obj_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_obj_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_obj_(uintptr_t * gr, const char * fname, const char * descr, int * use_png, int arg5, int arg6) function, expected prototype:\nvoid mgl_write_obj_(uintptr_t * gr, const char * fname, const char * descr, int * use_png, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int use_png=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_write_obj_(gr, fname, descr, &use_png, _arg5, _arg6);

	return 0;
}

// void mgl_write_stl(mglBase * gr, const char * fname, const char * descr)
static int _bind_mgl_write_stl(lua_State *L) {
	if (!_lg_typecheck_mgl_write_stl(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_stl(mglBase * gr, const char * fname, const char * descr) function, expected prototype:\nvoid mgl_write_stl(mglBase * gr, const char * fname, const char * descr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);

	mgl_write_stl(gr, fname, descr);

	return 0;
}

// void mgl_write_stl_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)
static int _bind_mgl_write_stl_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_stl_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_stl_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5) function, expected prototype:\nvoid mgl_write_stl_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_write_stl_(gr, fname, descr, _arg4, _arg5);

	return 0;
}

// void mgl_write_off(mglBase * gr, const char * fname, const char * descr, int colored)
static int _bind_mgl_write_off(lua_State *L) {
	if (!_lg_typecheck_mgl_write_off(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_off(mglBase * gr, const char * fname, const char * descr, int colored) function, expected prototype:\nvoid mgl_write_off(mglBase * gr, const char * fname, const char * descr, int colored)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int colored=(int)lua_tointeger(L,4);

	mgl_write_off(gr, fname, descr, colored);

	return 0;
}

// void mgl_write_off_(uintptr_t * gr, const char * fname, const char * descr, int * colored, int arg5, int arg6)
static int _bind_mgl_write_off_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_off_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_off_(uintptr_t * gr, const char * fname, const char * descr, int * colored, int arg5, int arg6) function, expected prototype:\nvoid mgl_write_off_(uintptr_t * gr, const char * fname, const char * descr, int * colored, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int colored=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_write_off_(gr, fname, descr, &colored, _arg5, _arg6);

	return 0;
}

// void mgl_write_xyz(mglBase * gr, const char * fname, const char * descr)
static int _bind_mgl_write_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_write_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_xyz(mglBase * gr, const char * fname, const char * descr) function, expected prototype:\nvoid mgl_write_xyz(mglBase * gr, const char * fname, const char * descr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);

	mgl_write_xyz(gr, fname, descr);

	return 0;
}

// void mgl_write_xyz_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)
static int _bind_mgl_write_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_xyz_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5) function, expected prototype:\nvoid mgl_write_xyz_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_write_xyz_(gr, fname, descr, _arg4, _arg5);

	return 0;
}

// void mgl_write_prc(mglBase * gr, const char * fname, const char * descr, int make_pdf)
static int _bind_mgl_write_prc(lua_State *L) {
	if (!_lg_typecheck_mgl_write_prc(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_prc(mglBase * gr, const char * fname, const char * descr, int make_pdf) function, expected prototype:\nvoid mgl_write_prc(mglBase * gr, const char * fname, const char * descr, int make_pdf)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int make_pdf=(int)lua_tointeger(L,4);

	mgl_write_prc(gr, fname, descr, make_pdf);

	return 0;
}

// void mgl_write_prc_(uintptr_t * gr, const char * fname, const char * descr, int * make_pdf, int arg5, int arg6)
static int _bind_mgl_write_prc_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_prc_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_prc_(uintptr_t * gr, const char * fname, const char * descr, int * make_pdf, int arg5, int arg6) function, expected prototype:\nvoid mgl_write_prc_(uintptr_t * gr, const char * fname, const char * descr, int * make_pdf, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int make_pdf=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_write_prc_(gr, fname, descr, &make_pdf, _arg5, _arg6);

	return 0;
}

// void mgl_write_gif(mglBase * gr, const char * fname, const char * descr)
static int _bind_mgl_write_gif(lua_State *L) {
	if (!_lg_typecheck_mgl_write_gif(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_gif(mglBase * gr, const char * fname, const char * descr) function, expected prototype:\nvoid mgl_write_gif(mglBase * gr, const char * fname, const char * descr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);

	mgl_write_gif(gr, fname, descr);

	return 0;
}

// void mgl_write_gif_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)
static int _bind_mgl_write_gif_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_gif_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_gif_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5) function, expected prototype:\nvoid mgl_write_gif_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_write_gif_(gr, fname, descr, _arg4, _arg5);

	return 0;
}

// void mgl_start_gif(mglBase * gr, const char * fname, int ms)
static int _bind_mgl_start_gif(lua_State *L) {
	if (!_lg_typecheck_mgl_start_gif(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_start_gif(mglBase * gr, const char * fname, int ms) function, expected prototype:\nvoid mgl_start_gif(mglBase * gr, const char * fname, int ms)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	int ms=(int)lua_tointeger(L,3);

	mgl_start_gif(gr, fname, ms);

	return 0;
}

// void mgl_start_gif_(uintptr_t * gr, const char * fname, int * ms, int arg4)
static int _bind_mgl_start_gif_(lua_State *L) {
	if (!_lg_typecheck_mgl_start_gif_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_start_gif_(uintptr_t * gr, const char * fname, int * ms, int arg4) function, expected prototype:\nvoid mgl_start_gif_(uintptr_t * gr, const char * fname, int * ms, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	int ms=(int)lua_tointeger(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_start_gif_(gr, fname, &ms, _arg4);

	return 0;
}

// void mgl_close_gif(mglBase * gr)
static int _bind_mgl_close_gif(lua_State *L) {
	if (!_lg_typecheck_mgl_close_gif(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_close_gif(mglBase * gr) function, expected prototype:\nvoid mgl_close_gif(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_close_gif(gr);

	return 0;
}

// void mgl_close_gif_(uintptr_t * gr)
static int _bind_mgl_close_gif_(lua_State *L) {
	if (!_lg_typecheck_mgl_close_gif_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_close_gif_(uintptr_t * gr) function, expected prototype:\nvoid mgl_close_gif_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_close_gif_(gr);

	return 0;
}

// void mgl_set_plotid(mglBase * gr, const char * id)
static int _bind_mgl_set_plotid(lua_State *L) {
	if (!_lg_typecheck_mgl_set_plotid(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_plotid(mglBase * gr, const char * id) function, expected prototype:\nvoid mgl_set_plotid(mglBase * gr, const char * id)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * id=(const char *)lua_tostring(L,2);

	mgl_set_plotid(gr, id);

	return 0;
}

// void mgl_set_plotid_(uintptr_t * gr, const char * id, int arg3)
static int _bind_mgl_set_plotid_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_plotid_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_plotid_(uintptr_t * gr, const char * id, int arg3) function, expected prototype:\nvoid mgl_set_plotid_(uintptr_t * gr, const char * id, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * id=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_set_plotid_(gr, id, _arg3);

	return 0;
}

// void mgl_export_mgld(mglBase * gr, const char * fname, const char * descr)
static int _bind_mgl_export_mgld(lua_State *L) {
	if (!_lg_typecheck_mgl_export_mgld(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_export_mgld(mglBase * gr, const char * fname, const char * descr) function, expected prototype:\nvoid mgl_export_mgld(mglBase * gr, const char * fname, const char * descr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);

	mgl_export_mgld(gr, fname, descr);

	return 0;
}

// void mgl_export_mgld_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)
static int _bind_mgl_export_mgld_(lua_State *L) {
	if (!_lg_typecheck_mgl_export_mgld_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_export_mgld_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5) function, expected prototype:\nvoid mgl_export_mgld_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_export_mgld_(gr, fname, descr, _arg4, _arg5);

	return 0;
}

// void mgl_import_mgld(mglBase * gr, const char * fname, int add)
static int _bind_mgl_import_mgld(lua_State *L) {
	if (!_lg_typecheck_mgl_import_mgld(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_import_mgld(mglBase * gr, const char * fname, int add) function, expected prototype:\nvoid mgl_import_mgld(mglBase * gr, const char * fname, int add)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	int add=(int)lua_tointeger(L,3);

	mgl_import_mgld(gr, fname, add);

	return 0;
}

// void mgl_import_mgld_(uintptr_t * gr, const char * fname, int * add, int arg4)
static int _bind_mgl_import_mgld_(lua_State *L) {
	if (!_lg_typecheck_mgl_import_mgld_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_import_mgld_(uintptr_t * gr, const char * fname, int * add, int arg4) function, expected prototype:\nvoid mgl_import_mgld_(uintptr_t * gr, const char * fname, int * add, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	int add=(int)lua_tointeger(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_import_mgld_(gr, fname, &add, _arg4);

	return 0;
}

// void mgl_write_json(mglBase * gr, const char * fname, const char * descr)
static int _bind_mgl_write_json(lua_State *L) {
	if (!_lg_typecheck_mgl_write_json(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_json(mglBase * gr, const char * fname, const char * descr) function, expected prototype:\nvoid mgl_write_json(mglBase * gr, const char * fname, const char * descr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);

	mgl_write_json(gr, fname, descr);

	return 0;
}

// void mgl_write_json_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)
static int _bind_mgl_write_json_(lua_State *L) {
	if (!_lg_typecheck_mgl_write_json_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_write_json_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5) function, expected prototype:\nvoid mgl_write_json_(uintptr_t * gr, const char * fname, const char * descr, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * descr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_write_json_(gr, fname, descr, _arg4, _arg5);

	return 0;
}

// const unsigned char * mgl_get_rgb(mglBase * gr)
static int _bind_mgl_get_rgb(lua_State *L) {
	if (!_lg_typecheck_mgl_get_rgb(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in const unsigned char * mgl_get_rgb(mglBase * gr) function, expected prototype:\nconst unsigned char * mgl_get_rgb(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	const unsigned char * lret = mgl_get_rgb(gr);
	luaL_error(L,"Trying to convert pointer on unsigned char lret to lua. This usage should be clarifierd.");

	return 1;
}

// const unsigned char * mgl_get_rgb_(uintptr_t * gr)
static int _bind_mgl_get_rgb_(lua_State *L) {
	if (!_lg_typecheck_mgl_get_rgb_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in const unsigned char * mgl_get_rgb_(uintptr_t * gr) function, expected prototype:\nconst unsigned char * mgl_get_rgb_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	const unsigned char * lret = mgl_get_rgb_(gr);
	luaL_error(L,"Trying to convert pointer on unsigned char lret to lua. This usage should be clarifierd.");

	return 1;
}

// const unsigned char * mgl_get_rgba(mglBase * gr)
static int _bind_mgl_get_rgba(lua_State *L) {
	if (!_lg_typecheck_mgl_get_rgba(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in const unsigned char * mgl_get_rgba(mglBase * gr) function, expected prototype:\nconst unsigned char * mgl_get_rgba(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	const unsigned char * lret = mgl_get_rgba(gr);
	luaL_error(L,"Trying to convert pointer on unsigned char lret to lua. This usage should be clarifierd.");

	return 1;
}

// const unsigned char * mgl_get_rgba_(uintptr_t * gr)
static int _bind_mgl_get_rgba_(lua_State *L) {
	if (!_lg_typecheck_mgl_get_rgba_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in const unsigned char * mgl_get_rgba_(uintptr_t * gr) function, expected prototype:\nconst unsigned char * mgl_get_rgba_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	const unsigned char * lret = mgl_get_rgba_(gr);
	luaL_error(L,"Trying to convert pointer on unsigned char lret to lua. This usage should be clarifierd.");

	return 1;
}

// void mgl_set_obj_id(mglBase * gr, int id)
static int _bind_mgl_set_obj_id(lua_State *L) {
	if (!_lg_typecheck_mgl_set_obj_id(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_obj_id(mglBase * gr, int id) function, expected prototype:\nvoid mgl_set_obj_id(mglBase * gr, int id)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int id=(int)lua_tointeger(L,2);

	mgl_set_obj_id(gr, id);

	return 0;
}

// void mgl_set_obj_id_(uintptr_t * gr, int * id)
static int _bind_mgl_set_obj_id_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_obj_id_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_obj_id_(uintptr_t * gr, int * id) function, expected prototype:\nvoid mgl_set_obj_id_(uintptr_t * gr, int * id)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int id=(int)lua_tointeger(L,2);

	mgl_set_obj_id_(gr, &id);

	return 0;
}

// int mgl_get_obj_id(mglBase * gr, int x, int y)
static int _bind_mgl_get_obj_id(lua_State *L) {
	if (!_lg_typecheck_mgl_get_obj_id(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_get_obj_id(mglBase * gr, int x, int y) function, expected prototype:\nint mgl_get_obj_id(mglBase * gr, int x, int y)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int x=(int)lua_tointeger(L,2);
	int y=(int)lua_tointeger(L,3);

	int lret = mgl_get_obj_id(gr, x, y);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_get_obj_id_(uintptr_t * gr, int * x, int * y)
static int _bind_mgl_get_obj_id_(lua_State *L) {
	if (!_lg_typecheck_mgl_get_obj_id_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_get_obj_id_(uintptr_t * gr, int * x, int * y) function, expected prototype:\nint mgl_get_obj_id_(uintptr_t * gr, int * x, int * y)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int x=(int)lua_tointeger(L,2);
	int y=(int)lua_tointeger(L,3);

	int lret = mgl_get_obj_id_(gr, &x, &y);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_get_spl_id(mglBase * gr, int x, int y)
static int _bind_mgl_get_spl_id(lua_State *L) {
	if (!_lg_typecheck_mgl_get_spl_id(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_get_spl_id(mglBase * gr, int x, int y) function, expected prototype:\nint mgl_get_spl_id(mglBase * gr, int x, int y)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int x=(int)lua_tointeger(L,2);
	int y=(int)lua_tointeger(L,3);

	int lret = mgl_get_spl_id(gr, x, y);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_get_spl_id_(uintptr_t * gr, int * x, int * y)
static int _bind_mgl_get_spl_id_(lua_State *L) {
	if (!_lg_typecheck_mgl_get_spl_id_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_get_spl_id_(uintptr_t * gr, int * x, int * y) function, expected prototype:\nint mgl_get_spl_id_(uintptr_t * gr, int * x, int * y)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int x=(int)lua_tointeger(L,2);
	int y=(int)lua_tointeger(L,3);

	int lret = mgl_get_spl_id_(gr, &x, &y);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_get_width(mglBase * gr)
static int _bind_mgl_get_width(lua_State *L) {
	if (!_lg_typecheck_mgl_get_width(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_get_width(mglBase * gr) function, expected prototype:\nint mgl_get_width(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	int lret = mgl_get_width(gr);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_get_width_(uintptr_t * gr)
static int _bind_mgl_get_width_(lua_State *L) {
	if (!_lg_typecheck_mgl_get_width_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_get_width_(uintptr_t * gr) function, expected prototype:\nint mgl_get_width_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	int lret = mgl_get_width_(gr);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_get_height(mglBase * gr)
static int _bind_mgl_get_height(lua_State *L) {
	if (!_lg_typecheck_mgl_get_height(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_get_height(mglBase * gr) function, expected prototype:\nint mgl_get_height(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	int lret = mgl_get_height(gr);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_get_height_(uintptr_t * gr)
static int _bind_mgl_get_height_(lua_State *L) {
	if (!_lg_typecheck_mgl_get_height_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_get_height_(uintptr_t * gr) function, expected prototype:\nint mgl_get_height_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	int lret = mgl_get_height_(gr);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_calc_xyz(mglBase * gr, int xs, int ys, double * x, double * y, double * z)
static int _bind_mgl_calc_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_calc_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_calc_xyz(mglBase * gr, int xs, int ys, double * x, double * y, double * z) function, expected prototype:\nvoid mgl_calc_xyz(mglBase * gr, int xs, int ys, double * x, double * y, double * z)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int xs=(int)lua_tointeger(L,2);
	int ys=(int)lua_tointeger(L,3);
	double x=(double)lua_tonumber(L,4);
	double y=(double)lua_tonumber(L,5);
	double z=(double)lua_tonumber(L,6);

	mgl_calc_xyz(gr, xs, ys, &x, &y, &z);

	return 0;
}

// void mgl_calc_xyz_(uintptr_t * gr, int * xs, int * ys, double * x, double * y, double * z)
static int _bind_mgl_calc_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_calc_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_calc_xyz_(uintptr_t * gr, int * xs, int * ys, double * x, double * y, double * z) function, expected prototype:\nvoid mgl_calc_xyz_(uintptr_t * gr, int * xs, int * ys, double * x, double * y, double * z)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int xs=(int)lua_tointeger(L,2);
	int ys=(int)lua_tointeger(L,3);
	double x=(double)lua_tonumber(L,4);
	double y=(double)lua_tonumber(L,5);
	double z=(double)lua_tonumber(L,6);

	mgl_calc_xyz_(gr, &xs, &ys, &x, &y, &z);

	return 0;
}

// void mgl_calc_scr(mglBase * gr, double x, double y, double z, int * xs, int * ys)
static int _bind_mgl_calc_scr(lua_State *L) {
	if (!_lg_typecheck_mgl_calc_scr(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_calc_scr(mglBase * gr, double x, double y, double z, int * xs, int * ys) function, expected prototype:\nvoid mgl_calc_scr(mglBase * gr, double x, double y, double z, int * xs, int * ys)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	int xs=(int)lua_tointeger(L,5);
	int ys=(int)lua_tointeger(L,6);

	mgl_calc_scr(gr, x, y, z, &xs, &ys);

	return 0;
}

// void mgl_calc_scr_(uintptr_t * gr, double * x, double * y, double * z, int * xs, int * ys)
static int _bind_mgl_calc_scr_(lua_State *L) {
	if (!_lg_typecheck_mgl_calc_scr_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_calc_scr_(uintptr_t * gr, double * x, double * y, double * z, int * xs, int * ys) function, expected prototype:\nvoid mgl_calc_scr_(uintptr_t * gr, double * x, double * y, double * z, int * xs, int * ys)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	int xs=(int)lua_tointeger(L,5);
	int ys=(int)lua_tointeger(L,6);

	mgl_calc_scr_(gr, &x, &y, &z, &xs, &ys);

	return 0;
}

// long mgl_is_active(mglBase * gr, int xs, int ys, int d)
static int _bind_mgl_is_active(lua_State *L) {
	if (!_lg_typecheck_mgl_is_active(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_is_active(mglBase * gr, int xs, int ys, int d) function, expected prototype:\nlong mgl_is_active(mglBase * gr, int xs, int ys, int d)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int xs=(int)lua_tointeger(L,2);
	int ys=(int)lua_tointeger(L,3);
	int d=(int)lua_tointeger(L,4);

	long lret = mgl_is_active(gr, xs, ys, d);
	lua_pushnumber(L,lret);

	return 1;
}

// long mgl_is_active_(uintptr_t * gr, int * xs, int * ys, int * d)
static int _bind_mgl_is_active_(lua_State *L) {
	if (!_lg_typecheck_mgl_is_active_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_is_active_(uintptr_t * gr, int * xs, int * ys, int * d) function, expected prototype:\nlong mgl_is_active_(uintptr_t * gr, int * xs, int * ys, int * d)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int xs=(int)lua_tointeger(L,2);
	int ys=(int)lua_tointeger(L,3);
	int d=(int)lua_tointeger(L,4);

	long lret = mgl_is_active_(gr, &xs, &ys, &d);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_new_frame(mglBase * gr)
static int _bind_mgl_new_frame(lua_State *L) {
	if (!_lg_typecheck_mgl_new_frame(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_new_frame(mglBase * gr) function, expected prototype:\nint mgl_new_frame(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	int lret = mgl_new_frame(gr);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_new_frame_(uintptr_t * gr)
static int _bind_mgl_new_frame_(lua_State *L) {
	if (!_lg_typecheck_mgl_new_frame_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_new_frame_(uintptr_t * gr) function, expected prototype:\nint mgl_new_frame_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	int lret = mgl_new_frame_(gr);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_end_frame(mglBase * gr)
static int _bind_mgl_end_frame(lua_State *L) {
	if (!_lg_typecheck_mgl_end_frame(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_end_frame(mglBase * gr) function, expected prototype:\nvoid mgl_end_frame(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_end_frame(gr);

	return 0;
}

// void mgl_end_frame_(uintptr_t * gr)
static int _bind_mgl_end_frame_(lua_State *L) {
	if (!_lg_typecheck_mgl_end_frame_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_end_frame_(uintptr_t * gr) function, expected prototype:\nvoid mgl_end_frame_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_end_frame_(gr);

	return 0;
}

// int mgl_get_num_frame(mglBase * gr)
static int _bind_mgl_get_num_frame(lua_State *L) {
	if (!_lg_typecheck_mgl_get_num_frame(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_get_num_frame(mglBase * gr) function, expected prototype:\nint mgl_get_num_frame(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	int lret = mgl_get_num_frame(gr);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_get_num_frame_(uintptr_t * gr)
static int _bind_mgl_get_num_frame_(lua_State *L) {
	if (!_lg_typecheck_mgl_get_num_frame_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_get_num_frame_(uintptr_t * gr) function, expected prototype:\nint mgl_get_num_frame_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	int lret = mgl_get_num_frame_(gr);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_reset_frames(mglBase * gr)
static int _bind_mgl_reset_frames(lua_State *L) {
	if (!_lg_typecheck_mgl_reset_frames(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_reset_frames(mglBase * gr) function, expected prototype:\nvoid mgl_reset_frames(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_reset_frames(gr);

	return 0;
}

// void mgl_reset_frames_(uintptr_t * gr)
static int _bind_mgl_reset_frames_(lua_State *L) {
	if (!_lg_typecheck_mgl_reset_frames_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_reset_frames_(uintptr_t * gr) function, expected prototype:\nvoid mgl_reset_frames_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_reset_frames_(gr);

	return 0;
}

// void mgl_get_frame(mglBase * gr, int i)
static int _bind_mgl_get_frame(lua_State *L) {
	if (!_lg_typecheck_mgl_get_frame(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_get_frame(mglBase * gr, int i) function, expected prototype:\nvoid mgl_get_frame(mglBase * gr, int i)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int i=(int)lua_tointeger(L,2);

	mgl_get_frame(gr, i);

	return 0;
}

// void mgl_get_frame_(uintptr_t * gr, int * i)
static int _bind_mgl_get_frame_(lua_State *L) {
	if (!_lg_typecheck_mgl_get_frame_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_get_frame_(uintptr_t * gr, int * i) function, expected prototype:\nvoid mgl_get_frame_(uintptr_t * gr, int * i)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int i=(int)lua_tointeger(L,2);

	mgl_get_frame_(gr, &i);

	return 0;
}

// void mgl_set_frame(mglBase * gr, int i)
static int _bind_mgl_set_frame(lua_State *L) {
	if (!_lg_typecheck_mgl_set_frame(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_frame(mglBase * gr, int i) function, expected prototype:\nvoid mgl_set_frame(mglBase * gr, int i)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int i=(int)lua_tointeger(L,2);

	mgl_set_frame(gr, i);

	return 0;
}

// void mgl_set_frame_(uintptr_t * gr, int * i)
static int _bind_mgl_set_frame_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_frame_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_frame_(uintptr_t * gr, int * i) function, expected prototype:\nvoid mgl_set_frame_(uintptr_t * gr, int * i)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int i=(int)lua_tointeger(L,2);

	mgl_set_frame_(gr, &i);

	return 0;
}

// void mgl_show_frame(mglBase * gr, int i)
static int _bind_mgl_show_frame(lua_State *L) {
	if (!_lg_typecheck_mgl_show_frame(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_show_frame(mglBase * gr, int i) function, expected prototype:\nvoid mgl_show_frame(mglBase * gr, int i)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int i=(int)lua_tointeger(L,2);

	mgl_show_frame(gr, i);

	return 0;
}

// void mgl_show_frame_(uintptr_t * gr, int * i)
static int _bind_mgl_show_frame_(lua_State *L) {
	if (!_lg_typecheck_mgl_show_frame_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_show_frame_(uintptr_t * gr, int * i) function, expected prototype:\nvoid mgl_show_frame_(uintptr_t * gr, int * i)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int i=(int)lua_tointeger(L,2);

	mgl_show_frame_(gr, &i);

	return 0;
}

// void mgl_del_frame(mglBase * gr, int i)
static int _bind_mgl_del_frame(lua_State *L) {
	if (!_lg_typecheck_mgl_del_frame(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_del_frame(mglBase * gr, int i) function, expected prototype:\nvoid mgl_del_frame(mglBase * gr, int i)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int i=(int)lua_tointeger(L,2);

	mgl_del_frame(gr, i);

	return 0;
}

// void mgl_del_frame_(uintptr_t * gr, int * i)
static int _bind_mgl_del_frame_(lua_State *L) {
	if (!_lg_typecheck_mgl_del_frame_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_del_frame_(uintptr_t * gr, int * i) function, expected prototype:\nvoid mgl_del_frame_(uintptr_t * gr, int * i)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int i=(int)lua_tointeger(L,2);

	mgl_del_frame_(gr, &i);

	return 0;
}

// void mgl_set_transp_type(mglBase * gr, int type)
static int _bind_mgl_set_transp_type(lua_State *L) {
	if (!_lg_typecheck_mgl_set_transp_type(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_transp_type(mglBase * gr, int type) function, expected prototype:\nvoid mgl_set_transp_type(mglBase * gr, int type)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int type=(int)lua_tointeger(L,2);

	mgl_set_transp_type(gr, type);

	return 0;
}

// void mgl_set_transp_type_(uintptr_t * gr, int * type)
static int _bind_mgl_set_transp_type_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_transp_type_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_transp_type_(uintptr_t * gr, int * type) function, expected prototype:\nvoid mgl_set_transp_type_(uintptr_t * gr, int * type)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int type=(int)lua_tointeger(L,2);

	mgl_set_transp_type_(gr, &type);

	return 0;
}

// void mgl_set_alpha(mglBase * gr, int enable)
static int _bind_mgl_set_alpha(lua_State *L) {
	if (!_lg_typecheck_mgl_set_alpha(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_alpha(mglBase * gr, int enable) function, expected prototype:\nvoid mgl_set_alpha(mglBase * gr, int enable)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int enable=(int)lua_tointeger(L,2);

	mgl_set_alpha(gr, enable);

	return 0;
}

// void mgl_set_alpha_(uintptr_t * gr, int * enable)
static int _bind_mgl_set_alpha_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_alpha_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_alpha_(uintptr_t * gr, int * enable) function, expected prototype:\nvoid mgl_set_alpha_(uintptr_t * gr, int * enable)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int enable=(int)lua_tointeger(L,2);

	mgl_set_alpha_(gr, &enable);

	return 0;
}

// void mgl_set_fog(mglBase * gr, double d, double dz)
static int _bind_mgl_set_fog(lua_State *L) {
	if (!_lg_typecheck_mgl_set_fog(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_fog(mglBase * gr, double d, double dz) function, expected prototype:\nvoid mgl_set_fog(mglBase * gr, double d, double dz)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double d=(double)lua_tonumber(L,2);
	double dz=(double)lua_tonumber(L,3);

	mgl_set_fog(gr, d, dz);

	return 0;
}

// void mgl_set_fog_(uintptr_t * gr, double * dist, double * dz)
static int _bind_mgl_set_fog_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_fog_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_fog_(uintptr_t * gr, double * dist, double * dz) function, expected prototype:\nvoid mgl_set_fog_(uintptr_t * gr, double * dist, double * dz)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double dist=(double)lua_tonumber(L,2);
	double dz=(double)lua_tonumber(L,3);

	mgl_set_fog_(gr, &dist, &dz);

	return 0;
}

// void mgl_set_light(mglBase * gr, int enable)
static int _bind_mgl_set_light(lua_State *L) {
	if (!_lg_typecheck_mgl_set_light(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_light(mglBase * gr, int enable) function, expected prototype:\nvoid mgl_set_light(mglBase * gr, int enable)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int enable=(int)lua_tointeger(L,2);

	mgl_set_light(gr, enable);

	return 0;
}

// void mgl_set_light_(uintptr_t * gr, int * enable)
static int _bind_mgl_set_light_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_light_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_light_(uintptr_t * gr, int * enable) function, expected prototype:\nvoid mgl_set_light_(uintptr_t * gr, int * enable)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int enable=(int)lua_tointeger(L,2);

	mgl_set_light_(gr, &enable);

	return 0;
}

// void mgl_set_light_n(mglBase * gr, int n, int enable)
static int _bind_mgl_set_light_n(lua_State *L) {
	if (!_lg_typecheck_mgl_set_light_n(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_light_n(mglBase * gr, int n, int enable) function, expected prototype:\nvoid mgl_set_light_n(mglBase * gr, int n, int enable)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int n=(int)lua_tointeger(L,2);
	int enable=(int)lua_tointeger(L,3);

	mgl_set_light_n(gr, n, enable);

	return 0;
}

// void mgl_set_light_n_(uintptr_t * gr, int * n, int * enable)
static int _bind_mgl_set_light_n_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_light_n_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_light_n_(uintptr_t * gr, int * n, int * enable) function, expected prototype:\nvoid mgl_set_light_n_(uintptr_t * gr, int * n, int * enable)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int n=(int)lua_tointeger(L,2);
	int enable=(int)lua_tointeger(L,3);

	mgl_set_light_n_(gr, &n, &enable);

	return 0;
}

// void mgl_add_light(mglBase * gr, int n, double x, double y, double z)
static int _bind_mgl_add_light(lua_State *L) {
	if (!_lg_typecheck_mgl_add_light(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_add_light(mglBase * gr, int n, double x, double y, double z) function, expected prototype:\nvoid mgl_add_light(mglBase * gr, int n, double x, double y, double z)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int n=(int)lua_tointeger(L,2);
	double x=(double)lua_tonumber(L,3);
	double y=(double)lua_tonumber(L,4);
	double z=(double)lua_tonumber(L,5);

	mgl_add_light(gr, n, x, y, z);

	return 0;
}

// void mgl_add_light_(uintptr_t * gr, int * n, double * x, double * y, double * z)
static int _bind_mgl_add_light_(lua_State *L) {
	if (!_lg_typecheck_mgl_add_light_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_add_light_(uintptr_t * gr, int * n, double * x, double * y, double * z) function, expected prototype:\nvoid mgl_add_light_(uintptr_t * gr, int * n, double * x, double * y, double * z)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int n=(int)lua_tointeger(L,2);
	double x=(double)lua_tonumber(L,3);
	double y=(double)lua_tonumber(L,4);
	double z=(double)lua_tonumber(L,5);

	mgl_add_light_(gr, &n, &x, &y, &z);

	return 0;
}

// void mgl_add_light_ext(mglBase * gr, int n, double x, double y, double z, char c, double br, double ap)
static int _bind_mgl_add_light_ext(lua_State *L) {
	if (!_lg_typecheck_mgl_add_light_ext(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_add_light_ext(mglBase * gr, int n, double x, double y, double z, char c, double br, double ap) function, expected prototype:\nvoid mgl_add_light_ext(mglBase * gr, int n, double x, double y, double z, char c, double br, double ap)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int n=(int)lua_tointeger(L,2);
	double x=(double)lua_tonumber(L,3);
	double y=(double)lua_tonumber(L,4);
	double z=(double)lua_tonumber(L,5);
	char c=(char)lua_tointeger(L,6);
	double br=(double)lua_tonumber(L,7);
	double ap=(double)lua_tonumber(L,8);

	mgl_add_light_ext(gr, n, x, y, z, c, br, ap);

	return 0;
}

// void mgl_add_light_ext_(uintptr_t * gr, int * n, double * x, double * y, double * z, char * c, double * br, double * ap, int arg9)
static int _bind_mgl_add_light_ext_(lua_State *L) {
	if (!_lg_typecheck_mgl_add_light_ext_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_add_light_ext_(uintptr_t * gr, int * n, double * x, double * y, double * z, char * c, double * br, double * ap, int arg9) function, expected prototype:\nvoid mgl_add_light_ext_(uintptr_t * gr, int * n, double * x, double * y, double * z, char * c, double * br, double * ap, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int n=(int)lua_tointeger(L,2);
	double x=(double)lua_tonumber(L,3);
	double y=(double)lua_tonumber(L,4);
	double z=(double)lua_tonumber(L,5);
	char c=(char)lua_tointeger(L,6);
	double br=(double)lua_tonumber(L,7);
	double ap=(double)lua_tonumber(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_add_light_ext_(gr, &n, &x, &y, &z, &c, &br, &ap, _arg9);

	return 0;
}

// void mgl_add_light_loc(mglBase * gr, int n, double x, double y, double z, double dx, double dy, double dz, char c, double br, double ap)
static int _bind_mgl_add_light_loc(lua_State *L) {
	if (!_lg_typecheck_mgl_add_light_loc(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_add_light_loc(mglBase * gr, int n, double x, double y, double z, double dx, double dy, double dz, char c, double br, double ap) function, expected prototype:\nvoid mgl_add_light_loc(mglBase * gr, int n, double x, double y, double z, double dx, double dy, double dz, char c, double br, double ap)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int n=(int)lua_tointeger(L,2);
	double x=(double)lua_tonumber(L,3);
	double y=(double)lua_tonumber(L,4);
	double z=(double)lua_tonumber(L,5);
	double dx=(double)lua_tonumber(L,6);
	double dy=(double)lua_tonumber(L,7);
	double dz=(double)lua_tonumber(L,8);
	char c=(char)lua_tointeger(L,9);
	double br=(double)lua_tonumber(L,10);
	double ap=(double)lua_tonumber(L,11);

	mgl_add_light_loc(gr, n, x, y, z, dx, dy, dz, c, br, ap);

	return 0;
}

// void mgl_add_light_loc_(uintptr_t * gr, int * n, double * x, double * y, double * z, double * dx, double * dy, double * dz, char * c, double * br, double * ap, int arg12)
static int _bind_mgl_add_light_loc_(lua_State *L) {
	if (!_lg_typecheck_mgl_add_light_loc_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_add_light_loc_(uintptr_t * gr, int * n, double * x, double * y, double * z, double * dx, double * dy, double * dz, char * c, double * br, double * ap, int arg12) function, expected prototype:\nvoid mgl_add_light_loc_(uintptr_t * gr, int * n, double * x, double * y, double * z, double * dx, double * dy, double * dz, char * c, double * br, double * ap, int arg12)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int n=(int)lua_tointeger(L,2);
	double x=(double)lua_tonumber(L,3);
	double y=(double)lua_tonumber(L,4);
	double z=(double)lua_tonumber(L,5);
	double dx=(double)lua_tonumber(L,6);
	double dy=(double)lua_tonumber(L,7);
	double dz=(double)lua_tonumber(L,8);
	char c=(char)lua_tointeger(L,9);
	double br=(double)lua_tonumber(L,10);
	double ap=(double)lua_tonumber(L,11);
	int _arg12=(int)lua_tointeger(L,12);

	mgl_add_light_loc_(gr, &n, &x, &y, &z, &dx, &dy, &dz, &c, &br, &ap, _arg12);

	return 0;
}

// void mgl_mat_pop(mglBase * gr)
static int _bind_mgl_mat_pop(lua_State *L) {
	if (!_lg_typecheck_mgl_mat_pop(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mat_pop(mglBase * gr) function, expected prototype:\nvoid mgl_mat_pop(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_mat_pop(gr);

	return 0;
}

// void mgl_mat_pop_(uintptr_t * gr)
static int _bind_mgl_mat_pop_(lua_State *L) {
	if (!_lg_typecheck_mgl_mat_pop_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mat_pop_(uintptr_t * gr) function, expected prototype:\nvoid mgl_mat_pop_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_mat_pop_(gr);

	return 0;
}

// void mgl_mat_push(mglBase * gr)
static int _bind_mgl_mat_push(lua_State *L) {
	if (!_lg_typecheck_mgl_mat_push(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mat_push(mglBase * gr) function, expected prototype:\nvoid mgl_mat_push(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_mat_push(gr);

	return 0;
}

// void mgl_mat_push_(uintptr_t * gr)
static int _bind_mgl_mat_push_(lua_State *L) {
	if (!_lg_typecheck_mgl_mat_push_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mat_push_(uintptr_t * gr) function, expected prototype:\nvoid mgl_mat_push_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_mat_push_(gr);

	return 0;
}

// void mgl_clf(mglBase * gr)
static int _bind_mgl_clf(lua_State *L) {
	if (!_lg_typecheck_mgl_clf(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_clf(mglBase * gr) function, expected prototype:\nvoid mgl_clf(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_clf(gr);

	return 0;
}

// void mgl_clf_(uintptr_t * gr)
static int _bind_mgl_clf_(lua_State *L) {
	if (!_lg_typecheck_mgl_clf_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_clf_(uintptr_t * gr) function, expected prototype:\nvoid mgl_clf_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_clf_(gr);

	return 0;
}

// void mgl_clf_rgb(mglBase * gr, double r, double g, double b)
static int _bind_mgl_clf_rgb(lua_State *L) {
	if (!_lg_typecheck_mgl_clf_rgb(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_clf_rgb(mglBase * gr, double r, double g, double b) function, expected prototype:\nvoid mgl_clf_rgb(mglBase * gr, double r, double g, double b)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double r=(double)lua_tonumber(L,2);
	double g=(double)lua_tonumber(L,3);
	double b=(double)lua_tonumber(L,4);

	mgl_clf_rgb(gr, r, g, b);

	return 0;
}

// void mgl_clf_rgb_(uintptr_t * gr, double * r, double * g, double * b)
static int _bind_mgl_clf_rgb_(lua_State *L) {
	if (!_lg_typecheck_mgl_clf_rgb_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_clf_rgb_(uintptr_t * gr, double * r, double * g, double * b) function, expected prototype:\nvoid mgl_clf_rgb_(uintptr_t * gr, double * r, double * g, double * b)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double r=(double)lua_tonumber(L,2);
	double g=(double)lua_tonumber(L,3);
	double b=(double)lua_tonumber(L,4);

	mgl_clf_rgb_(gr, &r, &g, &b);

	return 0;
}

// void mgl_subplot(mglBase * gr, int nx, int ny, int m, const char * style)
static int _bind_mgl_subplot(lua_State *L) {
	if (!_lg_typecheck_mgl_subplot(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_subplot(mglBase * gr, int nx, int ny, int m, const char * style) function, expected prototype:\nvoid mgl_subplot(mglBase * gr, int nx, int ny, int m, const char * style)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int nx=(int)lua_tointeger(L,2);
	int ny=(int)lua_tointeger(L,3);
	int m=(int)lua_tointeger(L,4);
	const char * style=(const char *)lua_tostring(L,5);

	mgl_subplot(gr, nx, ny, m, style);

	return 0;
}

// void mgl_subplot_(uintptr_t * gr, int * nx, int * ny, int * m, const char * s, int arg6)
static int _bind_mgl_subplot_(lua_State *L) {
	if (!_lg_typecheck_mgl_subplot_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_subplot_(uintptr_t * gr, int * nx, int * ny, int * m, const char * s, int arg6) function, expected prototype:\nvoid mgl_subplot_(uintptr_t * gr, int * nx, int * ny, int * m, const char * s, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int nx=(int)lua_tointeger(L,2);
	int ny=(int)lua_tointeger(L,3);
	int m=(int)lua_tointeger(L,4);
	const char * s=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_subplot_(gr, &nx, &ny, &m, s, _arg6);

	return 0;
}

// void mgl_multiplot(mglBase * gr, int nx, int ny, int m, int dx, int dy, const char * style)
static int _bind_mgl_multiplot(lua_State *L) {
	if (!_lg_typecheck_mgl_multiplot(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_multiplot(mglBase * gr, int nx, int ny, int m, int dx, int dy, const char * style) function, expected prototype:\nvoid mgl_multiplot(mglBase * gr, int nx, int ny, int m, int dx, int dy, const char * style)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int nx=(int)lua_tointeger(L,2);
	int ny=(int)lua_tointeger(L,3);
	int m=(int)lua_tointeger(L,4);
	int dx=(int)lua_tointeger(L,5);
	int dy=(int)lua_tointeger(L,6);
	const char * style=(const char *)lua_tostring(L,7);

	mgl_multiplot(gr, nx, ny, m, dx, dy, style);

	return 0;
}

// void mgl_multiplot_(uintptr_t * gr, int * nx, int * ny, int * m, int * dx, int * dy, const char * s, int arg8)
static int _bind_mgl_multiplot_(lua_State *L) {
	if (!_lg_typecheck_mgl_multiplot_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_multiplot_(uintptr_t * gr, int * nx, int * ny, int * m, int * dx, int * dy, const char * s, int arg8) function, expected prototype:\nvoid mgl_multiplot_(uintptr_t * gr, int * nx, int * ny, int * m, int * dx, int * dy, const char * s, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int nx=(int)lua_tointeger(L,2);
	int ny=(int)lua_tointeger(L,3);
	int m=(int)lua_tointeger(L,4);
	int dx=(int)lua_tointeger(L,5);
	int dy=(int)lua_tointeger(L,6);
	const char * s=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_multiplot_(gr, &nx, &ny, &m, &dx, &dy, s, _arg8);

	return 0;
}

// void mgl_inplot(mglBase * gr, double x1, double x2, double y1, double y2)
static int _bind_mgl_inplot(lua_State *L) {
	if (!_lg_typecheck_mgl_inplot(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_inplot(mglBase * gr, double x1, double x2, double y1, double y2) function, expected prototype:\nvoid mgl_inplot(mglBase * gr, double x1, double x2, double y1, double y2)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double x2=(double)lua_tonumber(L,3);
	double y1=(double)lua_tonumber(L,4);
	double y2=(double)lua_tonumber(L,5);

	mgl_inplot(gr, x1, x2, y1, y2);

	return 0;
}

// void mgl_inplot_(uintptr_t * gr, double * x1, double * x2, double * y1, double * y2)
static int _bind_mgl_inplot_(lua_State *L) {
	if (!_lg_typecheck_mgl_inplot_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_inplot_(uintptr_t * gr, double * x1, double * x2, double * y1, double * y2) function, expected prototype:\nvoid mgl_inplot_(uintptr_t * gr, double * x1, double * x2, double * y1, double * y2)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double x2=(double)lua_tonumber(L,3);
	double y1=(double)lua_tonumber(L,4);
	double y2=(double)lua_tonumber(L,5);

	mgl_inplot_(gr, &x1, &x2, &y1, &y2);

	return 0;
}

// void mgl_relplot(mglBase * gr, double x1, double x2, double y1, double y2)
static int _bind_mgl_relplot(lua_State *L) {
	if (!_lg_typecheck_mgl_relplot(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_relplot(mglBase * gr, double x1, double x2, double y1, double y2) function, expected prototype:\nvoid mgl_relplot(mglBase * gr, double x1, double x2, double y1, double y2)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double x2=(double)lua_tonumber(L,3);
	double y1=(double)lua_tonumber(L,4);
	double y2=(double)lua_tonumber(L,5);

	mgl_relplot(gr, x1, x2, y1, y2);

	return 0;
}

// void mgl_relplot_(uintptr_t * gr, double * x1, double * x2, double * y1, double * y2)
static int _bind_mgl_relplot_(lua_State *L) {
	if (!_lg_typecheck_mgl_relplot_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_relplot_(uintptr_t * gr, double * x1, double * x2, double * y1, double * y2) function, expected prototype:\nvoid mgl_relplot_(uintptr_t * gr, double * x1, double * x2, double * y1, double * y2)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double x2=(double)lua_tonumber(L,3);
	double y1=(double)lua_tonumber(L,4);
	double y2=(double)lua_tonumber(L,5);

	mgl_relplot_(gr, &x1, &x2, &y1, &y2);

	return 0;
}

// void mgl_columnplot(mglBase * gr, int num, int ind, double d)
static int _bind_mgl_columnplot(lua_State *L) {
	if (!_lg_typecheck_mgl_columnplot(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_columnplot(mglBase * gr, int num, int ind, double d) function, expected prototype:\nvoid mgl_columnplot(mglBase * gr, int num, int ind, double d)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int num=(int)lua_tointeger(L,2);
	int ind=(int)lua_tointeger(L,3);
	double d=(double)lua_tonumber(L,4);

	mgl_columnplot(gr, num, ind, d);

	return 0;
}

// void mgl_columnplot_(uintptr_t * gr, int * num, int * i, double * d)
static int _bind_mgl_columnplot_(lua_State *L) {
	if (!_lg_typecheck_mgl_columnplot_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_columnplot_(uintptr_t * gr, int * num, int * i, double * d) function, expected prototype:\nvoid mgl_columnplot_(uintptr_t * gr, int * num, int * i, double * d)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int num=(int)lua_tointeger(L,2);
	int i=(int)lua_tointeger(L,3);
	double d=(double)lua_tonumber(L,4);

	mgl_columnplot_(gr, &num, &i, &d);

	return 0;
}

// void mgl_stickplot(mglBase * gr, int num, int ind, double tet, double phi)
static int _bind_mgl_stickplot(lua_State *L) {
	if (!_lg_typecheck_mgl_stickplot(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_stickplot(mglBase * gr, int num, int ind, double tet, double phi) function, expected prototype:\nvoid mgl_stickplot(mglBase * gr, int num, int ind, double tet, double phi)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int num=(int)lua_tointeger(L,2);
	int ind=(int)lua_tointeger(L,3);
	double tet=(double)lua_tonumber(L,4);
	double phi=(double)lua_tonumber(L,5);

	mgl_stickplot(gr, num, ind, tet, phi);

	return 0;
}

// void mgl_stickplot_(uintptr_t * gr, int * num, int * i, double * tet, double * phi)
static int _bind_mgl_stickplot_(lua_State *L) {
	if (!_lg_typecheck_mgl_stickplot_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_stickplot_(uintptr_t * gr, int * num, int * i, double * tet, double * phi) function, expected prototype:\nvoid mgl_stickplot_(uintptr_t * gr, int * num, int * i, double * tet, double * phi)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int num=(int)lua_tointeger(L,2);
	int i=(int)lua_tointeger(L,3);
	double tet=(double)lua_tonumber(L,4);
	double phi=(double)lua_tonumber(L,5);

	mgl_stickplot_(gr, &num, &i, &tet, &phi);

	return 0;
}

// void mgl_title(mglBase * gr, const char * title, const char * stl, double size)
static int _bind_mgl_title(lua_State *L) {
	if (!_lg_typecheck_mgl_title(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_title(mglBase * gr, const char * title, const char * stl, double size) function, expected prototype:\nvoid mgl_title(mglBase * gr, const char * title, const char * stl, double size)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * title=(const char *)lua_tostring(L,2);
	const char * stl=(const char *)lua_tostring(L,3);
	double size=(double)lua_tonumber(L,4);

	mgl_title(gr, title, stl, size);

	return 0;
}

// void mgl_title_(uintptr_t * gr, const char * title, const char * stl, double * size, int arg5, int arg6)
static int _bind_mgl_title_(lua_State *L) {
	if (!_lg_typecheck_mgl_title_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_title_(uintptr_t * gr, const char * title, const char * stl, double * size, int arg5, int arg6) function, expected prototype:\nvoid mgl_title_(uintptr_t * gr, const char * title, const char * stl, double * size, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * title=(const char *)lua_tostring(L,2);
	const char * stl=(const char *)lua_tostring(L,3);
	double size=(double)lua_tonumber(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_title_(gr, title, stl, &size, _arg5, _arg6);

	return 0;
}

// void mgl_set_plotfactor(mglBase * gr, double val)
static int _bind_mgl_set_plotfactor(lua_State *L) {
	if (!_lg_typecheck_mgl_set_plotfactor(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_plotfactor(mglBase * gr, double val) function, expected prototype:\nvoid mgl_set_plotfactor(mglBase * gr, double val)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double val=(double)lua_tonumber(L,2);

	mgl_set_plotfactor(gr, val);

	return 0;
}

// void mgl_set_plotfactor_(uintptr_t * gr, double * val)
static int _bind_mgl_set_plotfactor_(lua_State *L) {
	if (!_lg_typecheck_mgl_set_plotfactor_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_plotfactor_(uintptr_t * gr, double * val) function, expected prototype:\nvoid mgl_set_plotfactor_(uintptr_t * gr, double * val)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double val=(double)lua_tonumber(L,2);

	mgl_set_plotfactor_(gr, &val);

	return 0;
}

// void mgl_aspect(mglBase * gr, double Ax, double Ay, double Az)
static int _bind_mgl_aspect(lua_State *L) {
	if (!_lg_typecheck_mgl_aspect(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_aspect(mglBase * gr, double Ax, double Ay, double Az) function, expected prototype:\nvoid mgl_aspect(mglBase * gr, double Ax, double Ay, double Az)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double Ax=(double)lua_tonumber(L,2);
	double Ay=(double)lua_tonumber(L,3);
	double Az=(double)lua_tonumber(L,4);

	mgl_aspect(gr, Ax, Ay, Az);

	return 0;
}

// void mgl_aspect_(uintptr_t * gr, double * Ax, double * Ay, double * Az)
static int _bind_mgl_aspect_(lua_State *L) {
	if (!_lg_typecheck_mgl_aspect_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_aspect_(uintptr_t * gr, double * Ax, double * Ay, double * Az) function, expected prototype:\nvoid mgl_aspect_(uintptr_t * gr, double * Ax, double * Ay, double * Az)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double Ax=(double)lua_tonumber(L,2);
	double Ay=(double)lua_tonumber(L,3);
	double Az=(double)lua_tonumber(L,4);

	mgl_aspect_(gr, &Ax, &Ay, &Az);

	return 0;
}

// void mgl_rotate(mglBase * gr, double TetX, double TetZ, double TetY)
static int _bind_mgl_rotate(lua_State *L) {
	if (!_lg_typecheck_mgl_rotate(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_rotate(mglBase * gr, double TetX, double TetZ, double TetY) function, expected prototype:\nvoid mgl_rotate(mglBase * gr, double TetX, double TetZ, double TetY)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double TetX=(double)lua_tonumber(L,2);
	double TetZ=(double)lua_tonumber(L,3);
	double TetY=(double)lua_tonumber(L,4);

	mgl_rotate(gr, TetX, TetZ, TetY);

	return 0;
}

// void mgl_rotate_(uintptr_t * gr, double * TetX, double * TetZ, double * TetY)
static int _bind_mgl_rotate_(lua_State *L) {
	if (!_lg_typecheck_mgl_rotate_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_rotate_(uintptr_t * gr, double * TetX, double * TetZ, double * TetY) function, expected prototype:\nvoid mgl_rotate_(uintptr_t * gr, double * TetX, double * TetZ, double * TetY)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double TetX=(double)lua_tonumber(L,2);
	double TetZ=(double)lua_tonumber(L,3);
	double TetY=(double)lua_tonumber(L,4);

	mgl_rotate_(gr, &TetX, &TetZ, &TetY);

	return 0;
}

// void mgl_rotate_vector(mglBase * gr, double Tet, double x, double y, double z)
static int _bind_mgl_rotate_vector(lua_State *L) {
	if (!_lg_typecheck_mgl_rotate_vector(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_rotate_vector(mglBase * gr, double Tet, double x, double y, double z) function, expected prototype:\nvoid mgl_rotate_vector(mglBase * gr, double Tet, double x, double y, double z)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double Tet=(double)lua_tonumber(L,2);
	double x=(double)lua_tonumber(L,3);
	double y=(double)lua_tonumber(L,4);
	double z=(double)lua_tonumber(L,5);

	mgl_rotate_vector(gr, Tet, x, y, z);

	return 0;
}

// void mgl_rotate_vector_(uintptr_t * gr, double * Tet, double * x, double * y, double * z)
static int _bind_mgl_rotate_vector_(lua_State *L) {
	if (!_lg_typecheck_mgl_rotate_vector_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_rotate_vector_(uintptr_t * gr, double * Tet, double * x, double * y, double * z) function, expected prototype:\nvoid mgl_rotate_vector_(uintptr_t * gr, double * Tet, double * x, double * y, double * z)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double Tet=(double)lua_tonumber(L,2);
	double x=(double)lua_tonumber(L,3);
	double y=(double)lua_tonumber(L,4);
	double z=(double)lua_tonumber(L,5);

	mgl_rotate_vector_(gr, &Tet, &x, &y, &z);

	return 0;
}

// void mgl_perspective(mglBase * gr, double val)
static int _bind_mgl_perspective(lua_State *L) {
	if (!_lg_typecheck_mgl_perspective(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_perspective(mglBase * gr, double val) function, expected prototype:\nvoid mgl_perspective(mglBase * gr, double val)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double val=(double)lua_tonumber(L,2);

	mgl_perspective(gr, val);

	return 0;
}

// void mgl_perspective_(uintptr_t * gr, double val)
static int _bind_mgl_perspective_(lua_State *L) {
	if (!_lg_typecheck_mgl_perspective_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_perspective_(uintptr_t * gr, double val) function, expected prototype:\nvoid mgl_perspective_(uintptr_t * gr, double val)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double val=(double)lua_tonumber(L,2);

	mgl_perspective_(gr, val);

	return 0;
}

// void mgl_view(mglBase * gr, double TetX, double TetZ, double TetY)
static int _bind_mgl_view(lua_State *L) {
	if (!_lg_typecheck_mgl_view(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_view(mglBase * gr, double TetX, double TetZ, double TetY) function, expected prototype:\nvoid mgl_view(mglBase * gr, double TetX, double TetZ, double TetY)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double TetX=(double)lua_tonumber(L,2);
	double TetZ=(double)lua_tonumber(L,3);
	double TetY=(double)lua_tonumber(L,4);

	mgl_view(gr, TetX, TetZ, TetY);

	return 0;
}

// void mgl_view_(uintptr_t * gr, double * TetX, double * TetZ, double * TetY)
static int _bind_mgl_view_(lua_State *L) {
	if (!_lg_typecheck_mgl_view_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_view_(uintptr_t * gr, double * TetX, double * TetZ, double * TetY) function, expected prototype:\nvoid mgl_view_(uintptr_t * gr, double * TetX, double * TetZ, double * TetY)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double TetX=(double)lua_tonumber(L,2);
	double TetZ=(double)lua_tonumber(L,3);
	double TetY=(double)lua_tonumber(L,4);

	mgl_view_(gr, &TetX, &TetZ, &TetY);

	return 0;
}

// void mgl_zoom(mglBase * gr, double x1, double y1, double x2, double y2)
static int _bind_mgl_zoom(lua_State *L) {
	if (!_lg_typecheck_mgl_zoom(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_zoom(mglBase * gr, double x1, double y1, double x2, double y2) function, expected prototype:\nvoid mgl_zoom(mglBase * gr, double x1, double y1, double x2, double y2)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double x2=(double)lua_tonumber(L,4);
	double y2=(double)lua_tonumber(L,5);

	mgl_zoom(gr, x1, y1, x2, y2);

	return 0;
}

// void mgl_zoom_(uintptr_t * gr, double * x1, double * y1, double * x2, double * y2)
static int _bind_mgl_zoom_(lua_State *L) {
	if (!_lg_typecheck_mgl_zoom_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_zoom_(uintptr_t * gr, double * x1, double * y1, double * x2, double * y2) function, expected prototype:\nvoid mgl_zoom_(uintptr_t * gr, double * x1, double * y1, double * x2, double * y2)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double x2=(double)lua_tonumber(L,4);
	double y2=(double)lua_tonumber(L,5);

	mgl_zoom_(gr, &x1, &y1, &x2, &y2);

	return 0;
}

// void mgl_mpi_send(mglBase * gr, int id)
static int _bind_mgl_mpi_send(lua_State *L) {
	if (!_lg_typecheck_mgl_mpi_send(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mpi_send(mglBase * gr, int id) function, expected prototype:\nvoid mgl_mpi_send(mglBase * gr, int id)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int id=(int)lua_tointeger(L,2);

	mgl_mpi_send(gr, id);

	return 0;
}

// void mgl_mpi_send_(uintptr_t * gr, int * id)
static int _bind_mgl_mpi_send_(lua_State *L) {
	if (!_lg_typecheck_mgl_mpi_send_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mpi_send_(uintptr_t * gr, int * id) function, expected prototype:\nvoid mgl_mpi_send_(uintptr_t * gr, int * id)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int id=(int)lua_tointeger(L,2);

	mgl_mpi_send_(gr, &id);

	return 0;
}

// void mgl_mpi_recv(mglBase * gr, int id)
static int _bind_mgl_mpi_recv(lua_State *L) {
	if (!_lg_typecheck_mgl_mpi_recv(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mpi_recv(mglBase * gr, int id) function, expected prototype:\nvoid mgl_mpi_recv(mglBase * gr, int id)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int id=(int)lua_tointeger(L,2);

	mgl_mpi_recv(gr, id);

	return 0;
}

// void mgl_mpi_recv_(uintptr_t * gr, int * id)
static int _bind_mgl_mpi_recv_(lua_State *L) {
	if (!_lg_typecheck_mgl_mpi_recv_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mpi_recv_(uintptr_t * gr, int * id) function, expected prototype:\nvoid mgl_mpi_recv_(uintptr_t * gr, int * id)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int id=(int)lua_tointeger(L,2);

	mgl_mpi_recv_(gr, &id);

	return 0;
}

// void mgl_draw_thr(void * arg1)
static int _bind_mgl_draw_thr(lua_State *L) {
	if (!_lg_typecheck_mgl_draw_thr(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_draw_thr(void * arg1) function, expected prototype:\nvoid mgl_draw_thr(void * arg1)\nClass arguments details:\n");
	}

	void* _arg1=(Luna< void >::check(L,1));

	mgl_draw_thr(_arg1);

	return 0;
}

// void mgl_wnd_set_delay(mglBase * gr, double dt)
static int _bind_mgl_wnd_set_delay(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_set_delay(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_set_delay(mglBase * gr, double dt) function, expected prototype:\nvoid mgl_wnd_set_delay(mglBase * gr, double dt)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double dt=(double)lua_tonumber(L,2);

	mgl_wnd_set_delay(gr, dt);

	return 0;
}

// void mgl_wnd_set_delay_(uintptr_t * gr, double * dt)
static int _bind_mgl_wnd_set_delay_(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_set_delay_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_set_delay_(uintptr_t * gr, double * dt) function, expected prototype:\nvoid mgl_wnd_set_delay_(uintptr_t * gr, double * dt)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double dt=(double)lua_tonumber(L,2);

	mgl_wnd_set_delay_(gr, &dt);

	return 0;
}

// void mgl_setup_window(mglBase * gr, int clf_upd, int showpos)
static int _bind_mgl_setup_window(lua_State *L) {
	if (!_lg_typecheck_mgl_setup_window(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_setup_window(mglBase * gr, int clf_upd, int showpos) function, expected prototype:\nvoid mgl_setup_window(mglBase * gr, int clf_upd, int showpos)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	int clf_upd=(int)lua_tointeger(L,2);
	int showpos=(int)lua_tointeger(L,3);

	mgl_setup_window(gr, clf_upd, showpos);

	return 0;
}

// void mgl_setup_window_(uintptr_t * gr, int * clf_upd, int * showpos)
static int _bind_mgl_setup_window_(lua_State *L) {
	if (!_lg_typecheck_mgl_setup_window_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_setup_window_(uintptr_t * gr, int * clf_upd, int * showpos) function, expected prototype:\nvoid mgl_setup_window_(uintptr_t * gr, int * clf_upd, int * showpos)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	int clf_upd=(int)lua_tointeger(L,2);
	int showpos=(int)lua_tointeger(L,3);

	mgl_setup_window_(gr, &clf_upd, &showpos);

	return 0;
}

// void mgl_wnd_toggle_alpha(mglBase * gr)
static int _bind_mgl_wnd_toggle_alpha(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_toggle_alpha(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_toggle_alpha(mglBase * gr) function, expected prototype:\nvoid mgl_wnd_toggle_alpha(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_wnd_toggle_alpha(gr);

	return 0;
}

// void mgl_wnd_toggle_alpha_(uintptr_t * gr)
static int _bind_mgl_wnd_toggle_alpha_(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_toggle_alpha_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_toggle_alpha_(uintptr_t * gr) function, expected prototype:\nvoid mgl_wnd_toggle_alpha_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_wnd_toggle_alpha_(gr);

	return 0;
}

// void mgl_wnd_toggle_light(mglBase * gr)
static int _bind_mgl_wnd_toggle_light(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_toggle_light(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_toggle_light(mglBase * gr) function, expected prototype:\nvoid mgl_wnd_toggle_light(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_wnd_toggle_light(gr);

	return 0;
}

// void mgl_wnd_toggle_light_(uintptr_t * gr)
static int _bind_mgl_wnd_toggle_light_(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_toggle_light_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_toggle_light_(uintptr_t * gr) function, expected prototype:\nvoid mgl_wnd_toggle_light_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_wnd_toggle_light_(gr);

	return 0;
}

// void mgl_wnd_toggle_zoom(mglBase * gr)
static int _bind_mgl_wnd_toggle_zoom(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_toggle_zoom(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_toggle_zoom(mglBase * gr) function, expected prototype:\nvoid mgl_wnd_toggle_zoom(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_wnd_toggle_zoom(gr);

	return 0;
}

// void mgl_wnd_toggle_zoom_(uintptr_t * gr)
static int _bind_mgl_wnd_toggle_zoom_(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_toggle_zoom_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_toggle_zoom_(uintptr_t * gr) function, expected prototype:\nvoid mgl_wnd_toggle_zoom_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_wnd_toggle_zoom_(gr);

	return 0;
}

// void mgl_wnd_toggle_rotate(mglBase * gr)
static int _bind_mgl_wnd_toggle_rotate(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_toggle_rotate(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_toggle_rotate(mglBase * gr) function, expected prototype:\nvoid mgl_wnd_toggle_rotate(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_wnd_toggle_rotate(gr);

	return 0;
}

// void mgl_wnd_toggle_rotate_(uintptr_t * gr)
static int _bind_mgl_wnd_toggle_rotate_(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_toggle_rotate_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_toggle_rotate_(uintptr_t * gr) function, expected prototype:\nvoid mgl_wnd_toggle_rotate_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_wnd_toggle_rotate_(gr);

	return 0;
}

// void mgl_wnd_toggle_no(mglBase * gr)
static int _bind_mgl_wnd_toggle_no(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_toggle_no(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_toggle_no(mglBase * gr) function, expected prototype:\nvoid mgl_wnd_toggle_no(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_wnd_toggle_no(gr);

	return 0;
}

// void mgl_wnd_toggle_no_(uintptr_t * gr)
static int _bind_mgl_wnd_toggle_no_(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_toggle_no_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_toggle_no_(uintptr_t * gr) function, expected prototype:\nvoid mgl_wnd_toggle_no_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_wnd_toggle_no_(gr);

	return 0;
}

// void mgl_wnd_update(mglBase * gr)
static int _bind_mgl_wnd_update(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_update(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_update(mglBase * gr) function, expected prototype:\nvoid mgl_wnd_update(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_wnd_update(gr);

	return 0;
}

// void mgl_wnd_update_(uintptr_t * gr)
static int _bind_mgl_wnd_update_(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_update_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_update_(uintptr_t * gr) function, expected prototype:\nvoid mgl_wnd_update_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_wnd_update_(gr);

	return 0;
}

// void mgl_wnd_reload(mglBase * gr)
static int _bind_mgl_wnd_reload(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_reload(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_reload(mglBase * gr) function, expected prototype:\nvoid mgl_wnd_reload(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_wnd_reload(gr);

	return 0;
}

// void mgl_wnd_reload_(uintptr_t * gr)
static int _bind_mgl_wnd_reload_(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_reload_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_reload_(uintptr_t * gr) function, expected prototype:\nvoid mgl_wnd_reload_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_wnd_reload_(gr);

	return 0;
}

// void mgl_wnd_adjust(mglBase * gr)
static int _bind_mgl_wnd_adjust(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_adjust(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_adjust(mglBase * gr) function, expected prototype:\nvoid mgl_wnd_adjust(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_wnd_adjust(gr);

	return 0;
}

// void mgl_wnd_adjust_(uintptr_t * gr)
static int _bind_mgl_wnd_adjust_(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_adjust_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_adjust_(uintptr_t * gr) function, expected prototype:\nvoid mgl_wnd_adjust_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_wnd_adjust_(gr);

	return 0;
}

// void mgl_wnd_next_frame(mglBase * gr)
static int _bind_mgl_wnd_next_frame(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_next_frame(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_next_frame(mglBase * gr) function, expected prototype:\nvoid mgl_wnd_next_frame(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_wnd_next_frame(gr);

	return 0;
}

// void mgl_wnd_next_frame_(uintptr_t * gr)
static int _bind_mgl_wnd_next_frame_(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_next_frame_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_next_frame_(uintptr_t * gr) function, expected prototype:\nvoid mgl_wnd_next_frame_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_wnd_next_frame_(gr);

	return 0;
}

// void mgl_wnd_prev_frame(mglBase * gr)
static int _bind_mgl_wnd_prev_frame(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_prev_frame(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_prev_frame(mglBase * gr) function, expected prototype:\nvoid mgl_wnd_prev_frame(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_wnd_prev_frame(gr);

	return 0;
}

// void mgl_wnd_prev_frame_(uintptr_t * gr)
static int _bind_mgl_wnd_prev_frame_(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_prev_frame_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_prev_frame_(uintptr_t * gr) function, expected prototype:\nvoid mgl_wnd_prev_frame_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_wnd_prev_frame_(gr);

	return 0;
}

// void mgl_wnd_animation(mglBase * gr)
static int _bind_mgl_wnd_animation(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_animation(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_animation(mglBase * gr) function, expected prototype:\nvoid mgl_wnd_animation(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	mgl_wnd_animation(gr);

	return 0;
}

// void mgl_wnd_animation_(uintptr_t * gr)
static int _bind_mgl_wnd_animation_(lua_State *L) {
	if (!_lg_typecheck_mgl_wnd_animation_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_wnd_animation_(uintptr_t * gr) function, expected prototype:\nvoid mgl_wnd_animation_(uintptr_t * gr)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));

	mgl_wnd_animation_(gr);

	return 0;
}

// void mgl_get_last_mouse_pos(mglBase * gr, double * x, double * y, double * z)
static int _bind_mgl_get_last_mouse_pos(lua_State *L) {
	if (!_lg_typecheck_mgl_get_last_mouse_pos(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_get_last_mouse_pos(mglBase * gr, double * x, double * y, double * z) function, expected prototype:\nvoid mgl_get_last_mouse_pos(mglBase * gr, double * x, double * y, double * z)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	mgl_get_last_mouse_pos(gr, &x, &y, &z);

	return 0;
}

// void mgl_get_last_mouse_pos_(uintptr_t * gr, double * x, double * y, double * z)
static int _bind_mgl_get_last_mouse_pos_(lua_State *L) {
	if (!_lg_typecheck_mgl_get_last_mouse_pos_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_get_last_mouse_pos_(uintptr_t * gr, double * x, double * y, double * z) function, expected prototype:\nvoid mgl_get_last_mouse_pos_(uintptr_t * gr, double * x, double * y, double * z)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	mgl_get_last_mouse_pos_(gr, &x, &y, &z);

	return 0;
}

// mglParser * mgl_create_parser()
static int _bind_mgl_create_parser(lua_State *L) {
	if (!_lg_typecheck_mgl_create_parser(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglParser * mgl_create_parser() function, expected prototype:\nmglParser * mgl_create_parser()\nClass arguments details:\n");
	}


	mglParser * lret = mgl_create_parser();
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglParser >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_create_parser_()
static int _bind_mgl_create_parser_(lua_State *L) {
	if (!_lg_typecheck_mgl_create_parser_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_create_parser_() function, expected prototype:\nuintptr_t mgl_create_parser_()\nClass arguments details:\n");
	}


	uintptr_t stack_lret = mgl_create_parser_();
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// long mgl_use_parser(mglParser * p, int inc)
static int _bind_mgl_use_parser(lua_State *L) {
	if (!_lg_typecheck_mgl_use_parser(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_use_parser(mglParser * p, int inc) function, expected prototype:\nlong mgl_use_parser(mglParser * p, int inc)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* p=(Luna< mglParser >::check(L,1));
	int inc=(int)lua_tointeger(L,2);

	long lret = mgl_use_parser(p, inc);
	lua_pushnumber(L,lret);

	return 1;
}

// long mgl_use_parser_(uintptr_t * arg1, int * inc)
static int _bind_mgl_use_parser_(lua_State *L) {
	if (!_lg_typecheck_mgl_use_parser_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_use_parser_(uintptr_t * arg1, int * inc) function, expected prototype:\nlong mgl_use_parser_(uintptr_t * arg1, int * inc)\nClass arguments details:\n");
	}

	uintptr_t* _arg1=(Luna< uintptr_t >::check(L,1));
	int inc=(int)lua_tointeger(L,2);

	long lret = mgl_use_parser_(_arg1, &inc);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_delete_parser(mglParser * p)
static int _bind_mgl_delete_parser(lua_State *L) {
	if (!_lg_typecheck_mgl_delete_parser(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_delete_parser(mglParser * p) function, expected prototype:\nvoid mgl_delete_parser(mglParser * p)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* p=(Luna< mglParser >::check(L,1));

	mgl_delete_parser(p);

	return 0;
}

// void mgl_delete_parser_(uintptr_t * p)
static int _bind_mgl_delete_parser_(lua_State *L) {
	if (!_lg_typecheck_mgl_delete_parser_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_delete_parser_(uintptr_t * p) function, expected prototype:\nvoid mgl_delete_parser_(uintptr_t * p)\nClass arguments details:\n");
	}

	uintptr_t* p=(Luna< uintptr_t >::check(L,1));

	mgl_delete_parser_(p);

	return 0;
}

// void mgl_parser_add_param(mglParser * p, int id, const char * str)
static int _bind_mgl_parser_add_param(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_add_param(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_parser_add_param(mglParser * p, int id, const char * str) function, expected prototype:\nvoid mgl_parser_add_param(mglParser * p, int id, const char * str)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* p=(Luna< mglParser >::check(L,1));
	int id=(int)lua_tointeger(L,2);
	const char * str=(const char *)lua_tostring(L,3);

	mgl_parser_add_param(p, id, str);

	return 0;
}

// void mgl_parser_add_param_(uintptr_t * p, int * id, const char * str, int arg4)
static int _bind_mgl_parser_add_param_(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_add_param_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_parser_add_param_(uintptr_t * p, int * id, const char * str, int arg4) function, expected prototype:\nvoid mgl_parser_add_param_(uintptr_t * p, int * id, const char * str, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* p=(Luna< uintptr_t >::check(L,1));
	int id=(int)lua_tointeger(L,2);
	const char * str=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_parser_add_param_(p, &id, str, _arg4);

	return 0;
}

// mglData * mgl_parser_add_var(mglParser * p, const char * name)
static int _bind_mgl_parser_add_var(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_add_var(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_parser_add_var(mglParser * p, const char * name) function, expected prototype:\nmglData * mgl_parser_add_var(mglParser * p, const char * name)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* p=(Luna< mglParser >::check(L,1));
	const char * name=(const char *)lua_tostring(L,2);

	mglData * lret = mgl_parser_add_var(p, name);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_parser_add_var_(uintptr_t * p, const char * name, int arg3)
static int _bind_mgl_parser_add_var_(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_add_var_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_parser_add_var_(uintptr_t * p, const char * name, int arg3) function, expected prototype:\nuintptr_t mgl_parser_add_var_(uintptr_t * p, const char * name, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* p=(Luna< uintptr_t >::check(L,1));
	const char * name=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	uintptr_t stack_lret = mgl_parser_add_var_(p, name, _arg3);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_parser_find_var(mglParser * p, const char * name)
static int _bind_mgl_parser_find_var(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_find_var(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_parser_find_var(mglParser * p, const char * name) function, expected prototype:\nmglData * mgl_parser_find_var(mglParser * p, const char * name)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* p=(Luna< mglParser >::check(L,1));
	const char * name=(const char *)lua_tostring(L,2);

	mglData * lret = mgl_parser_find_var(p, name);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_parser_find_var_(uintptr_t * p, const char * name, int arg3)
static int _bind_mgl_parser_find_var_(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_find_var_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_parser_find_var_(uintptr_t * p, const char * name, int arg3) function, expected prototype:\nuintptr_t mgl_parser_find_var_(uintptr_t * p, const char * name, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* p=(Luna< uintptr_t >::check(L,1));
	const char * name=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	uintptr_t stack_lret = mgl_parser_find_var_(p, name, _arg3);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// void mgl_parser_del_all(mglParser * p)
static int _bind_mgl_parser_del_all(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_del_all(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_parser_del_all(mglParser * p) function, expected prototype:\nvoid mgl_parser_del_all(mglParser * p)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* p=(Luna< mglParser >::check(L,1));

	mgl_parser_del_all(p);

	return 0;
}

// void mgl_parser_del_all_(uintptr_t * p)
static int _bind_mgl_parser_del_all_(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_del_all_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_parser_del_all_(uintptr_t * p) function, expected prototype:\nvoid mgl_parser_del_all_(uintptr_t * p)\nClass arguments details:\n");
	}

	uintptr_t* p=(Luna< uintptr_t >::check(L,1));

	mgl_parser_del_all_(p);

	return 0;
}

// int mgl_parse_line(mglBase * gr, mglParser * p, const char * str, int pos)
static int _bind_mgl_parse_line(lua_State *L) {
	if (!_lg_typecheck_mgl_parse_line(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_parse_line(mglBase * gr, mglParser * p, const char * str, int pos) function, expected prototype:\nint mgl_parse_line(mglBase * gr, mglParser * p, const char * str, int pos)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 51318766\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	mglParser* p=(Luna< mglParser >::check(L,2));
	const char * str=(const char *)lua_tostring(L,3);
	int pos=(int)lua_tointeger(L,4);

	int lret = mgl_parse_line(gr, p, str, pos);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_parse_line_(uintptr_t * gr, uintptr_t * p, const char * str, int * pos, int arg5)
static int _bind_mgl_parse_line_(lua_State *L) {
	if (!_lg_typecheck_mgl_parse_line_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_parse_line_(uintptr_t * gr, uintptr_t * p, const char * str, int * pos, int arg5) function, expected prototype:\nint mgl_parse_line_(uintptr_t * gr, uintptr_t * p, const char * str, int * pos, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* p=(Luna< uintptr_t >::check(L,2));
	const char * str=(const char *)lua_tostring(L,3);
	int pos=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	int lret = mgl_parse_line_(gr, p, str, &pos, _arg5);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_parse_text(mglBase * gr, mglParser * p, const char * str)
static int _bind_mgl_parse_text(lua_State *L) {
	if (!_lg_typecheck_mgl_parse_text(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_parse_text(mglBase * gr, mglParser * p, const char * str) function, expected prototype:\nvoid mgl_parse_text(mglBase * gr, mglParser * p, const char * str)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 51318766\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	mglParser* p=(Luna< mglParser >::check(L,2));
	const char * str=(const char *)lua_tostring(L,3);

	mgl_parse_text(gr, p, str);

	return 0;
}

// void mgl_parse_text_(uintptr_t * gr, uintptr_t * p, const char * str, int arg4)
static int _bind_mgl_parse_text_(lua_State *L) {
	if (!_lg_typecheck_mgl_parse_text_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_parse_text_(uintptr_t * gr, uintptr_t * p, const char * str, int arg4) function, expected prototype:\nvoid mgl_parse_text_(uintptr_t * gr, uintptr_t * p, const char * str, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* p=(Luna< uintptr_t >::check(L,2));
	const char * str=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_parse_text_(gr, p, str, _arg4);

	return 0;
}

// void mgl_parser_restore_once(mglParser * p)
static int _bind_mgl_parser_restore_once(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_restore_once(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_parser_restore_once(mglParser * p) function, expected prototype:\nvoid mgl_parser_restore_once(mglParser * p)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* p=(Luna< mglParser >::check(L,1));

	mgl_parser_restore_once(p);

	return 0;
}

// void mgl_parser_restore_once_(uintptr_t * p)
static int _bind_mgl_parser_restore_once_(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_restore_once_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_parser_restore_once_(uintptr_t * p) function, expected prototype:\nvoid mgl_parser_restore_once_(uintptr_t * p)\nClass arguments details:\n");
	}

	uintptr_t* p=(Luna< uintptr_t >::check(L,1));

	mgl_parser_restore_once_(p);

	return 0;
}

// void mgl_parser_allow_setsize(mglParser * p, int a)
static int _bind_mgl_parser_allow_setsize(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_allow_setsize(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_parser_allow_setsize(mglParser * p, int a) function, expected prototype:\nvoid mgl_parser_allow_setsize(mglParser * p, int a)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* p=(Luna< mglParser >::check(L,1));
	int a=(int)lua_tointeger(L,2);

	mgl_parser_allow_setsize(p, a);

	return 0;
}

// void mgl_parser_allow_setsize_(uintptr_t * p, int * a)
static int _bind_mgl_parser_allow_setsize_(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_allow_setsize_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_parser_allow_setsize_(uintptr_t * p, int * a) function, expected prototype:\nvoid mgl_parser_allow_setsize_(uintptr_t * p, int * a)\nClass arguments details:\n");
	}

	uintptr_t* p=(Luna< uintptr_t >::check(L,1));
	int a=(int)lua_tointeger(L,2);

	mgl_parser_allow_setsize_(p, &a);

	return 0;
}

// void mgl_parser_allow_file_io(mglParser * p, int a)
static int _bind_mgl_parser_allow_file_io(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_allow_file_io(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_parser_allow_file_io(mglParser * p, int a) function, expected prototype:\nvoid mgl_parser_allow_file_io(mglParser * p, int a)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* p=(Luna< mglParser >::check(L,1));
	int a=(int)lua_tointeger(L,2);

	mgl_parser_allow_file_io(p, a);

	return 0;
}

// void mgl_parser_allow_file_io_(uintptr_t * p, int * a)
static int _bind_mgl_parser_allow_file_io_(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_allow_file_io_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_parser_allow_file_io_(uintptr_t * p, int * a) function, expected prototype:\nvoid mgl_parser_allow_file_io_(uintptr_t * p, int * a)\nClass arguments details:\n");
	}

	uintptr_t* p=(Luna< uintptr_t >::check(L,1));
	int a=(int)lua_tointeger(L,2);

	mgl_parser_allow_file_io_(p, &a);

	return 0;
}

// void mgl_parser_stop(mglParser * p)
static int _bind_mgl_parser_stop(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_stop(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_parser_stop(mglParser * p) function, expected prototype:\nvoid mgl_parser_stop(mglParser * p)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* p=(Luna< mglParser >::check(L,1));

	mgl_parser_stop(p);

	return 0;
}

// void mgl_parser_stop_(uintptr_t * p)
static int _bind_mgl_parser_stop_(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_stop_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_parser_stop_(uintptr_t * p) function, expected prototype:\nvoid mgl_parser_stop_(uintptr_t * p)\nClass arguments details:\n");
	}

	uintptr_t* p=(Luna< uintptr_t >::check(L,1));

	mgl_parser_stop_(p);

	return 0;
}

// int mgl_parser_cmd_type(mglParser * pr, const char * name)
static int _bind_mgl_parser_cmd_type(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_cmd_type(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_parser_cmd_type(mglParser * pr, const char * name) function, expected prototype:\nint mgl_parser_cmd_type(mglParser * pr, const char * name)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* pr=(Luna< mglParser >::check(L,1));
	const char * name=(const char *)lua_tostring(L,2);

	int lret = mgl_parser_cmd_type(pr, name);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_parser_cmd_type_(uintptr_t * p, const char * name, int arg3)
static int _bind_mgl_parser_cmd_type_(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_cmd_type_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_parser_cmd_type_(uintptr_t * p, const char * name, int arg3) function, expected prototype:\nint mgl_parser_cmd_type_(uintptr_t * p, const char * name, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* p=(Luna< uintptr_t >::check(L,1));
	const char * name=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	int lret = mgl_parser_cmd_type_(p, name, _arg3);
	lua_pushnumber(L,lret);

	return 1;
}

// const char * mgl_parser_cmd_desc(mglParser * pr, const char * name)
static int _bind_mgl_parser_cmd_desc(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_cmd_desc(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in const char * mgl_parser_cmd_desc(mglParser * pr, const char * name) function, expected prototype:\nconst char * mgl_parser_cmd_desc(mglParser * pr, const char * name)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* pr=(Luna< mglParser >::check(L,1));
	const char * name=(const char *)lua_tostring(L,2);

	const char * lret = mgl_parser_cmd_desc(pr, name);
	lua_pushstring(L,lret);

	return 1;
}

// const char * mgl_parser_cmd_frmt(mglParser * pr, const char * name)
static int _bind_mgl_parser_cmd_frmt(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_cmd_frmt(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in const char * mgl_parser_cmd_frmt(mglParser * pr, const char * name) function, expected prototype:\nconst char * mgl_parser_cmd_frmt(mglParser * pr, const char * name)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* pr=(Luna< mglParser >::check(L,1));
	const char * name=(const char *)lua_tostring(L,2);

	const char * lret = mgl_parser_cmd_frmt(pr, name);
	lua_pushstring(L,lret);

	return 1;
}

// const char * mgl_parser_cmd_name(mglParser * pr, long id)
static int _bind_mgl_parser_cmd_name(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_cmd_name(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in const char * mgl_parser_cmd_name(mglParser * pr, long id) function, expected prototype:\nconst char * mgl_parser_cmd_name(mglParser * pr, long id)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* pr=(Luna< mglParser >::check(L,1));
	long id=(long)lua_tointeger(L,2);

	const char * lret = mgl_parser_cmd_name(pr, id);
	lua_pushstring(L,lret);

	return 1;
}

// long mgl_parser_cmd_num(mglParser * pr)
static int _bind_mgl_parser_cmd_num(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_cmd_num(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_parser_cmd_num(mglParser * pr) function, expected prototype:\nlong mgl_parser_cmd_num(mglParser * pr)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* pr=(Luna< mglParser >::check(L,1));

	long lret = mgl_parser_cmd_num(pr);
	lua_pushnumber(L,lret);

	return 1;
}

// mglData * mgl_parser_calc(mglParser * pr, const char * formula)
static int _bind_mgl_parser_calc(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_calc(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_parser_calc(mglParser * pr, const char * formula) function, expected prototype:\nmglData * mgl_parser_calc(mglParser * pr, const char * formula)\nClass arguments details:\narg 1 ID = 51318766\n");
	}

	mglParser* pr=(Luna< mglParser >::check(L,1));
	const char * formula=(const char *)lua_tostring(L,2);

	mglData * lret = mgl_parser_calc(pr, formula);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_parser_calc_(uintptr_t * pr, const char * formula, int arg3)
static int _bind_mgl_parser_calc_(lua_State *L) {
	if (!_lg_typecheck_mgl_parser_calc_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_parser_calc_(uintptr_t * pr, const char * formula, int arg3) function, expected prototype:\nuintptr_t mgl_parser_calc_(uintptr_t * pr, const char * formula, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* pr=(Luna< uintptr_t >::check(L,1));
	const char * formula=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	uintptr_t stack_lret = mgl_parser_calc_(pr, formula, _arg3);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglFormula * mgl_create_expr(const char * expr)
static int _bind_mgl_create_expr(lua_State *L) {
	if (!_lg_typecheck_mgl_create_expr(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglFormula * mgl_create_expr(const char * expr) function, expected prototype:\nmglFormula * mgl_create_expr(const char * expr)\nClass arguments details:\n");
	}

	const char * expr=(const char *)lua_tostring(L,1);

	mglFormula * lret = mgl_create_expr(expr);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglFormula >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_create_expr_(const char * expr, int arg2)
static int _bind_mgl_create_expr_(lua_State *L) {
	if (!_lg_typecheck_mgl_create_expr_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_create_expr_(const char * expr, int arg2) function, expected prototype:\nuintptr_t mgl_create_expr_(const char * expr, int arg2)\nClass arguments details:\n");
	}

	const char * expr=(const char *)lua_tostring(L,1);
	int _arg2=(int)lua_tointeger(L,2);

	uintptr_t stack_lret = mgl_create_expr_(expr, _arg2);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// void mgl_delete_expr(mglFormula * ex)
static int _bind_mgl_delete_expr(lua_State *L) {
	if (!_lg_typecheck_mgl_delete_expr(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_delete_expr(mglFormula * ex) function, expected prototype:\nvoid mgl_delete_expr(mglFormula * ex)\nClass arguments details:\narg 1 ID = 16490188\n");
	}

	mglFormula* ex=(Luna< mglFormula >::check(L,1));

	mgl_delete_expr(ex);

	return 0;
}

// void mgl_delete_expr_(uintptr_t * ex)
static int _bind_mgl_delete_expr_(lua_State *L) {
	if (!_lg_typecheck_mgl_delete_expr_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_delete_expr_(uintptr_t * ex) function, expected prototype:\nvoid mgl_delete_expr_(uintptr_t * ex)\nClass arguments details:\n");
	}

	uintptr_t* ex=(Luna< uintptr_t >::check(L,1));

	mgl_delete_expr_(ex);

	return 0;
}

// double mgl_expr_eval(mglFormula * ex, double x, double y, double z)
static int _bind_mgl_expr_eval(lua_State *L) {
	if (!_lg_typecheck_mgl_expr_eval(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_expr_eval(mglFormula * ex, double x, double y, double z) function, expected prototype:\ndouble mgl_expr_eval(mglFormula * ex, double x, double y, double z)\nClass arguments details:\narg 1 ID = 16490188\n");
	}

	mglFormula* ex=(Luna< mglFormula >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	double lret = mgl_expr_eval(ex, x, y, z);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_eval_expr_(uintptr_t * ex, double * x, double * y, double * z)
static int _bind_mgl_eval_expr_(lua_State *L) {
	if (!_lg_typecheck_mgl_eval_expr_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_eval_expr_(uintptr_t * ex, double * x, double * y, double * z) function, expected prototype:\ndouble mgl_eval_expr_(uintptr_t * ex, double * x, double * y, double * z)\nClass arguments details:\n");
	}

	uintptr_t* ex=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	double lret = mgl_eval_expr_(ex, &x, &y, &z);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_expr_eval_v(mglFormula * ex, double * var)
static int _bind_mgl_expr_eval_v(lua_State *L) {
	if (!_lg_typecheck_mgl_expr_eval_v(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_expr_eval_v(mglFormula * ex, double * var) function, expected prototype:\ndouble mgl_expr_eval_v(mglFormula * ex, double * var)\nClass arguments details:\narg 1 ID = 16490188\n");
	}

	mglFormula* ex=(Luna< mglFormula >::check(L,1));
	double var=(double)lua_tonumber(L,2);

	double lret = mgl_expr_eval_v(ex, &var);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_expr_diff(mglFormula * ex, char dir, double x, double y, double z)
static int _bind_mgl_expr_diff(lua_State *L) {
	if (!_lg_typecheck_mgl_expr_diff(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_expr_diff(mglFormula * ex, char dir, double x, double y, double z) function, expected prototype:\ndouble mgl_expr_diff(mglFormula * ex, char dir, double x, double y, double z)\nClass arguments details:\narg 1 ID = 16490188\n");
	}

	mglFormula* ex=(Luna< mglFormula >::check(L,1));
	char dir=(char)lua_tointeger(L,2);
	double x=(double)lua_tonumber(L,3);
	double y=(double)lua_tonumber(L,4);
	double z=(double)lua_tonumber(L,5);

	double lret = mgl_expr_diff(ex, dir, x, y, z);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_diff_expr_(uintptr_t * ex, const char * dir, double * x, double * y, double * z, int arg6)
static int _bind_mgl_diff_expr_(lua_State *L) {
	if (!_lg_typecheck_mgl_diff_expr_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_diff_expr_(uintptr_t * ex, const char * dir, double * x, double * y, double * z, int arg6) function, expected prototype:\ndouble mgl_diff_expr_(uintptr_t * ex, const char * dir, double * x, double * y, double * z, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* ex=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	double x=(double)lua_tonumber(L,3);
	double y=(double)lua_tonumber(L,4);
	double z=(double)lua_tonumber(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	double lret = mgl_diff_expr_(ex, dir, &x, &y, &z, _arg6);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_expr_diff_v(mglFormula * ex, char dir, double * var)
static int _bind_mgl_expr_diff_v(lua_State *L) {
	if (!_lg_typecheck_mgl_expr_diff_v(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_expr_diff_v(mglFormula * ex, char dir, double * var) function, expected prototype:\ndouble mgl_expr_diff_v(mglFormula * ex, char dir, double * var)\nClass arguments details:\narg 1 ID = 16490188\n");
	}

	mglFormula* ex=(Luna< mglFormula >::check(L,1));
	char dir=(char)lua_tointeger(L,2);
	double var=(double)lua_tonumber(L,3);

	double lret = mgl_expr_diff_v(ex, dir, &var);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_text_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * text, const char * font, const char * opt)
static int _bind_mgl_text_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_text_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_text_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * text, const char * font, const char * opt) function, expected prototype:\nvoid mgl_text_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * text, const char * font, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * text=(const char *)lua_tostring(L,5);
	const char * font=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_text_xyz(gr, x, y, z, text, font, opt);

	return 0;
}

// void mgl_text_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * text, const char * font, const char * opt, int arg8, int l, int n)
static int _bind_mgl_text_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_text_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_text_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * text, const char * font, const char * opt, int arg8, int l, int n) function, expected prototype:\nvoid mgl_text_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * text, const char * font, const char * opt, int arg8, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * text=(const char *)lua_tostring(L,5);
	const char * font=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int l=(int)lua_tointeger(L,9);
	int n=(int)lua_tointeger(L,10);

	mgl_text_xyz_(gr, x, y, z, text, font, opt, _arg8, l, n);

	return 0;
}

// void mgl_text_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const char * text, const char * font, const char * opt)
static int _bind_mgl_text_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_text_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_text_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const char * text, const char * font, const char * opt) function, expected prototype:\nvoid mgl_text_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const char * text, const char * font, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const char * text=(const char *)lua_tostring(L,4);
	const char * font=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_text_xy(gr, x, y, text, font, opt);

	return 0;
}

// void mgl_text_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, const char * text, const char * font, const char * opt, int arg7, int l, int n)
static int _bind_mgl_text_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_text_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_text_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, const char * text, const char * font, const char * opt, int arg7, int l, int n) function, expected prototype:\nvoid mgl_text_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, const char * text, const char * font, const char * opt, int arg7, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	const char * text=(const char *)lua_tostring(L,4);
	const char * font=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int l=(int)lua_tointeger(L,8);
	int n=(int)lua_tointeger(L,9);

	mgl_text_xy_(gr, x, y, text, font, opt, _arg7, l, n);

	return 0;
}

// void mgl_text_y(mglBase * gr, const mglDataA * y, const char * text, const char * font, const char * opt)
static int _bind_mgl_text_y(lua_State *L) {
	if (!_lg_typecheck_mgl_text_y(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_text_y(mglBase * gr, const mglDataA * y, const char * text, const char * font, const char * opt) function, expected prototype:\nvoid mgl_text_y(mglBase * gr, const mglDataA * y, const char * text, const char * font, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const char * text=(const char *)lua_tostring(L,3);
	const char * font=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_text_y(gr, y, text, font, opt);

	return 0;
}

// void mgl_text_y_(uintptr_t * gr, uintptr_t * y, const char * text, const char * font, const char * opt, int arg6, int l, int n)
static int _bind_mgl_text_y_(lua_State *L) {
	if (!_lg_typecheck_mgl_text_y_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_text_y_(uintptr_t * gr, uintptr_t * y, const char * text, const char * font, const char * opt, int arg6, int l, int n) function, expected prototype:\nvoid mgl_text_y_(uintptr_t * gr, uintptr_t * y, const char * text, const char * font, const char * opt, int arg6, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	const char * text=(const char *)lua_tostring(L,3);
	const char * font=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int l=(int)lua_tointeger(L,7);
	int n=(int)lua_tointeger(L,8);

	mgl_text_y_(gr, y, text, font, opt, _arg6, l, n);

	return 0;
}

// void mgl_cont_gen(mglBase * gr, double val, const mglDataA * a, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * stl)
static int _bind_mgl_cont_gen(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_gen(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_gen(mglBase * gr, double val, const mglDataA * a, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * stl) function, expected prototype:\nvoid mgl_cont_gen(mglBase * gr, double val, const mglDataA * a, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * stl)\nClass arguments details:\narg 1 ID = 88502113\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double val=(double)lua_tonumber(L,2);
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const mglDataA* x=(Luna< mglDataA >::check(L,4));
	const mglDataA* y=(Luna< mglDataA >::check(L,5));
	const mglDataA* z=(Luna< mglDataA >::check(L,6));
	const char * stl=(const char *)lua_tostring(L,7);

	mgl_cont_gen(gr, val, a, x, y, z, stl);

	return 0;
}

// void mgl_contf_gen(mglBase * gr, double v1, double v2, const mglDataA * a, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * stl)
static int _bind_mgl_contf_gen(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_gen(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_gen(mglBase * gr, double v1, double v2, const mglDataA * a, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * stl) function, expected prototype:\nvoid mgl_contf_gen(mglBase * gr, double v1, double v2, const mglDataA * a, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * stl)\nClass arguments details:\narg 1 ID = 88502113\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 7 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double v1=(double)lua_tonumber(L,2);
	double v2=(double)lua_tonumber(L,3);
	const mglDataA* a=(Luna< mglDataA >::check(L,4));
	const mglDataA* x=(Luna< mglDataA >::check(L,5));
	const mglDataA* y=(Luna< mglDataA >::check(L,6));
	const mglDataA* z=(Luna< mglDataA >::check(L,7));
	const char * stl=(const char *)lua_tostring(L,8);

	mgl_contf_gen(gr, v1, v2, a, x, y, z, stl);

	return 0;
}

// void mgl_cont_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_cont_xy_val(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_xy_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_cont_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_cont_xy_val(gr, v, x, y, z, sch, opt);

	return 0;
}

// void mgl_cont_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_cont_xy_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_xy_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_cont_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_cont_xy_val_(gr, v, x, y, z, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_cont_val(mglBase * gr, const mglDataA * v, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_cont_val(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_val(mglBase * gr, const mglDataA * v, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_cont_val(mglBase * gr, const mglDataA * v, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* z=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_cont_val(gr, v, z, sch, opt);

	return 0;
}

// void mgl_cont_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * z, const char * sch, const char * opt, int arg6, int arg7)
static int _bind_mgl_cont_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * z, const char * sch, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_cont_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * z, const char * sch, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* z=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_cont_val_(gr, v, z, sch, opt, _arg6, _arg7);

	return 0;
}

// void mgl_cont_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_cont_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_cont_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_cont_xy(gr, x, y, z, sch, opt);

	return 0;
}

// void mgl_cont_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_cont_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_cont_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_cont_xy_(gr, x, y, z, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_cont(mglBase * gr, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_cont(lua_State *L) {
	if (!_lg_typecheck_mgl_cont(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont(mglBase * gr, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_cont(mglBase * gr, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_cont(gr, z, sch, opt);

	return 0;
}

// void mgl_cont_(uintptr_t * gr, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)
static int _bind_mgl_cont_(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_(uintptr_t * gr, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_cont_(uintptr_t * gr, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_cont_(gr, z, sch, opt, _arg5, _arg6);

	return 0;
}

// void mgl_contf_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_contf_xy_val(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_xy_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_contf_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_contf_xy_val(gr, v, x, y, z, sch, opt);

	return 0;
}

// void mgl_contf_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_contf_xy_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_xy_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_contf_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_contf_xy_val_(gr, v, x, y, z, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_contf_val(mglBase * gr, const mglDataA * v, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_contf_val(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_val(mglBase * gr, const mglDataA * v, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_contf_val(mglBase * gr, const mglDataA * v, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* z=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_contf_val(gr, v, z, sch, opt);

	return 0;
}

// void mgl_contf_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * z, const char * sch, const char * opt, int arg6, int arg7)
static int _bind_mgl_contf_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * z, const char * sch, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_contf_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * z, const char * sch, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* z=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_contf_val_(gr, v, z, sch, opt, _arg6, _arg7);

	return 0;
}

// void mgl_contf_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_contf_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_contf_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_contf_xy(gr, x, y, z, sch, opt);

	return 0;
}

// void mgl_contf_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_contf_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_contf_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_contf_xy_(gr, x, y, z, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_contf(mglBase * gr, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_contf(lua_State *L) {
	if (!_lg_typecheck_mgl_contf(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf(mglBase * gr, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_contf(mglBase * gr, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_contf(gr, z, sch, opt);

	return 0;
}

// void mgl_contf_(uintptr_t * gr, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)
static int _bind_mgl_contf_(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_(uintptr_t * gr, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_contf_(uintptr_t * gr, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_contf_(gr, z, sch, opt, _arg5, _arg6);

	return 0;
}

// void mgl_contd_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_contd_xy_val(lua_State *L) {
	if (!_lg_typecheck_mgl_contd_xy_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contd_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_contd_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_contd_xy_val(gr, v, x, y, z, sch, opt);

	return 0;
}

// void mgl_contd_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_contd_xy_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_contd_xy_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contd_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_contd_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_contd_xy_val_(gr, v, x, y, z, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_contd_val(mglBase * gr, const mglDataA * v, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_contd_val(lua_State *L) {
	if (!_lg_typecheck_mgl_contd_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contd_val(mglBase * gr, const mglDataA * v, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_contd_val(mglBase * gr, const mglDataA * v, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* z=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_contd_val(gr, v, z, sch, opt);

	return 0;
}

// void mgl_contd_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * z, const char * sch, const char * opt, int arg6, int arg7)
static int _bind_mgl_contd_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_contd_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contd_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * z, const char * sch, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_contd_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * z, const char * sch, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* z=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_contd_val_(gr, v, z, sch, opt, _arg6, _arg7);

	return 0;
}

// void mgl_contd_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_contd_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_contd_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contd_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_contd_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_contd_xy(gr, x, y, z, sch, opt);

	return 0;
}

// void mgl_contd_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_contd_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_contd_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contd_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_contd_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_contd_xy_(gr, x, y, z, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_contd(mglBase * gr, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_contd(lua_State *L) {
	if (!_lg_typecheck_mgl_contd(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contd(mglBase * gr, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_contd(mglBase * gr, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_contd(gr, z, sch, opt);

	return 0;
}

// void mgl_contd_(uintptr_t * gr, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)
static int _bind_mgl_contd_(lua_State *L) {
	if (!_lg_typecheck_mgl_contd_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contd_(uintptr_t * gr, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_contd_(uintptr_t * gr, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_contd_(gr, z, sch, opt, _arg5, _arg6);

	return 0;
}

// void mgl_contv_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_contv_xy_val(lua_State *L) {
	if (!_lg_typecheck_mgl_contv_xy_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contv_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_contv_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_contv_xy_val(gr, v, x, y, z, sch, opt);

	return 0;
}

// void mgl_contv_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_contv_xy_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_contv_xy_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contv_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_contv_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_contv_xy_val_(gr, v, x, y, z, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_contv_val(mglBase * gr, const mglDataA * v, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_contv_val(lua_State *L) {
	if (!_lg_typecheck_mgl_contv_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contv_val(mglBase * gr, const mglDataA * v, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_contv_val(mglBase * gr, const mglDataA * v, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* z=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_contv_val(gr, v, z, sch, opt);

	return 0;
}

// void mgl_contv_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * z, const char * sch, const char * opt, int arg6, int arg7)
static int _bind_mgl_contv_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_contv_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contv_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * z, const char * sch, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_contv_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * z, const char * sch, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* z=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_contv_val_(gr, v, z, sch, opt, _arg6, _arg7);

	return 0;
}

// void mgl_contv_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_contv_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_contv_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contv_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_contv_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_contv_xy(gr, x, y, z, sch, opt);

	return 0;
}

// void mgl_contv_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_contv_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_contv_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contv_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_contv_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_contv_xy_(gr, x, y, z, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_contv(mglBase * gr, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_contv(lua_State *L) {
	if (!_lg_typecheck_mgl_contv(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contv(mglBase * gr, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_contv(mglBase * gr, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_contv(gr, z, sch, opt);

	return 0;
}

// void mgl_contv_(uintptr_t * gr, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)
static int _bind_mgl_contv_(lua_State *L) {
	if (!_lg_typecheck_mgl_contv_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contv_(uintptr_t * gr, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_contv_(uintptr_t * gr, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_contv_(gr, z, sch, opt, _arg5, _arg6);

	return 0;
}

// void mgl_axial_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * a, const char * sch, const char * opt)
static int _bind_mgl_axial_xy_val(lua_State *L) {
	if (!_lg_typecheck_mgl_axial_xy_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_axial_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * a, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_axial_xy_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * a, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_axial_xy_val(gr, v, x, y, a, sch, opt);

	return 0;
}

// void mgl_axial_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * a, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_axial_xy_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_axial_xy_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_axial_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * a, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_axial_xy_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * a, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* a=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_axial_xy_val_(gr, v, x, y, a, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_axial_val(mglBase * gr, const mglDataA * v, const mglDataA * a, const char * sch, const char * opt)
static int _bind_mgl_axial_val(lua_State *L) {
	if (!_lg_typecheck_mgl_axial_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_axial_val(mglBase * gr, const mglDataA * v, const mglDataA * a, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_axial_val(mglBase * gr, const mglDataA * v, const mglDataA * a, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_axial_val(gr, v, a, sch, opt);

	return 0;
}

// void mgl_axial_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * a, const char * sch, const char * opt, int arg6, int arg7)
static int _bind_mgl_axial_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_axial_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_axial_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * a, const char * sch, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_axial_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * a, const char * sch, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* a=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_axial_val_(gr, v, a, sch, opt, _arg6, _arg7);

	return 0;
}

// void mgl_axial_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * a, const char * sch, const char * opt)
static int _bind_mgl_axial_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_axial_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_axial_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * a, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_axial_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * a, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* a=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_axial_xy(gr, x, y, a, sch, opt);

	return 0;
}

// void mgl_axial_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * a, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_axial_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_axial_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_axial_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * a, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_axial_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * a, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* a=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_axial_xy_(gr, x, y, a, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_axial(mglBase * gr, const mglDataA * a, const char * sch, const char * opt)
static int _bind_mgl_axial(lua_State *L) {
	if (!_lg_typecheck_mgl_axial(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_axial(mglBase * gr, const mglDataA * a, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_axial(mglBase * gr, const mglDataA * a, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_axial(gr, a, sch, opt);

	return 0;
}

// void mgl_axial_(uintptr_t * gr, uintptr_t * a, const char * sch, const char * opt, int arg5, int arg6)
static int _bind_mgl_axial_(lua_State *L) {
	if (!_lg_typecheck_mgl_axial_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_axial_(uintptr_t * gr, uintptr_t * a, const char * sch, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_axial_(uintptr_t * gr, uintptr_t * a, const char * sch, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_axial_(gr, a, sch, opt, _arg5, _arg6);

	return 0;
}

// void mgl_torus(mglBase * gr, const mglDataA * r, const mglDataA * z, const char * col, const char * opt)
static int _bind_mgl_torus(lua_State *L) {
	if (!_lg_typecheck_mgl_torus(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_torus(mglBase * gr, const mglDataA * r, const mglDataA * z, const char * col, const char * opt) function, expected prototype:\nvoid mgl_torus(mglBase * gr, const mglDataA * r, const mglDataA * z, const char * col, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* r=(Luna< mglDataA >::check(L,2));
	const mglDataA* z=(Luna< mglDataA >::check(L,3));
	const char * col=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_torus(gr, r, z, col, opt);

	return 0;
}

// void mgl_torus_(uintptr_t * gr, uintptr_t * r, uintptr_t * z, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_torus_(lua_State *L) {
	if (!_lg_typecheck_mgl_torus_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_torus_(uintptr_t * gr, uintptr_t * r, uintptr_t * z, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_torus_(uintptr_t * gr, uintptr_t * r, uintptr_t * z, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* r=(Luna< uintptr_t >::check(L,2));
	uintptr_t* z=(Luna< uintptr_t >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_torus_(gr, r, z, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_grid3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_grid3_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_grid3_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_grid3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_grid3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	const char * stl=(const char *)lua_tostring(L,6);
	double sVal=(double)lua_tonumber(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_grid3_xyz(gr, x, y, z, a, stl, sVal, opt);

	return 0;
}

// void mgl_grid3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg9, int arg10)
static int _bind_mgl_grid3_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_grid3_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_grid3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_grid3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* a=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	double sVal=(double)lua_tonumber(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_grid3_xyz_(gr, x, y, z, a, sch, &sVal, opt, _arg9, _arg10);

	return 0;
}

// void mgl_grid3(mglBase * gr, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_grid3(lua_State *L) {
	if (!_lg_typecheck_mgl_grid3(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_grid3(mglBase * gr, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_grid3(mglBase * gr, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_grid3(gr, a, stl, sVal, opt);

	return 0;
}

// void mgl_grid3_(uintptr_t * gr, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg6, int arg7)
static int _bind_mgl_grid3_(lua_State *L) {
	if (!_lg_typecheck_mgl_grid3_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_grid3_(uintptr_t * gr, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_grid3_(uintptr_t * gr, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_grid3_(gr, a, sch, &sVal, opt, _arg6, _arg7);

	return 0;
}

// void mgl_dens3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_dens3_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_dens3_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dens3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_dens3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	const char * stl=(const char *)lua_tostring(L,6);
	double sVal=(double)lua_tonumber(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_dens3_xyz(gr, x, y, z, a, stl, sVal, opt);

	return 0;
}

// void mgl_dens3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg9, int arg10)
static int _bind_mgl_dens3_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_dens3_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dens3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_dens3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* a=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	double sVal=(double)lua_tonumber(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_dens3_xyz_(gr, x, y, z, a, sch, &sVal, opt, _arg9, _arg10);

	return 0;
}

// void mgl_dens3(mglBase * gr, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_dens3(lua_State *L) {
	if (!_lg_typecheck_mgl_dens3(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dens3(mglBase * gr, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_dens3(mglBase * gr, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_dens3(gr, a, stl, sVal, opt);

	return 0;
}

// void mgl_dens3_(uintptr_t * gr, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg6, int arg7)
static int _bind_mgl_dens3_(lua_State *L) {
	if (!_lg_typecheck_mgl_dens3_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dens3_(uintptr_t * gr, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_dens3_(uintptr_t * gr, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_dens3_(gr, a, sch, &sVal, opt, _arg6, _arg7);

	return 0;
}

// void mgl_cont3_xyz_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, double sVal, const char * opt)
static int _bind_mgl_cont3_xyz_val(lua_State *L) {
	if (!_lg_typecheck_mgl_cont3_xyz_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont3_xyz_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, double sVal, const char * opt) function, expected prototype:\nvoid mgl_cont3_xyz_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const mglDataA* a=(Luna< mglDataA >::check(L,6));
	const char * sch=(const char *)lua_tostring(L,7);
	double sVal=(double)lua_tonumber(L,8);
	const char * opt=(const char *)lua_tostring(L,9);

	mgl_cont3_xyz_val(gr, v, x, y, z, a, sch, sVal, opt);

	return 0;
}

// void mgl_cont3_xyz_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg10, int arg11)
static int _bind_mgl_cont3_xyz_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_cont3_xyz_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont3_xyz_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg10, int arg11) function, expected prototype:\nvoid mgl_cont3_xyz_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg10, int arg11)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	uintptr_t* a=(Luna< uintptr_t >::check(L,6));
	const char * sch=(const char *)lua_tostring(L,7);
	double sVal=(double)lua_tonumber(L,8);
	const char * opt=(const char *)lua_tostring(L,9);
	int _arg10=(int)lua_tointeger(L,10);
	int _arg11=(int)lua_tointeger(L,11);

	mgl_cont3_xyz_val_(gr, v, x, y, z, a, sch, &sVal, opt, _arg10, _arg11);

	return 0;
}

// void mgl_cont3_val(mglBase * gr, const mglDataA * v, const mglDataA * a, const char * sch, double sVal, const char * opt)
static int _bind_mgl_cont3_val(lua_State *L) {
	if (!_lg_typecheck_mgl_cont3_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont3_val(mglBase * gr, const mglDataA * v, const mglDataA * a, const char * sch, double sVal, const char * opt) function, expected prototype:\nvoid mgl_cont3_val(mglBase * gr, const mglDataA * v, const mglDataA * a, const char * sch, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_cont3_val(gr, v, a, sch, sVal, opt);

	return 0;
}

// void mgl_cont3_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg7, int arg8)
static int _bind_mgl_cont3_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_cont3_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont3_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_cont3_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* a=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_cont3_val_(gr, v, a, sch, &sVal, opt, _arg7, _arg8);

	return 0;
}

// void mgl_cont3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, double sVal, const char * opt)
static int _bind_mgl_cont3_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_cont3_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, double sVal, const char * opt) function, expected prototype:\nvoid mgl_cont3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	double sVal=(double)lua_tonumber(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_cont3_xyz(gr, x, y, z, a, sch, sVal, opt);

	return 0;
}

// void mgl_cont3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg9, int arg10)
static int _bind_mgl_cont3_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_cont3_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_cont3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* a=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	double sVal=(double)lua_tonumber(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_cont3_xyz_(gr, x, y, z, a, sch, &sVal, opt, _arg9, _arg10);

	return 0;
}

// void mgl_cont3(mglBase * gr, const mglDataA * a, const char * sch, double sVal, const char * opt)
static int _bind_mgl_cont3(lua_State *L) {
	if (!_lg_typecheck_mgl_cont3(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont3(mglBase * gr, const mglDataA * a, const char * sch, double sVal, const char * opt) function, expected prototype:\nvoid mgl_cont3(mglBase * gr, const mglDataA * a, const char * sch, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_cont3(gr, a, sch, sVal, opt);

	return 0;
}

// void mgl_cont3_(uintptr_t * gr, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg6, int arg7)
static int _bind_mgl_cont3_(lua_State *L) {
	if (!_lg_typecheck_mgl_cont3_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont3_(uintptr_t * gr, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_cont3_(uintptr_t * gr, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_cont3_(gr, a, sch, &sVal, opt, _arg6, _arg7);

	return 0;
}

// void mgl_contf3_xyz_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, double sVal, const char * opt)
static int _bind_mgl_contf3_xyz_val(lua_State *L) {
	if (!_lg_typecheck_mgl_contf3_xyz_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf3_xyz_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, double sVal, const char * opt) function, expected prototype:\nvoid mgl_contf3_xyz_val(mglBase * gr, const mglDataA * v, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const mglDataA* a=(Luna< mglDataA >::check(L,6));
	const char * sch=(const char *)lua_tostring(L,7);
	double sVal=(double)lua_tonumber(L,8);
	const char * opt=(const char *)lua_tostring(L,9);

	mgl_contf3_xyz_val(gr, v, x, y, z, a, sch, sVal, opt);

	return 0;
}

// void mgl_contf3_xyz_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg10, int arg11)
static int _bind_mgl_contf3_xyz_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_contf3_xyz_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf3_xyz_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg10, int arg11) function, expected prototype:\nvoid mgl_contf3_xyz_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg10, int arg11)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	uintptr_t* a=(Luna< uintptr_t >::check(L,6));
	const char * sch=(const char *)lua_tostring(L,7);
	double sVal=(double)lua_tonumber(L,8);
	const char * opt=(const char *)lua_tostring(L,9);
	int _arg10=(int)lua_tointeger(L,10);
	int _arg11=(int)lua_tointeger(L,11);

	mgl_contf3_xyz_val_(gr, v, x, y, z, a, sch, &sVal, opt, _arg10, _arg11);

	return 0;
}

// void mgl_contf3_val(mglBase * gr, const mglDataA * v, const mglDataA * a, const char * sch, double sVal, const char * opt)
static int _bind_mgl_contf3_val(lua_State *L) {
	if (!_lg_typecheck_mgl_contf3_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf3_val(mglBase * gr, const mglDataA * v, const mglDataA * a, const char * sch, double sVal, const char * opt) function, expected prototype:\nvoid mgl_contf3_val(mglBase * gr, const mglDataA * v, const mglDataA * a, const char * sch, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_contf3_val(gr, v, a, sch, sVal, opt);

	return 0;
}

// void mgl_contf3_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg7, int arg8)
static int _bind_mgl_contf3_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_contf3_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf3_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_contf3_val_(uintptr_t * gr, uintptr_t * v, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* a=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_contf3_val_(gr, v, a, sch, &sVal, opt, _arg7, _arg8);

	return 0;
}

// void mgl_contf3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, double sVal, const char * opt)
static int _bind_mgl_contf3_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_contf3_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, double sVal, const char * opt) function, expected prototype:\nvoid mgl_contf3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	double sVal=(double)lua_tonumber(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_contf3_xyz(gr, x, y, z, a, sch, sVal, opt);

	return 0;
}

// void mgl_contf3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg9, int arg10)
static int _bind_mgl_contf3_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_contf3_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_contf3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* a=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	double sVal=(double)lua_tonumber(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_contf3_xyz_(gr, x, y, z, a, sch, &sVal, opt, _arg9, _arg10);

	return 0;
}

// void mgl_contf3(mglBase * gr, const mglDataA * a, const char * sch, double sVal, const char * opt)
static int _bind_mgl_contf3(lua_State *L) {
	if (!_lg_typecheck_mgl_contf3(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf3(mglBase * gr, const mglDataA * a, const char * sch, double sVal, const char * opt) function, expected prototype:\nvoid mgl_contf3(mglBase * gr, const mglDataA * a, const char * sch, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_contf3(gr, a, sch, sVal, opt);

	return 0;
}

// void mgl_contf3_(uintptr_t * gr, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg6, int arg7)
static int _bind_mgl_contf3_(lua_State *L) {
	if (!_lg_typecheck_mgl_contf3_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf3_(uintptr_t * gr, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_contf3_(uintptr_t * gr, uintptr_t * a, const char * sch, double * sVal, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_contf3_(gr, a, sch, &sVal, opt, _arg6, _arg7);

	return 0;
}

// double mglLinear(const double * a, long nx, long ny, long nz, double x, double y, double z)
static int _bind_mglLinear(lua_State *L) {
	if (!_lg_typecheck_mglLinear(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mglLinear(const double * a, long nx, long ny, long nz, double x, double y, double z) function, expected prototype:\ndouble mglLinear(const double * a, long nx, long ny, long nz, double x, double y, double z)\nClass arguments details:\n");
	}

	double a=(double)lua_tonumber(L,1);
	long nx=(long)lua_tointeger(L,2);
	long ny=(long)lua_tointeger(L,3);
	long nz=(long)lua_tointeger(L,4);
	double x=(double)lua_tonumber(L,5);
	double y=(double)lua_tonumber(L,6);
	double z=(double)lua_tonumber(L,7);

	double lret = mglLinear(&a, nx, ny, nz, x, y, z);
	lua_pushnumber(L,lret);

	return 1;
}

// double mglSpline3(const double * a, long nx, long ny, long nz, double x, double y, double z, double * dx = 0, double * dy = 0, double * dz = 0)
static int _bind_mglSpline3(lua_State *L) {
	if (!_lg_typecheck_mglSpline3(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mglSpline3(const double * a, long nx, long ny, long nz, double x, double y, double z, double * dx = 0, double * dy = 0, double * dz = 0) function, expected prototype:\ndouble mglSpline3(const double * a, long nx, long ny, long nz, double x, double y, double z, double * dx = 0, double * dy = 0, double * dz = 0)\nClass arguments details:\n");
	}

	int luatop = lua_gettop(L);

	double a=(double)lua_tonumber(L,1);
	long nx=(long)lua_tointeger(L,2);
	long ny=(long)lua_tointeger(L,3);
	long nz=(long)lua_tointeger(L,4);
	double x=(double)lua_tonumber(L,5);
	double y=(double)lua_tonumber(L,6);
	double z=(double)lua_tonumber(L,7);
	double dx=luatop>7 ? (double)lua_tonumber(L,8) : 0;
	double dy=luatop>8 ? (double)lua_tonumber(L,9) : 0;
	double dz=luatop>9 ? (double)lua_tonumber(L,10) : 0;

	double lret = mglSpline3(&a, nx, ny, nz, x, y, z, &dx, &dy, &dz);
	lua_pushnumber(L,lret);

	return 1;
}

// mglData mglTransformA(const mglDataA & am, const mglDataA & ph, const char * tr)
static int _bind_mglTransformA(lua_State *L) {
	if (!_lg_typecheck_mglTransformA(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData mglTransformA(const mglDataA & am, const mglDataA & ph, const char * tr) function, expected prototype:\nmglData mglTransformA(const mglDataA & am, const mglDataA & ph, const char * tr)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	const mglDataA* am_ptr=(Luna< mglDataA >::check(L,1));
	if( !am_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg am in mglTransformA function");
	}
	const mglDataA & am=*am_ptr;
	const mglDataA* ph_ptr=(Luna< mglDataA >::check(L,2));
	if( !ph_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg ph in mglTransformA function");
	}
	const mglDataA & ph=*ph_ptr;
	const char * tr=(const char *)lua_tostring(L,3);

	mglData stack_lret = mglTransformA(am, ph, tr);
	mglData* lret = new mglData(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,true);

	return 1;
}

// mglData mglTransform(const mglDataA & re, const mglDataA & im, const char * tr)
static int _bind_mglTransform(lua_State *L) {
	if (!_lg_typecheck_mglTransform(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData mglTransform(const mglDataA & re, const mglDataA & im, const char * tr) function, expected prototype:\nmglData mglTransform(const mglDataA & re, const mglDataA & im, const char * tr)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	const mglDataA* re_ptr=(Luna< mglDataA >::check(L,1));
	if( !re_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg re in mglTransform function");
	}
	const mglDataA & re=*re_ptr;
	const mglDataA* im_ptr=(Luna< mglDataA >::check(L,2));
	if( !im_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg im in mglTransform function");
	}
	const mglDataA & im=*im_ptr;
	const char * tr=(const char *)lua_tostring(L,3);

	mglData stack_lret = mglTransform(re, im, tr);
	mglData* lret = new mglData(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,true);

	return 1;
}

// void mglFourier(mglData & re, mglData & im, const char * dir)
static int _bind_mglFourier(lua_State *L) {
	if (!_lg_typecheck_mglFourier(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mglFourier(mglData & re, mglData & im, const char * dir) function, expected prototype:\nvoid mglFourier(mglData & re, mglData & im, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	mglData* re_ptr=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	if( !re_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg re in mglFourier function");
	}
	mglData & re=*re_ptr;
	mglData* im_ptr=(Luna< mglDataA >::checkSubType< mglData >(L,2));
	if( !im_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg im in mglFourier function");
	}
	mglData & im=*im_ptr;
	const char * dir=(const char *)lua_tostring(L,3);

	mglFourier(re, im, dir);

	return 0;
}

// mglData mglSTFA(const mglDataA & re, const mglDataA & im, long dn, char dir = 'x')
static int _bind_mglSTFA(lua_State *L) {
	if (!_lg_typecheck_mglSTFA(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData mglSTFA(const mglDataA & re, const mglDataA & im, long dn, char dir = 'x') function, expected prototype:\nmglData mglSTFA(const mglDataA & re, const mglDataA & im, long dn, char dir = 'x')\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	int luatop = lua_gettop(L);

	const mglDataA* re_ptr=(Luna< mglDataA >::check(L,1));
	if( !re_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg re in mglSTFA function");
	}
	const mglDataA & re=*re_ptr;
	const mglDataA* im_ptr=(Luna< mglDataA >::check(L,2));
	if( !im_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg im in mglSTFA function");
	}
	const mglDataA & im=*im_ptr;
	long dn=(long)lua_tointeger(L,3);
	char dir=luatop>3 ? (char)lua_tointeger(L,4) : 'x';

	mglData stack_lret = mglSTFA(re, im, dn, dir);
	mglData* lret = new mglData(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,true);

	return 1;
}

// mglData mglPDE(mglBase * gr, const char * ham, const mglDataA & ini_re, const mglDataA & ini_im, double dz = 0.1, double k0 = 100, const char * opt = "")
static int _bind_mglPDE(lua_State *L) {
	if (!_lg_typecheck_mglPDE(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData mglPDE(mglBase * gr, const char * ham, const mglDataA & ini_re, const mglDataA & ini_im, double dz = 0.1, double k0 = 100, const char * opt = \"\") function, expected prototype:\nmglData mglPDE(mglBase * gr, const char * ham, const mglDataA & ini_re, const mglDataA & ini_im, double dz = 0.1, double k0 = 100, const char * opt = \"\")\nClass arguments details:\narg 1 ID = 88502113\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	int luatop = lua_gettop(L);

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * ham=(const char *)lua_tostring(L,2);
	const mglDataA* ini_re_ptr=(Luna< mglDataA >::check(L,3));
	if( !ini_re_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg ini_re in mglPDE function");
	}
	const mglDataA & ini_re=*ini_re_ptr;
	const mglDataA* ini_im_ptr=(Luna< mglDataA >::check(L,4));
	if( !ini_im_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg ini_im in mglPDE function");
	}
	const mglDataA & ini_im=*ini_im_ptr;
	double dz=luatop>4 ? (double)lua_tonumber(L,5) : 0.1;
	double k0=luatop>5 ? (double)lua_tonumber(L,6) : 100;
	const char * opt=luatop>6 ? (const char *)lua_tostring(L,7) : "";

	mglData stack_lret = mglPDE(gr, ham, ini_re, ini_im, dz, k0, opt);
	mglData* lret = new mglData(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,true);

	return 1;
}

// mglData mglQO2d(const char * ham, const mglDataA & ini_re, const mglDataA & ini_im, const mglDataA & ray, double r = 1, double k0 = 100)
static int _bind_mglQO2d_overload_1(lua_State *L) {
	if (!_lg_typecheck_mglQO2d_overload_1(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData mglQO2d(const char * ham, const mglDataA & ini_re, const mglDataA & ini_im, const mglDataA & ray, double r = 1, double k0 = 100) function, expected prototype:\nmglData mglQO2d(const char * ham, const mglDataA & ini_re, const mglDataA & ini_im, const mglDataA & ray, double r = 1, double k0 = 100)\nClass arguments details:\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	int luatop = lua_gettop(L);

	const char * ham=(const char *)lua_tostring(L,1);
	const mglDataA* ini_re_ptr=(Luna< mglDataA >::check(L,2));
	if( !ini_re_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg ini_re in mglQO2d function");
	}
	const mglDataA & ini_re=*ini_re_ptr;
	const mglDataA* ini_im_ptr=(Luna< mglDataA >::check(L,3));
	if( !ini_im_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg ini_im in mglQO2d function");
	}
	const mglDataA & ini_im=*ini_im_ptr;
	const mglDataA* ray_ptr=(Luna< mglDataA >::check(L,4));
	if( !ray_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg ray in mglQO2d function");
	}
	const mglDataA & ray=*ray_ptr;
	double r=luatop>4 ? (double)lua_tonumber(L,5) : 1;
	double k0=luatop>5 ? (double)lua_tonumber(L,6) : 100;

	mglData stack_lret = mglQO2d(ham, ini_re, ini_im, ray, r, k0);
	mglData* lret = new mglData(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,true);

	return 1;
}

// mglData mglQO2d(const char * ham, const mglDataA & ini_re, const mglDataA & ini_im, const mglDataA & ray, mglData & xx, mglData & yy, double r = 1, double k0 = 100)
static int _bind_mglQO2d_overload_2(lua_State *L) {
	if (!_lg_typecheck_mglQO2d_overload_2(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData mglQO2d(const char * ham, const mglDataA & ini_re, const mglDataA & ini_im, const mglDataA & ray, mglData & xx, mglData & yy, double r = 1, double k0 = 100) function, expected prototype:\nmglData mglQO2d(const char * ham, const mglDataA & ini_re, const mglDataA & ini_im, const mglDataA & ray, mglData & xx, mglData & yy, double r = 1, double k0 = 100)\nClass arguments details:\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	int luatop = lua_gettop(L);

	const char * ham=(const char *)lua_tostring(L,1);
	const mglDataA* ini_re_ptr=(Luna< mglDataA >::check(L,2));
	if( !ini_re_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg ini_re in mglQO2d function");
	}
	const mglDataA & ini_re=*ini_re_ptr;
	const mglDataA* ini_im_ptr=(Luna< mglDataA >::check(L,3));
	if( !ini_im_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg ini_im in mglQO2d function");
	}
	const mglDataA & ini_im=*ini_im_ptr;
	const mglDataA* ray_ptr=(Luna< mglDataA >::check(L,4));
	if( !ray_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg ray in mglQO2d function");
	}
	const mglDataA & ray=*ray_ptr;
	mglData* xx_ptr=(Luna< mglDataA >::checkSubType< mglData >(L,5));
	if( !xx_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg xx in mglQO2d function");
	}
	mglData & xx=*xx_ptr;
	mglData* yy_ptr=(Luna< mglDataA >::checkSubType< mglData >(L,6));
	if( !yy_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg yy in mglQO2d function");
	}
	mglData & yy=*yy_ptr;
	double r=luatop>6 ? (double)lua_tonumber(L,7) : 1;
	double k0=luatop>7 ? (double)lua_tonumber(L,8) : 100;

	mglData stack_lret = mglQO2d(ham, ini_re, ini_im, ray, xx, yy, r, k0);
	mglData* lret = new mglData(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,true);

	return 1;
}

// Overload binder for mglQO2d
static int _bind_mglQO2d(lua_State *L) {
	if (_lg_typecheck_mglQO2d_overload_1(L)) return _bind_mglQO2d_overload_1(L);
	if (_lg_typecheck_mglQO2d_overload_2(L)) return _bind_mglQO2d_overload_2(L);

	luaL_error(L, "error in function mglQO2d, cannot match any of the overloads for function mglQO2d:\n  mglQO2d(const char *, const mglDataA &, const mglDataA &, const mglDataA &, double, double)\n  mglQO2d(const char *, const mglDataA &, const mglDataA &, const mglDataA &, mglData &, mglData &, double, double)\n");
	return 0;
}

// mglData mglRay(const char * ham, mglPoint r0, mglPoint p0, double dt = 0.1, double tmax = 10)
static int _bind_mglRay(lua_State *L) {
	if (!_lg_typecheck_mglRay(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData mglRay(const char * ham, mglPoint r0, mglPoint p0, double dt = 0.1, double tmax = 10) function, expected prototype:\nmglData mglRay(const char * ham, mglPoint r0, mglPoint p0, double dt = 0.1, double tmax = 10)\nClass arguments details:\narg 2 ID = 56902440\narg 3 ID = 56902440\n");
	}

	int luatop = lua_gettop(L);

	const char * ham=(const char *)lua_tostring(L,1);
	mglPoint* r0_ptr=(Luna< mglPoint >::check(L,2));
	if( !r0_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg r0 in mglRay function");
	}
	mglPoint r0=*r0_ptr;
	mglPoint* p0_ptr=(Luna< mglPoint >::check(L,3));
	if( !p0_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg p0 in mglRay function");
	}
	mglPoint p0=*p0_ptr;
	double dt=luatop>3 ? (double)lua_tonumber(L,4) : 0.1;
	double tmax=luatop>4 ? (double)lua_tonumber(L,5) : 10;

	mglData stack_lret = mglRay(ham, r0, p0, dt, tmax);
	mglData* lret = new mglData(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,true);

	return 1;
}

// mglData mglJacobian(const mglDataA & x, const mglDataA & y)
static int _bind_mglJacobian_overload_1(lua_State *L) {
	if (!_lg_typecheck_mglJacobian_overload_1(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData mglJacobian(const mglDataA & x, const mglDataA & y) function, expected prototype:\nmglData mglJacobian(const mglDataA & x, const mglDataA & y)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	const mglDataA* x_ptr=(Luna< mglDataA >::check(L,1));
	if( !x_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg x in mglJacobian function");
	}
	const mglDataA & x=*x_ptr;
	const mglDataA* y_ptr=(Luna< mglDataA >::check(L,2));
	if( !y_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg y in mglJacobian function");
	}
	const mglDataA & y=*y_ptr;

	mglData stack_lret = mglJacobian(x, y);
	mglData* lret = new mglData(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,true);

	return 1;
}

// mglData mglJacobian(const mglDataA & x, const mglDataA & y, const mglDataA & z)
static int _bind_mglJacobian_overload_2(lua_State *L) {
	if (!_lg_typecheck_mglJacobian_overload_2(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData mglJacobian(const mglDataA & x, const mglDataA & y, const mglDataA & z) function, expected prototype:\nmglData mglJacobian(const mglDataA & x, const mglDataA & y, const mglDataA & z)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	const mglDataA* x_ptr=(Luna< mglDataA >::check(L,1));
	if( !x_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg x in mglJacobian function");
	}
	const mglDataA & x=*x_ptr;
	const mglDataA* y_ptr=(Luna< mglDataA >::check(L,2));
	if( !y_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg y in mglJacobian function");
	}
	const mglDataA & y=*y_ptr;
	const mglDataA* z_ptr=(Luna< mglDataA >::check(L,3));
	if( !z_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg z in mglJacobian function");
	}
	const mglDataA & z=*z_ptr;

	mglData stack_lret = mglJacobian(x, y, z);
	mglData* lret = new mglData(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,true);

	return 1;
}

// Overload binder for mglJacobian
static int _bind_mglJacobian(lua_State *L) {
	if (_lg_typecheck_mglJacobian_overload_1(L)) return _bind_mglJacobian_overload_1(L);
	if (_lg_typecheck_mglJacobian_overload_2(L)) return _bind_mglJacobian_overload_2(L);

	luaL_error(L, "error in function mglJacobian, cannot match any of the overloads for function mglJacobian:\n  mglJacobian(const mglDataA &, const mglDataA &)\n  mglJacobian(const mglDataA &, const mglDataA &, const mglDataA &)\n");
	return 0;
}

// mglData mglTriangulation(const mglDataA & x, const mglDataA & y, const mglDataA & z)
static int _bind_mglTriangulation_overload_1(lua_State *L) {
	if (!_lg_typecheck_mglTriangulation_overload_1(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData mglTriangulation(const mglDataA & x, const mglDataA & y, const mglDataA & z) function, expected prototype:\nmglData mglTriangulation(const mglDataA & x, const mglDataA & y, const mglDataA & z)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	const mglDataA* x_ptr=(Luna< mglDataA >::check(L,1));
	if( !x_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg x in mglTriangulation function");
	}
	const mglDataA & x=*x_ptr;
	const mglDataA* y_ptr=(Luna< mglDataA >::check(L,2));
	if( !y_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg y in mglTriangulation function");
	}
	const mglDataA & y=*y_ptr;
	const mglDataA* z_ptr=(Luna< mglDataA >::check(L,3));
	if( !z_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg z in mglTriangulation function");
	}
	const mglDataA & z=*z_ptr;

	mglData stack_lret = mglTriangulation(x, y, z);
	mglData* lret = new mglData(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,true);

	return 1;
}

// mglData mglTriangulation(const mglDataA & x, const mglDataA & y)
static int _bind_mglTriangulation_overload_2(lua_State *L) {
	if (!_lg_typecheck_mglTriangulation_overload_2(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData mglTriangulation(const mglDataA & x, const mglDataA & y) function, expected prototype:\nmglData mglTriangulation(const mglDataA & x, const mglDataA & y)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	const mglDataA* x_ptr=(Luna< mglDataA >::check(L,1));
	if( !x_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg x in mglTriangulation function");
	}
	const mglDataA & x=*x_ptr;
	const mglDataA* y_ptr=(Luna< mglDataA >::check(L,2));
	if( !y_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg y in mglTriangulation function");
	}
	const mglDataA & y=*y_ptr;

	mglData stack_lret = mglTriangulation(x, y);
	mglData* lret = new mglData(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,true);

	return 1;
}

// Overload binder for mglTriangulation
static int _bind_mglTriangulation(lua_State *L) {
	if (_lg_typecheck_mglTriangulation_overload_1(L)) return _bind_mglTriangulation_overload_1(L);
	if (_lg_typecheck_mglTriangulation_overload_2(L)) return _bind_mglTriangulation_overload_2(L);

	luaL_error(L, "error in function mglTriangulation, cannot match any of the overloads for function mglTriangulation:\n  mglTriangulation(const mglDataA &, const mglDataA &, const mglDataA &)\n  mglTriangulation(const mglDataA &, const mglDataA &)\n");
	return 0;
}

// void mgl_srnd(long seed)
static int _bind_mgl_srnd(lua_State *L) {
	if (!_lg_typecheck_mgl_srnd(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_srnd(long seed) function, expected prototype:\nvoid mgl_srnd(long seed)\nClass arguments details:\n");
	}

	long seed=(long)lua_tointeger(L,1);

	mgl_srnd(seed);

	return 0;
}

// double mgl_rnd()
static int _bind_mgl_rnd(lua_State *L) {
	if (!_lg_typecheck_mgl_rnd(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_rnd() function, expected prototype:\ndouble mgl_rnd()\nClass arguments details:\n");
	}


	double lret = mgl_rnd();
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_ipow(double x, int n)
static int _bind_mgl_ipow(lua_State *L) {
	if (!_lg_typecheck_mgl_ipow(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_ipow(double x, int n) function, expected prototype:\ndouble mgl_ipow(double x, int n)\nClass arguments details:\n");
	}

	double x=(double)lua_tonumber(L,1);
	int n=(int)lua_tointeger(L,2);

	double lret = mgl_ipow(x, n);
	lua_pushnumber(L,lret);

	return 1;
}

// mglData * mgl_create_data()
static int _bind_mgl_create_data(lua_State *L) {
	if (!_lg_typecheck_mgl_create_data(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_create_data() function, expected prototype:\nmglData * mgl_create_data()\nClass arguments details:\n");
	}


	mglData * lret = mgl_create_data();
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_create_data_()
static int _bind_mgl_create_data_(lua_State *L) {
	if (!_lg_typecheck_mgl_create_data_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_create_data_() function, expected prototype:\nuintptr_t mgl_create_data_()\nClass arguments details:\n");
	}


	uintptr_t stack_lret = mgl_create_data_();
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_create_data_size(long nx, long ny, long nz)
static int _bind_mgl_create_data_size(lua_State *L) {
	if (!_lg_typecheck_mgl_create_data_size(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_create_data_size(long nx, long ny, long nz) function, expected prototype:\nmglData * mgl_create_data_size(long nx, long ny, long nz)\nClass arguments details:\n");
	}

	long nx=(long)lua_tointeger(L,1);
	long ny=(long)lua_tointeger(L,2);
	long nz=(long)lua_tointeger(L,3);

	mglData * lret = mgl_create_data_size(nx, ny, nz);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_create_data_size_(int * nx, int * ny, int * nz)
static int _bind_mgl_create_data_size_(lua_State *L) {
	if (!_lg_typecheck_mgl_create_data_size_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_create_data_size_(int * nx, int * ny, int * nz) function, expected prototype:\nuintptr_t mgl_create_data_size_(int * nx, int * ny, int * nz)\nClass arguments details:\n");
	}

	int nx=(int)lua_tointeger(L,1);
	int ny=(int)lua_tointeger(L,2);
	int nz=(int)lua_tointeger(L,3);

	uintptr_t stack_lret = mgl_create_data_size_(&nx, &ny, &nz);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_create_data_file(const char * fname)
static int _bind_mgl_create_data_file(lua_State *L) {
	if (!_lg_typecheck_mgl_create_data_file(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_create_data_file(const char * fname) function, expected prototype:\nmglData * mgl_create_data_file(const char * fname)\nClass arguments details:\n");
	}

	const char * fname=(const char *)lua_tostring(L,1);

	mglData * lret = mgl_create_data_file(fname);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_create_data_file_(const char * fname, int len)
static int _bind_mgl_create_data_file_(lua_State *L) {
	if (!_lg_typecheck_mgl_create_data_file_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_create_data_file_(const char * fname, int len) function, expected prototype:\nuintptr_t mgl_create_data_file_(const char * fname, int len)\nClass arguments details:\n");
	}

	const char * fname=(const char *)lua_tostring(L,1);
	int len=(int)lua_tointeger(L,2);

	uintptr_t stack_lret = mgl_create_data_file_(fname, len);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// void mgl_delete_data(mglData * dat)
static int _bind_mgl_delete_data(lua_State *L) {
	if (!_lg_typecheck_mgl_delete_data(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_delete_data(mglData * dat) function, expected prototype:\nvoid mgl_delete_data(mglData * dat)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));

	mgl_delete_data(dat);

	return 0;
}

// void mgl_delete_data_(uintptr_t * dat)
static int _bind_mgl_delete_data_(lua_State *L) {
	if (!_lg_typecheck_mgl_delete_data_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_delete_data_(uintptr_t * dat) function, expected prototype:\nvoid mgl_delete_data_(uintptr_t * dat)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));

	mgl_delete_data_(dat);

	return 0;
}

// const char * mgl_data_info(const mglDataA * dat)
static int _bind_mgl_data_info(lua_State *L) {
	if (!_lg_typecheck_mgl_data_info(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in const char * mgl_data_info(const mglDataA * dat) function, expected prototype:\nconst char * mgl_data_info(const mglDataA * dat)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));

	const char * lret = mgl_data_info(dat);
	lua_pushstring(L,lret);

	return 1;
}

// void mgl_data_rearrange(mglData * dat, long mx, long my, long mz)
static int _bind_mgl_data_rearrange(lua_State *L) {
	if (!_lg_typecheck_mgl_data_rearrange(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_rearrange(mglData * dat, long mx, long my, long mz) function, expected prototype:\nvoid mgl_data_rearrange(mglData * dat, long mx, long my, long mz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	long mx=(long)lua_tointeger(L,2);
	long my=(long)lua_tointeger(L,3);
	long mz=(long)lua_tointeger(L,4);

	mgl_data_rearrange(dat, mx, my, mz);

	return 0;
}

// void mgl_data_rearrange_(uintptr_t * dat, int * mx, int * my, int * mz)
static int _bind_mgl_data_rearrange_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_rearrange_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_rearrange_(uintptr_t * dat, int * mx, int * my, int * mz) function, expected prototype:\nvoid mgl_data_rearrange_(uintptr_t * dat, int * mx, int * my, int * mz)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int mx=(int)lua_tointeger(L,2);
	int my=(int)lua_tointeger(L,3);
	int mz=(int)lua_tointeger(L,4);

	mgl_data_rearrange_(dat, &mx, &my, &mz);

	return 0;
}

// void mgl_data_set_float(mglData * dat, const float * A, long mx, long my, long mz)
static int _bind_mgl_data_set_float(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_float(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_float(mglData * dat, const float * A, long mx, long my, long mz) function, expected prototype:\nvoid mgl_data_set_float(mglData * dat, const float * A, long mx, long my, long mz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	float A=(float)lua_tonumber(L,2);
	long mx=(long)lua_tointeger(L,3);
	long my=(long)lua_tointeger(L,4);
	long mz=(long)lua_tointeger(L,5);

	mgl_data_set_float(dat, &A, mx, my, mz);

	return 0;
}

// void mgl_data_set_float_(uintptr_t * dat, const float * A, int * NX, int * NY, int * NZ)
static int _bind_mgl_data_set_float_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_float_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_float_(uintptr_t * dat, const float * A, int * NX, int * NY, int * NZ) function, expected prototype:\nvoid mgl_data_set_float_(uintptr_t * dat, const float * A, int * NX, int * NY, int * NZ)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	float A=(float)lua_tonumber(L,2);
	int NX=(int)lua_tointeger(L,3);
	int NY=(int)lua_tointeger(L,4);
	int NZ=(int)lua_tointeger(L,5);

	mgl_data_set_float_(dat, &A, &NX, &NY, &NZ);

	return 0;
}

// void mgl_data_set_float1_(uintptr_t * d, const float * A, int * N1)
static int _bind_mgl_data_set_float1_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_float1_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_float1_(uintptr_t * d, const float * A, int * N1) function, expected prototype:\nvoid mgl_data_set_float1_(uintptr_t * d, const float * A, int * N1)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	float A=(float)lua_tonumber(L,2);
	int N1=(int)lua_tointeger(L,3);

	mgl_data_set_float1_(d, &A, &N1);

	return 0;
}

// void mgl_data_set_double(mglData * dat, const double * A, long mx, long my, long mz)
static int _bind_mgl_data_set_double(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_double(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_double(mglData * dat, const double * A, long mx, long my, long mz) function, expected prototype:\nvoid mgl_data_set_double(mglData * dat, const double * A, long mx, long my, long mz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	double A=(double)lua_tonumber(L,2);
	long mx=(long)lua_tointeger(L,3);
	long my=(long)lua_tointeger(L,4);
	long mz=(long)lua_tointeger(L,5);

	mgl_data_set_double(dat, &A, mx, my, mz);

	return 0;
}

// void mgl_data_set_double_(uintptr_t * dat, const double * A, int * NX, int * NY, int * NZ)
static int _bind_mgl_data_set_double_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_double_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_double_(uintptr_t * dat, const double * A, int * NX, int * NY, int * NZ) function, expected prototype:\nvoid mgl_data_set_double_(uintptr_t * dat, const double * A, int * NX, int * NY, int * NZ)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double A=(double)lua_tonumber(L,2);
	int NX=(int)lua_tointeger(L,3);
	int NY=(int)lua_tointeger(L,4);
	int NZ=(int)lua_tointeger(L,5);

	mgl_data_set_double_(dat, &A, &NX, &NY, &NZ);

	return 0;
}

// void mgl_data_set_double1_(uintptr_t * d, const double * A, int * N1)
static int _bind_mgl_data_set_double1_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_double1_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_double1_(uintptr_t * d, const double * A, int * N1) function, expected prototype:\nvoid mgl_data_set_double1_(uintptr_t * d, const double * A, int * N1)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	double A=(double)lua_tonumber(L,2);
	int N1=(int)lua_tointeger(L,3);

	mgl_data_set_double1_(d, &A, &N1);

	return 0;
}

// void mgl_data_set_float2_(uintptr_t * d, const float * A, int * N1, int * N2)
static int _bind_mgl_data_set_float2_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_float2_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_float2_(uintptr_t * d, const float * A, int * N1, int * N2) function, expected prototype:\nvoid mgl_data_set_float2_(uintptr_t * d, const float * A, int * N1, int * N2)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	float A=(float)lua_tonumber(L,2);
	int N1=(int)lua_tointeger(L,3);
	int N2=(int)lua_tointeger(L,4);

	mgl_data_set_float2_(d, &A, &N1, &N2);

	return 0;
}

// void mgl_data_set_double2_(uintptr_t * d, const double * A, int * N1, int * N2)
static int _bind_mgl_data_set_double2_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_double2_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_double2_(uintptr_t * d, const double * A, int * N1, int * N2) function, expected prototype:\nvoid mgl_data_set_double2_(uintptr_t * d, const double * A, int * N1, int * N2)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	double A=(double)lua_tonumber(L,2);
	int N1=(int)lua_tointeger(L,3);
	int N2=(int)lua_tointeger(L,4);

	mgl_data_set_double2_(d, &A, &N1, &N2);

	return 0;
}

// void mgl_data_set_float3_(uintptr_t * d, const float * A, int * N1, int * N2, int * N3)
static int _bind_mgl_data_set_float3_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_float3_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_float3_(uintptr_t * d, const float * A, int * N1, int * N2, int * N3) function, expected prototype:\nvoid mgl_data_set_float3_(uintptr_t * d, const float * A, int * N1, int * N2, int * N3)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	float A=(float)lua_tonumber(L,2);
	int N1=(int)lua_tointeger(L,3);
	int N2=(int)lua_tointeger(L,4);
	int N3=(int)lua_tointeger(L,5);

	mgl_data_set_float3_(d, &A, &N1, &N2, &N3);

	return 0;
}

// void mgl_data_set_double3_(uintptr_t * d, const double * A, int * N1, int * N2, int * N3)
static int _bind_mgl_data_set_double3_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_double3_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_double3_(uintptr_t * d, const double * A, int * N1, int * N2, int * N3) function, expected prototype:\nvoid mgl_data_set_double3_(uintptr_t * d, const double * A, int * N1, int * N2, int * N3)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	double A=(double)lua_tonumber(L,2);
	int N1=(int)lua_tointeger(L,3);
	int N2=(int)lua_tointeger(L,4);
	int N3=(int)lua_tointeger(L,5);

	mgl_data_set_double3_(d, &A, &N1, &N2, &N3);

	return 0;
}

// void mgl_data_set(mglData * dat, const mglDataA * a)
static int _bind_mgl_data_set(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set(mglData * dat, const mglDataA * a) function, expected prototype:\nvoid mgl_data_set(mglData * dat, const mglDataA * a)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));

	mgl_data_set(dat, a);

	return 0;
}

// void mgl_data_set_(uintptr_t * dat, uintptr_t * a)
static int _bind_mgl_data_set_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_(uintptr_t * dat, uintptr_t * a) function, expected prototype:\nvoid mgl_data_set_(uintptr_t * dat, uintptr_t * a)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));

	mgl_data_set_(dat, a);

	return 0;
}

// void mgl_data_set_value(mglData * dat, double v, long i, long j, long k)
static int _bind_mgl_data_set_value(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_value(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_value(mglData * dat, double v, long i, long j, long k) function, expected prototype:\nvoid mgl_data_set_value(mglData * dat, double v, long i, long j, long k)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	double v=(double)lua_tonumber(L,2);
	long i=(long)lua_tointeger(L,3);
	long j=(long)lua_tointeger(L,4);
	long k=(long)lua_tointeger(L,5);

	mgl_data_set_value(dat, v, i, j, k);

	return 0;
}

// void mgl_data_set_value_(uintptr_t * d, double * v, int * i, int * j, int * k)
static int _bind_mgl_data_set_value_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_value_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_value_(uintptr_t * d, double * v, int * i, int * j, int * k) function, expected prototype:\nvoid mgl_data_set_value_(uintptr_t * d, double * v, int * i, int * j, int * k)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	double v=(double)lua_tonumber(L,2);
	int i=(int)lua_tointeger(L,3);
	int j=(int)lua_tointeger(L,4);
	int k=(int)lua_tointeger(L,5);

	mgl_data_set_value_(d, &v, &i, &j, &k);

	return 0;
}

// double mgl_data_get_value(const mglDataA * dat, long i, long j, long k)
static int _bind_mgl_data_get_value(lua_State *L) {
	if (!_lg_typecheck_mgl_data_get_value(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_get_value(const mglDataA * dat, long i, long j, long k) function, expected prototype:\ndouble mgl_data_get_value(const mglDataA * dat, long i, long j, long k)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	long i=(long)lua_tointeger(L,2);
	long j=(long)lua_tointeger(L,3);
	long k=(long)lua_tointeger(L,4);

	double lret = mgl_data_get_value(dat, i, j, k);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_get_value_(uintptr_t * d, int * i, int * j, int * k)
static int _bind_mgl_data_get_value_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_get_value_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_get_value_(uintptr_t * d, int * i, int * j, int * k) function, expected prototype:\ndouble mgl_data_get_value_(uintptr_t * d, int * i, int * j, int * k)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	int i=(int)lua_tointeger(L,2);
	int j=(int)lua_tointeger(L,3);
	int k=(int)lua_tointeger(L,4);

	double lret = mgl_data_get_value_(d, &i, &j, &k);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_data_set_values(mglData * dat, const char * val, long nx, long ny, long nz)
static int _bind_mgl_data_set_values(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_values(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_values(mglData * dat, const char * val, long nx, long ny, long nz) function, expected prototype:\nvoid mgl_data_set_values(mglData * dat, const char * val, long nx, long ny, long nz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * val=(const char *)lua_tostring(L,2);
	long nx=(long)lua_tointeger(L,3);
	long ny=(long)lua_tointeger(L,4);
	long nz=(long)lua_tointeger(L,5);

	mgl_data_set_values(dat, val, nx, ny, nz);

	return 0;
}

// void mgl_data_set_values_(uintptr_t * d, const char * val, int * nx, int * ny, int * nz, int l)
static int _bind_mgl_data_set_values_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_values_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_values_(uintptr_t * d, const char * val, int * nx, int * ny, int * nz, int l) function, expected prototype:\nvoid mgl_data_set_values_(uintptr_t * d, const char * val, int * nx, int * ny, int * nz, int l)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	const char * val=(const char *)lua_tostring(L,2);
	int nx=(int)lua_tointeger(L,3);
	int ny=(int)lua_tointeger(L,4);
	int nz=(int)lua_tointeger(L,5);
	int l=(int)lua_tointeger(L,6);

	mgl_data_set_values_(d, val, &nx, &ny, &nz, l);

	return 0;
}

// int mgl_data_read_hdf(mglData * d, const char * fname, const char * data)
static int _bind_mgl_data_read_hdf(lua_State *L) {
	if (!_lg_typecheck_mgl_data_read_hdf(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_read_hdf(mglData * d, const char * fname, const char * data) function, expected prototype:\nint mgl_data_read_hdf(mglData * d, const char * fname, const char * data)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* d=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * data=(const char *)lua_tostring(L,3);

	int lret = mgl_data_read_hdf(d, fname, data);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_read_hdf_(uintptr_t * d, const char * fname, const char * data, int l, int n)
static int _bind_mgl_data_read_hdf_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_read_hdf_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_read_hdf_(uintptr_t * d, const char * fname, const char * data, int l, int n) function, expected prototype:\nint mgl_data_read_hdf_(uintptr_t * d, const char * fname, const char * data, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * data=(const char *)lua_tostring(L,3);
	int l=(int)lua_tointeger(L,4);
	int n=(int)lua_tointeger(L,5);

	int lret = mgl_data_read_hdf_(d, fname, data, l, n);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_data_save_hdf(const mglDataA * d, const char * fname, const char * data, int rewrite)
static int _bind_mgl_data_save_hdf(lua_State *L) {
	if (!_lg_typecheck_mgl_data_save_hdf(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_save_hdf(const mglDataA * d, const char * fname, const char * data, int rewrite) function, expected prototype:\nvoid mgl_data_save_hdf(const mglDataA * d, const char * fname, const char * data, int rewrite)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* d=(Luna< mglDataA >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * data=(const char *)lua_tostring(L,3);
	int rewrite=(int)lua_tointeger(L,4);

	mgl_data_save_hdf(d, fname, data, rewrite);

	return 0;
}

// void mgl_data_save_hdf_(uintptr_t * d, const char * fname, const char * data, int * rewrite, int l, int n)
static int _bind_mgl_data_save_hdf_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_save_hdf_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_save_hdf_(uintptr_t * d, const char * fname, const char * data, int * rewrite, int l, int n) function, expected prototype:\nvoid mgl_data_save_hdf_(uintptr_t * d, const char * fname, const char * data, int * rewrite, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * data=(const char *)lua_tostring(L,3);
	int rewrite=(int)lua_tointeger(L,4);
	int l=(int)lua_tointeger(L,5);
	int n=(int)lua_tointeger(L,6);

	mgl_data_save_hdf_(d, fname, data, &rewrite, l, n);

	return 0;
}

// int mgl_datas_hdf(const char * fname, char * buf, long size)
static int _bind_mgl_datas_hdf(lua_State *L) {
	if (!_lg_typecheck_mgl_datas_hdf(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_datas_hdf(const char * fname, char * buf, long size) function, expected prototype:\nint mgl_datas_hdf(const char * fname, char * buf, long size)\nClass arguments details:\n");
	}

	const char * fname=(const char *)lua_tostring(L,1);
	char buf=(char)lua_tointeger(L,2);
	long size=(long)lua_tointeger(L,3);

	int lret = mgl_datas_hdf(fname, &buf, size);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_read(mglData * dat, const char * fname)
static int _bind_mgl_data_read(lua_State *L) {
	if (!_lg_typecheck_mgl_data_read(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_read(mglData * dat, const char * fname) function, expected prototype:\nint mgl_data_read(mglData * dat, const char * fname)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * fname=(const char *)lua_tostring(L,2);

	int lret = mgl_data_read(dat, fname);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_read_(uintptr_t * d, const char * fname, int l)
static int _bind_mgl_data_read_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_read_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_read_(uintptr_t * d, const char * fname, int l) function, expected prototype:\nint mgl_data_read_(uintptr_t * d, const char * fname, int l)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	int l=(int)lua_tointeger(L,3);

	int lret = mgl_data_read_(d, fname, l);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_read_mat(mglData * dat, const char * fname, long dim)
static int _bind_mgl_data_read_mat(lua_State *L) {
	if (!_lg_typecheck_mgl_data_read_mat(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_read_mat(mglData * dat, const char * fname, long dim) function, expected prototype:\nint mgl_data_read_mat(mglData * dat, const char * fname, long dim)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	long dim=(long)lua_tointeger(L,3);

	int lret = mgl_data_read_mat(dat, fname, dim);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_read_mat_(uintptr_t * dat, const char * fname, int * dim, int arg4)
static int _bind_mgl_data_read_mat_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_read_mat_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_read_mat_(uintptr_t * dat, const char * fname, int * dim, int arg4) function, expected prototype:\nint mgl_data_read_mat_(uintptr_t * dat, const char * fname, int * dim, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	int dim=(int)lua_tointeger(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	int lret = mgl_data_read_mat_(dat, fname, &dim, _arg4);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_read_dim(mglData * dat, const char * fname, long mx, long my, long mz)
static int _bind_mgl_data_read_dim(lua_State *L) {
	if (!_lg_typecheck_mgl_data_read_dim(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_read_dim(mglData * dat, const char * fname, long mx, long my, long mz) function, expected prototype:\nint mgl_data_read_dim(mglData * dat, const char * fname, long mx, long my, long mz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	long mx=(long)lua_tointeger(L,3);
	long my=(long)lua_tointeger(L,4);
	long mz=(long)lua_tointeger(L,5);

	int lret = mgl_data_read_dim(dat, fname, mx, my, mz);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_read_dim_(uintptr_t * dat, const char * fname, int * mx, int * my, int * mz, int arg6)
static int _bind_mgl_data_read_dim_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_read_dim_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_read_dim_(uintptr_t * dat, const char * fname, int * mx, int * my, int * mz, int arg6) function, expected prototype:\nint mgl_data_read_dim_(uintptr_t * dat, const char * fname, int * mx, int * my, int * mz, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	int mx=(int)lua_tointeger(L,3);
	int my=(int)lua_tointeger(L,4);
	int mz=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	int lret = mgl_data_read_dim_(dat, fname, &mx, &my, &mz, _arg6);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_read_range(mglData * d, const char * templ, double from, double to, double step, int as_slice)
static int _bind_mgl_data_read_range(lua_State *L) {
	if (!_lg_typecheck_mgl_data_read_range(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_read_range(mglData * d, const char * templ, double from, double to, double step, int as_slice) function, expected prototype:\nint mgl_data_read_range(mglData * d, const char * templ, double from, double to, double step, int as_slice)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* d=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * templ=(const char *)lua_tostring(L,2);
	double from=(double)lua_tonumber(L,3);
	double to=(double)lua_tonumber(L,4);
	double step=(double)lua_tonumber(L,5);
	int as_slice=(int)lua_tointeger(L,6);

	int lret = mgl_data_read_range(d, templ, from, to, step, as_slice);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_read_range_(uintptr_t * d, const char * fname, double * from, double * to, double * step, int * as_slice, int l)
static int _bind_mgl_data_read_range__overload_1(lua_State *L) {
	if (!_lg_typecheck_mgl_data_read_range__overload_1(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_read_range_(uintptr_t * d, const char * fname, double * from, double * to, double * step, int * as_slice, int l) function, expected prototype:\nint mgl_data_read_range_(uintptr_t * d, const char * fname, double * from, double * to, double * step, int * as_slice, int l)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	double from=(double)lua_tonumber(L,3);
	double to=(double)lua_tonumber(L,4);
	double step=(double)lua_tonumber(L,5);
	int as_slice=(int)lua_tointeger(L,6);
	int l=(int)lua_tointeger(L,7);

	int lret = mgl_data_read_range_(d, fname, &from, &to, &step, &as_slice, l);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_read_range_(uintptr_t * d, const char * fname, double * from, double * to, double * step, int * as_slice, int l)
static int _bind_mgl_data_read_range__overload_2(lua_State *L) {
	if (!_lg_typecheck_mgl_data_read_range__overload_2(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_read_range_(uintptr_t * d, const char * fname, double * from, double * to, double * step, int * as_slice, int l) function, expected prototype:\nint mgl_data_read_range_(uintptr_t * d, const char * fname, double * from, double * to, double * step, int * as_slice, int l)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	double from=(double)lua_tonumber(L,3);
	double to=(double)lua_tonumber(L,4);
	double step=(double)lua_tonumber(L,5);
	int as_slice=(int)lua_tointeger(L,6);
	int l=(int)lua_tointeger(L,7);

	int lret = mgl_data_read_range_(d, fname, &from, &to, &step, &as_slice, l);
	lua_pushnumber(L,lret);

	return 1;
}

// Overload binder for mgl_data_read_range_
static int _bind_mgl_data_read_range_(lua_State *L) {
	if (_lg_typecheck_mgl_data_read_range__overload_1(L)) return _bind_mgl_data_read_range__overload_1(L);
	if (_lg_typecheck_mgl_data_read_range__overload_2(L)) return _bind_mgl_data_read_range__overload_2(L);

	luaL_error(L, "error in function mgl_data_read_range_, cannot match any of the overloads for function mgl_data_read_range_:\n  mgl_data_read_range_(uintptr_t *, const char *, double *, double *, double *, int *, int)\n  mgl_data_read_range_(uintptr_t *, const char *, double *, double *, double *, int *, int)\n");
	return 0;
}

// int mgl_data_read_all(mglData * dat, const char * templ, int as_slice)
static int _bind_mgl_data_read_all(lua_State *L) {
	if (!_lg_typecheck_mgl_data_read_all(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_read_all(mglData * dat, const char * templ, int as_slice) function, expected prototype:\nint mgl_data_read_all(mglData * dat, const char * templ, int as_slice)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * templ=(const char *)lua_tostring(L,2);
	int as_slice=(int)lua_tointeger(L,3);

	int lret = mgl_data_read_all(dat, templ, as_slice);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_read_all_(uintptr_t * d, const char * fname, int * as_slice, int l)
static int _bind_mgl_data_read_all__overload_1(lua_State *L) {
	if (!_lg_typecheck_mgl_data_read_all__overload_1(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_read_all_(uintptr_t * d, const char * fname, int * as_slice, int l) function, expected prototype:\nint mgl_data_read_all_(uintptr_t * d, const char * fname, int * as_slice, int l)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	int as_slice=(int)lua_tointeger(L,3);
	int l=(int)lua_tointeger(L,4);

	int lret = mgl_data_read_all_(d, fname, &as_slice, l);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_read_all_(uintptr_t * d, const char * fname, int * as_slice, int l)
static int _bind_mgl_data_read_all__overload_2(lua_State *L) {
	if (!_lg_typecheck_mgl_data_read_all__overload_2(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_read_all_(uintptr_t * d, const char * fname, int * as_slice, int l) function, expected prototype:\nint mgl_data_read_all_(uintptr_t * d, const char * fname, int * as_slice, int l)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	int as_slice=(int)lua_tointeger(L,3);
	int l=(int)lua_tointeger(L,4);

	int lret = mgl_data_read_all_(d, fname, &as_slice, l);
	lua_pushnumber(L,lret);

	return 1;
}

// Overload binder for mgl_data_read_all_
static int _bind_mgl_data_read_all_(lua_State *L) {
	if (_lg_typecheck_mgl_data_read_all__overload_1(L)) return _bind_mgl_data_read_all__overload_1(L);
	if (_lg_typecheck_mgl_data_read_all__overload_2(L)) return _bind_mgl_data_read_all__overload_2(L);

	luaL_error(L, "error in function mgl_data_read_all_, cannot match any of the overloads for function mgl_data_read_all_:\n  mgl_data_read_all_(uintptr_t *, const char *, int *, int)\n  mgl_data_read_all_(uintptr_t *, const char *, int *, int)\n");
	return 0;
}

// void mgl_data_save(const mglDataA * dat, const char * fname, long ns)
static int _bind_mgl_data_save(lua_State *L) {
	if (!_lg_typecheck_mgl_data_save(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_save(const mglDataA * dat, const char * fname, long ns) function, expected prototype:\nvoid mgl_data_save(const mglDataA * dat, const char * fname, long ns)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	long ns=(long)lua_tointeger(L,3);

	mgl_data_save(dat, fname, ns);

	return 0;
}

// void mgl_data_save_(uintptr_t * dat, const char * fname, int * ns, int arg4)
static int _bind_mgl_data_save_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_save_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_save_(uintptr_t * dat, const char * fname, int * ns, int arg4) function, expected prototype:\nvoid mgl_data_save_(uintptr_t * dat, const char * fname, int * ns, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	int ns=(int)lua_tointeger(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_data_save_(dat, fname, &ns, _arg4);

	return 0;
}

// void mgl_data_export(const mglDataA * dat, const char * fname, const char * scheme, double v1, double v2, long ns)
static int _bind_mgl_data_export(lua_State *L) {
	if (!_lg_typecheck_mgl_data_export(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_export(const mglDataA * dat, const char * fname, const char * scheme, double v1, double v2, long ns) function, expected prototype:\nvoid mgl_data_export(const mglDataA * dat, const char * fname, const char * scheme, double v1, double v2, long ns)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * scheme=(const char *)lua_tostring(L,3);
	double v1=(double)lua_tonumber(L,4);
	double v2=(double)lua_tonumber(L,5);
	long ns=(long)lua_tointeger(L,6);

	mgl_data_export(dat, fname, scheme, v1, v2, ns);

	return 0;
}

// void mgl_data_export_(uintptr_t * dat, const char * fname, const char * scheme, double * v1, double * v2, int * ns, int arg7, int arg8)
static int _bind_mgl_data_export_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_export_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_export_(uintptr_t * dat, const char * fname, const char * scheme, double * v1, double * v2, int * ns, int arg7, int arg8) function, expected prototype:\nvoid mgl_data_export_(uintptr_t * dat, const char * fname, const char * scheme, double * v1, double * v2, int * ns, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * scheme=(const char *)lua_tostring(L,3);
	double v1=(double)lua_tonumber(L,4);
	double v2=(double)lua_tonumber(L,5);
	int ns=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_data_export_(dat, fname, scheme, &v1, &v2, &ns, _arg7, _arg8);

	return 0;
}

// void mgl_data_import(mglData * dat, const char * fname, const char * scheme, double v1, double v2)
static int _bind_mgl_data_import(lua_State *L) {
	if (!_lg_typecheck_mgl_data_import(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_import(mglData * dat, const char * fname, const char * scheme, double v1, double v2) function, expected prototype:\nvoid mgl_data_import(mglData * dat, const char * fname, const char * scheme, double v1, double v2)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * scheme=(const char *)lua_tostring(L,3);
	double v1=(double)lua_tonumber(L,4);
	double v2=(double)lua_tonumber(L,5);

	mgl_data_import(dat, fname, scheme, v1, v2);

	return 0;
}

// void mgl_data_import_(uintptr_t * dat, const char * fname, const char * scheme, double * v1, double * v2, int arg6, int arg7)
static int _bind_mgl_data_import_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_import_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_import_(uintptr_t * dat, const char * fname, const char * scheme, double * v1, double * v2, int arg6, int arg7) function, expected prototype:\nvoid mgl_data_import_(uintptr_t * dat, const char * fname, const char * scheme, double * v1, double * v2, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * scheme=(const char *)lua_tostring(L,3);
	double v1=(double)lua_tonumber(L,4);
	double v2=(double)lua_tonumber(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_data_import_(dat, fname, scheme, &v1, &v2, _arg6, _arg7);

	return 0;
}

// void mgl_data_create(mglData * dat, long nx, long ny, long nz)
static int _bind_mgl_data_create(lua_State *L) {
	if (!_lg_typecheck_mgl_data_create(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_create(mglData * dat, long nx, long ny, long nz) function, expected prototype:\nvoid mgl_data_create(mglData * dat, long nx, long ny, long nz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	long nx=(long)lua_tointeger(L,2);
	long ny=(long)lua_tointeger(L,3);
	long nz=(long)lua_tointeger(L,4);

	mgl_data_create(dat, nx, ny, nz);

	return 0;
}

// void mgl_data_create_(uintptr_t * dat, int * nx, int * ny, int * nz)
static int _bind_mgl_data_create_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_create_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_create_(uintptr_t * dat, int * nx, int * ny, int * nz) function, expected prototype:\nvoid mgl_data_create_(uintptr_t * dat, int * nx, int * ny, int * nz)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int nx=(int)lua_tointeger(L,2);
	int ny=(int)lua_tointeger(L,3);
	int nz=(int)lua_tointeger(L,4);

	mgl_data_create_(dat, &nx, &ny, &nz);

	return 0;
}

// void mgl_data_transpose(mglData * dat, const char * dim)
static int _bind_mgl_data_transpose(lua_State *L) {
	if (!_lg_typecheck_mgl_data_transpose(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_transpose(mglData * dat, const char * dim) function, expected prototype:\nvoid mgl_data_transpose(mglData * dat, const char * dim)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * dim=(const char *)lua_tostring(L,2);

	mgl_data_transpose(dat, dim);

	return 0;
}

// void mgl_data_transpose_(uintptr_t * dat, const char * dim, int arg3)
static int _bind_mgl_data_transpose_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_transpose_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_transpose_(uintptr_t * dat, const char * dim, int arg3) function, expected prototype:\nvoid mgl_data_transpose_(uintptr_t * dat, const char * dim, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dim=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_data_transpose_(dat, dim, _arg3);

	return 0;
}

// void mgl_data_norm(mglData * dat, double v1, double v2, long sym, long dim)
static int _bind_mgl_data_norm(lua_State *L) {
	if (!_lg_typecheck_mgl_data_norm(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_norm(mglData * dat, double v1, double v2, long sym, long dim) function, expected prototype:\nvoid mgl_data_norm(mglData * dat, double v1, double v2, long sym, long dim)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	double v1=(double)lua_tonumber(L,2);
	double v2=(double)lua_tonumber(L,3);
	long sym=(long)lua_tointeger(L,4);
	long dim=(long)lua_tointeger(L,5);

	mgl_data_norm(dat, v1, v2, sym, dim);

	return 0;
}

// void mgl_data_norm_(uintptr_t * dat, double * v1, double * v2, int * sym, int * dim)
static int _bind_mgl_data_norm_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_norm_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_norm_(uintptr_t * dat, double * v1, double * v2, int * sym, int * dim) function, expected prototype:\nvoid mgl_data_norm_(uintptr_t * dat, double * v1, double * v2, int * sym, int * dim)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double v1=(double)lua_tonumber(L,2);
	double v2=(double)lua_tonumber(L,3);
	int sym=(int)lua_tointeger(L,4);
	int dim=(int)lua_tointeger(L,5);

	mgl_data_norm_(dat, &v1, &v2, &sym, &dim);

	return 0;
}

// void mgl_data_norm_slice(mglData * dat, double v1, double v2, char dir, long keep_en, long sym)
static int _bind_mgl_data_norm_slice(lua_State *L) {
	if (!_lg_typecheck_mgl_data_norm_slice(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_norm_slice(mglData * dat, double v1, double v2, char dir, long keep_en, long sym) function, expected prototype:\nvoid mgl_data_norm_slice(mglData * dat, double v1, double v2, char dir, long keep_en, long sym)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	double v1=(double)lua_tonumber(L,2);
	double v2=(double)lua_tonumber(L,3);
	char dir=(char)lua_tointeger(L,4);
	long keep_en=(long)lua_tointeger(L,5);
	long sym=(long)lua_tointeger(L,6);

	mgl_data_norm_slice(dat, v1, v2, dir, keep_en, sym);

	return 0;
}

// void mgl_data_norm_slice_(uintptr_t * dat, double * v1, double * v2, char * dir, int * keep_en, int * sym, int l)
static int _bind_mgl_data_norm_slice_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_norm_slice_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_norm_slice_(uintptr_t * dat, double * v1, double * v2, char * dir, int * keep_en, int * sym, int l) function, expected prototype:\nvoid mgl_data_norm_slice_(uintptr_t * dat, double * v1, double * v2, char * dir, int * keep_en, int * sym, int l)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double v1=(double)lua_tonumber(L,2);
	double v2=(double)lua_tonumber(L,3);
	char dir=(char)lua_tointeger(L,4);
	int keep_en=(int)lua_tointeger(L,5);
	int sym=(int)lua_tointeger(L,6);
	int l=(int)lua_tointeger(L,7);

	mgl_data_norm_slice_(dat, &v1, &v2, &dir, &keep_en, &sym, l);

	return 0;
}

// mglData * mgl_data_subdata(const mglDataA * dat, long xx, long yy, long zz)
static int _bind_mgl_data_subdata(lua_State *L) {
	if (!_lg_typecheck_mgl_data_subdata(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_subdata(const mglDataA * dat, long xx, long yy, long zz) function, expected prototype:\nmglData * mgl_data_subdata(const mglDataA * dat, long xx, long yy, long zz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	long xx=(long)lua_tointeger(L,2);
	long yy=(long)lua_tointeger(L,3);
	long zz=(long)lua_tointeger(L,4);

	mglData * lret = mgl_data_subdata(dat, xx, yy, zz);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_subdata_(uintptr_t * dat, int * xx, int * yy, int * zz)
static int _bind_mgl_data_subdata_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_subdata_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_subdata_(uintptr_t * dat, int * xx, int * yy, int * zz) function, expected prototype:\nuintptr_t mgl_data_subdata_(uintptr_t * dat, int * xx, int * yy, int * zz)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int xx=(int)lua_tointeger(L,2);
	int yy=(int)lua_tointeger(L,3);
	int zz=(int)lua_tointeger(L,4);

	uintptr_t stack_lret = mgl_data_subdata_(dat, &xx, &yy, &zz);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_data_subdata_ext(const mglDataA * dat, const mglDataA * xx, const mglDataA * yy, const mglDataA * zz)
static int _bind_mgl_data_subdata_ext(lua_State *L) {
	if (!_lg_typecheck_mgl_data_subdata_ext(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_subdata_ext(const mglDataA * dat, const mglDataA * xx, const mglDataA * yy, const mglDataA * zz) function, expected prototype:\nmglData * mgl_data_subdata_ext(const mglDataA * dat, const mglDataA * xx, const mglDataA * yy, const mglDataA * zz)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	const mglDataA* xx=(Luna< mglDataA >::check(L,2));
	const mglDataA* yy=(Luna< mglDataA >::check(L,3));
	const mglDataA* zz=(Luna< mglDataA >::check(L,4));

	mglData * lret = mgl_data_subdata_ext(dat, xx, yy, zz);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_subdata_ext_(uintptr_t * dat, uintptr_t * xx, uintptr_t * yy, uintptr_t * zz)
static int _bind_mgl_data_subdata_ext_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_subdata_ext_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_subdata_ext_(uintptr_t * dat, uintptr_t * xx, uintptr_t * yy, uintptr_t * zz) function, expected prototype:\nuintptr_t mgl_data_subdata_ext_(uintptr_t * dat, uintptr_t * xx, uintptr_t * yy, uintptr_t * zz)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	uintptr_t* xx=(Luna< uintptr_t >::check(L,2));
	uintptr_t* yy=(Luna< uintptr_t >::check(L,3));
	uintptr_t* zz=(Luna< uintptr_t >::check(L,4));

	uintptr_t stack_lret = mgl_data_subdata_ext_(dat, xx, yy, zz);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_data_column(const mglDataA * dat, const char * eq)
static int _bind_mgl_data_column(lua_State *L) {
	if (!_lg_typecheck_mgl_data_column(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_column(const mglDataA * dat, const char * eq) function, expected prototype:\nmglData * mgl_data_column(const mglDataA * dat, const char * eq)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	const char * eq=(const char *)lua_tostring(L,2);

	mglData * lret = mgl_data_column(dat, eq);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_column_(uintptr_t * dat, const char * eq, int l)
static int _bind_mgl_data_column_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_column_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_column_(uintptr_t * dat, const char * eq, int l) function, expected prototype:\nuintptr_t mgl_data_column_(uintptr_t * dat, const char * eq, int l)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * eq=(const char *)lua_tostring(L,2);
	int l=(int)lua_tointeger(L,3);

	uintptr_t stack_lret = mgl_data_column_(dat, eq, l);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// void mgl_data_set_id(mglData * d, const char * id)
static int _bind_mgl_data_set_id(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_id(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_id(mglData * d, const char * id) function, expected prototype:\nvoid mgl_data_set_id(mglData * d, const char * id)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* d=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * id=(const char *)lua_tostring(L,2);

	mgl_data_set_id(d, id);

	return 0;
}

// void mgl_data_set_id_(uintptr_t * dat, const char * id, int l)
static int _bind_mgl_data_set_id_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_set_id_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_set_id_(uintptr_t * dat, const char * id, int l) function, expected prototype:\nvoid mgl_data_set_id_(uintptr_t * dat, const char * id, int l)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * id=(const char *)lua_tostring(L,2);
	int l=(int)lua_tointeger(L,3);

	mgl_data_set_id_(dat, id, l);

	return 0;
}

// void mgl_data_fill(mglData * dat, double x1, double x2, char dir)
static int _bind_mgl_data_fill(lua_State *L) {
	if (!_lg_typecheck_mgl_data_fill(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_fill(mglData * dat, double x1, double x2, char dir) function, expected prototype:\nvoid mgl_data_fill(mglData * dat, double x1, double x2, char dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	double x1=(double)lua_tonumber(L,2);
	double x2=(double)lua_tonumber(L,3);
	char dir=(char)lua_tointeger(L,4);

	mgl_data_fill(dat, x1, x2, dir);

	return 0;
}

// void mgl_data_fill_(uintptr_t * dat, double * x1, double * x2, const char * dir, int arg5)
static int _bind_mgl_data_fill_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_fill_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_fill_(uintptr_t * dat, double * x1, double * x2, const char * dir, int arg5) function, expected prototype:\nvoid mgl_data_fill_(uintptr_t * dat, double * x1, double * x2, const char * dir, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double x2=(double)lua_tonumber(L,3);
	const char * dir=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_data_fill_(dat, &x1, &x2, dir, _arg5);

	return 0;
}

// void mgl_data_fill_eq(mglBase * gr, mglData * dat, const char * eq, const mglDataA * vdat, const mglDataA * wdat, const char * opt)
static int _bind_mgl_data_fill_eq(lua_State *L) {
	if (!_lg_typecheck_mgl_data_fill_eq(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_fill_eq(mglBase * gr, mglData * dat, const char * eq, const mglDataA * vdat, const mglDataA * wdat, const char * opt) function, expected prototype:\nvoid mgl_data_fill_eq(mglBase * gr, mglData * dat, const char * eq, const mglDataA * vdat, const mglDataA * wdat, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,2));
	const char * eq=(const char *)lua_tostring(L,3);
	const mglDataA* vdat=(Luna< mglDataA >::check(L,4));
	const mglDataA* wdat=(Luna< mglDataA >::check(L,5));
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_data_fill_eq(gr, dat, eq, vdat, wdat, opt);

	return 0;
}

// void mgl_data_fill_eq_(uintptr_t * gr, uintptr_t * dat, const char * eq, uintptr_t * vdat, uintptr_t * wdat, const char * opt, int arg7, int arg8)
static int _bind_mgl_data_fill_eq_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_fill_eq_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_fill_eq_(uintptr_t * gr, uintptr_t * dat, const char * eq, uintptr_t * vdat, uintptr_t * wdat, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_data_fill_eq_(uintptr_t * gr, uintptr_t * dat, const char * eq, uintptr_t * vdat, uintptr_t * wdat, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* dat=(Luna< uintptr_t >::check(L,2));
	const char * eq=(const char *)lua_tostring(L,3);
	uintptr_t* vdat=(Luna< uintptr_t >::check(L,4));
	uintptr_t* wdat=(Luna< uintptr_t >::check(L,5));
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_data_fill_eq_(gr, dat, eq, vdat, wdat, opt, _arg7, _arg8);

	return 0;
}

// void mgl_data_grid(mglBase * gr, mglData * d, const mglDataA * xdat, const mglDataA * ydat, const mglDataA * zdat, const char * opt)
static int _bind_mgl_data_grid(lua_State *L) {
	if (!_lg_typecheck_mgl_data_grid(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_grid(mglBase * gr, mglData * d, const mglDataA * xdat, const mglDataA * ydat, const mglDataA * zdat, const char * opt) function, expected prototype:\nvoid mgl_data_grid(mglBase * gr, mglData * d, const mglDataA * xdat, const mglDataA * ydat, const mglDataA * zdat, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	mglData* d=(Luna< mglDataA >::checkSubType< mglData >(L,2));
	const mglDataA* xdat=(Luna< mglDataA >::check(L,3));
	const mglDataA* ydat=(Luna< mglDataA >::check(L,4));
	const mglDataA* zdat=(Luna< mglDataA >::check(L,5));
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_data_grid(gr, d, xdat, ydat, zdat, opt);

	return 0;
}

// void mgl_data_grid_(uintptr_t * gr, uintptr_t * dat, uintptr_t * xdat, uintptr_t * ydat, uintptr_t * zdat, const char * opt, int arg7)
static int _bind_mgl_data_grid_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_grid_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_grid_(uintptr_t * gr, uintptr_t * dat, uintptr_t * xdat, uintptr_t * ydat, uintptr_t * zdat, const char * opt, int arg7) function, expected prototype:\nvoid mgl_data_grid_(uintptr_t * gr, uintptr_t * dat, uintptr_t * xdat, uintptr_t * ydat, uintptr_t * zdat, const char * opt, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* dat=(Luna< uintptr_t >::check(L,2));
	uintptr_t* xdat=(Luna< uintptr_t >::check(L,3));
	uintptr_t* ydat=(Luna< uintptr_t >::check(L,4));
	uintptr_t* zdat=(Luna< uintptr_t >::check(L,5));
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_data_grid_(gr, dat, xdat, ydat, zdat, opt, _arg7);

	return 0;
}

// void mgl_data_put_val(mglData * dat, double val, long i, long j, long k)
static int _bind_mgl_data_put_val(lua_State *L) {
	if (!_lg_typecheck_mgl_data_put_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_put_val(mglData * dat, double val, long i, long j, long k) function, expected prototype:\nvoid mgl_data_put_val(mglData * dat, double val, long i, long j, long k)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	double val=(double)lua_tonumber(L,2);
	long i=(long)lua_tointeger(L,3);
	long j=(long)lua_tointeger(L,4);
	long k=(long)lua_tointeger(L,5);

	mgl_data_put_val(dat, val, i, j, k);

	return 0;
}

// void mgl_data_put_val_(uintptr_t * dat, double * val, int * i, int * j, int * k)
static int _bind_mgl_data_put_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_put_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_put_val_(uintptr_t * dat, double * val, int * i, int * j, int * k) function, expected prototype:\nvoid mgl_data_put_val_(uintptr_t * dat, double * val, int * i, int * j, int * k)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double val=(double)lua_tonumber(L,2);
	int i=(int)lua_tointeger(L,3);
	int j=(int)lua_tointeger(L,4);
	int k=(int)lua_tointeger(L,5);

	mgl_data_put_val_(dat, &val, &i, &j, &k);

	return 0;
}

// void mgl_data_put_dat(mglData * dat, const mglDataA * val, long i, long j, long k)
static int _bind_mgl_data_put_dat(lua_State *L) {
	if (!_lg_typecheck_mgl_data_put_dat(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_put_dat(mglData * dat, const mglDataA * val, long i, long j, long k) function, expected prototype:\nvoid mgl_data_put_dat(mglData * dat, const mglDataA * val, long i, long j, long k)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const mglDataA* val=(Luna< mglDataA >::check(L,2));
	long i=(long)lua_tointeger(L,3);
	long j=(long)lua_tointeger(L,4);
	long k=(long)lua_tointeger(L,5);

	mgl_data_put_dat(dat, val, i, j, k);

	return 0;
}

// void mgl_data_put_dat_(uintptr_t * dat, uintptr_t * val, int * i, int * j, int * k)
static int _bind_mgl_data_put_dat_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_put_dat_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_put_dat_(uintptr_t * dat, uintptr_t * val, int * i, int * j, int * k) function, expected prototype:\nvoid mgl_data_put_dat_(uintptr_t * dat, uintptr_t * val, int * i, int * j, int * k)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	uintptr_t* val=(Luna< uintptr_t >::check(L,2));
	int i=(int)lua_tointeger(L,3);
	int j=(int)lua_tointeger(L,4);
	int k=(int)lua_tointeger(L,5);

	mgl_data_put_dat_(dat, val, &i, &j, &k);

	return 0;
}

// void mgl_data_modify(mglData * dat, const char * eq, long dim)
static int _bind_mgl_data_modify(lua_State *L) {
	if (!_lg_typecheck_mgl_data_modify(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_modify(mglData * dat, const char * eq, long dim) function, expected prototype:\nvoid mgl_data_modify(mglData * dat, const char * eq, long dim)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * eq=(const char *)lua_tostring(L,2);
	long dim=(long)lua_tointeger(L,3);

	mgl_data_modify(dat, eq, dim);

	return 0;
}

// void mgl_data_modify_(uintptr_t * dat, const char * eq, int * dim, int arg4)
static int _bind_mgl_data_modify_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_modify_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_modify_(uintptr_t * dat, const char * eq, int * dim, int arg4) function, expected prototype:\nvoid mgl_data_modify_(uintptr_t * dat, const char * eq, int * dim, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * eq=(const char *)lua_tostring(L,2);
	int dim=(int)lua_tointeger(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_data_modify_(dat, eq, &dim, _arg4);

	return 0;
}

// void mgl_data_modify_vw(mglData * dat, const char * eq, const mglDataA * vdat, const mglDataA * wdat)
static int _bind_mgl_data_modify_vw(lua_State *L) {
	if (!_lg_typecheck_mgl_data_modify_vw(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_modify_vw(mglData * dat, const char * eq, const mglDataA * vdat, const mglDataA * wdat) function, expected prototype:\nvoid mgl_data_modify_vw(mglData * dat, const char * eq, const mglDataA * vdat, const mglDataA * wdat)\nClass arguments details:\narg 1 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * eq=(const char *)lua_tostring(L,2);
	const mglDataA* vdat=(Luna< mglDataA >::check(L,3));
	const mglDataA* wdat=(Luna< mglDataA >::check(L,4));

	mgl_data_modify_vw(dat, eq, vdat, wdat);

	return 0;
}

// void mgl_data_modify_vw_(uintptr_t * dat, const char * eq, uintptr_t * vdat, uintptr_t * wdat, int arg5)
static int _bind_mgl_data_modify_vw_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_modify_vw_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_modify_vw_(uintptr_t * dat, const char * eq, uintptr_t * vdat, uintptr_t * wdat, int arg5) function, expected prototype:\nvoid mgl_data_modify_vw_(uintptr_t * dat, const char * eq, uintptr_t * vdat, uintptr_t * wdat, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * eq=(const char *)lua_tostring(L,2);
	uintptr_t* vdat=(Luna< uintptr_t >::check(L,3));
	uintptr_t* wdat=(Luna< uintptr_t >::check(L,4));
	int _arg5=(int)lua_tointeger(L,5);

	mgl_data_modify_vw_(dat, eq, vdat, wdat, _arg5);

	return 0;
}

// void mgl_data_squeeze(mglData * dat, long rx, long ry, long rz, long smooth)
static int _bind_mgl_data_squeeze(lua_State *L) {
	if (!_lg_typecheck_mgl_data_squeeze(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_squeeze(mglData * dat, long rx, long ry, long rz, long smooth) function, expected prototype:\nvoid mgl_data_squeeze(mglData * dat, long rx, long ry, long rz, long smooth)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	long rx=(long)lua_tointeger(L,2);
	long ry=(long)lua_tointeger(L,3);
	long rz=(long)lua_tointeger(L,4);
	long smooth=(long)lua_tointeger(L,5);

	mgl_data_squeeze(dat, rx, ry, rz, smooth);

	return 0;
}

// void mgl_data_squeeze_(uintptr_t * dat, int * rx, int * ry, int * rz, int * smooth)
static int _bind_mgl_data_squeeze_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_squeeze_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_squeeze_(uintptr_t * dat, int * rx, int * ry, int * rz, int * smooth) function, expected prototype:\nvoid mgl_data_squeeze_(uintptr_t * dat, int * rx, int * ry, int * rz, int * smooth)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int rx=(int)lua_tointeger(L,2);
	int ry=(int)lua_tointeger(L,3);
	int rz=(int)lua_tointeger(L,4);
	int smooth=(int)lua_tointeger(L,5);

	mgl_data_squeeze_(dat, &rx, &ry, &rz, &smooth);

	return 0;
}

// double mgl_data_max(const mglDataA * dat)
static int _bind_mgl_data_max(lua_State *L) {
	if (!_lg_typecheck_mgl_data_max(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_max(const mglDataA * dat) function, expected prototype:\ndouble mgl_data_max(const mglDataA * dat)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));

	double lret = mgl_data_max(dat);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_max_(uintptr_t * dat)
static int _bind_mgl_data_max_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_max_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_max_(uintptr_t * dat) function, expected prototype:\ndouble mgl_data_max_(uintptr_t * dat)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));

	double lret = mgl_data_max_(dat);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_min(const mglDataA * dat)
static int _bind_mgl_data_min(lua_State *L) {
	if (!_lg_typecheck_mgl_data_min(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_min(const mglDataA * dat) function, expected prototype:\ndouble mgl_data_min(const mglDataA * dat)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));

	double lret = mgl_data_min(dat);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_min_(uintptr_t * dat)
static int _bind_mgl_data_min_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_min_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_min_(uintptr_t * dat) function, expected prototype:\ndouble mgl_data_min_(uintptr_t * dat)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));

	double lret = mgl_data_min_(dat);
	lua_pushnumber(L,lret);

	return 1;
}

// double * mgl_data_value(mglData * dat, long i, long j, long k)
static int _bind_mgl_data_value(lua_State *L) {
	if (!_lg_typecheck_mgl_data_value(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double * mgl_data_value(mglData * dat, long i, long j, long k) function, expected prototype:\ndouble * mgl_data_value(mglData * dat, long i, long j, long k)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	long i=(long)lua_tointeger(L,2);
	long j=(long)lua_tointeger(L,3);
	long k=(long)lua_tointeger(L,4);

	double * lret = mgl_data_value(dat, i, j, k);
	lua_pushnumber(L,*lret);

	return 1;
}

// double * mgl_data_data(mglData * dat)
static int _bind_mgl_data_data(lua_State *L) {
	if (!_lg_typecheck_mgl_data_data(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double * mgl_data_data(mglData * dat) function, expected prototype:\ndouble * mgl_data_data(mglData * dat)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));

	double * lret = mgl_data_data(dat);
	lua_pushnumber(L,*lret);

	return 1;
}

// long mgl_data_get_nx(const mglDataA * d)
static int _bind_mgl_data_get_nx(lua_State *L) {
	if (!_lg_typecheck_mgl_data_get_nx(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_data_get_nx(const mglDataA * d) function, expected prototype:\nlong mgl_data_get_nx(const mglDataA * d)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* d=(Luna< mglDataA >::check(L,1));

	long lret = mgl_data_get_nx(d);
	lua_pushnumber(L,lret);

	return 1;
}

// long mgl_data_get_nx_(uintptr_t * d)
static int _bind_mgl_data_get_nx_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_get_nx_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_data_get_nx_(uintptr_t * d) function, expected prototype:\nlong mgl_data_get_nx_(uintptr_t * d)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));

	long lret = mgl_data_get_nx_(d);
	lua_pushnumber(L,lret);

	return 1;
}

// long mgl_data_get_ny(const mglDataA * d)
static int _bind_mgl_data_get_ny(lua_State *L) {
	if (!_lg_typecheck_mgl_data_get_ny(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_data_get_ny(const mglDataA * d) function, expected prototype:\nlong mgl_data_get_ny(const mglDataA * d)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* d=(Luna< mglDataA >::check(L,1));

	long lret = mgl_data_get_ny(d);
	lua_pushnumber(L,lret);

	return 1;
}

// long mgl_data_get_ny_(uintptr_t * d)
static int _bind_mgl_data_get_ny_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_get_ny_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_data_get_ny_(uintptr_t * d) function, expected prototype:\nlong mgl_data_get_ny_(uintptr_t * d)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));

	long lret = mgl_data_get_ny_(d);
	lua_pushnumber(L,lret);

	return 1;
}

// long mgl_data_get_nz(const mglDataA * d)
static int _bind_mgl_data_get_nz(lua_State *L) {
	if (!_lg_typecheck_mgl_data_get_nz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_data_get_nz(const mglDataA * d) function, expected prototype:\nlong mgl_data_get_nz(const mglDataA * d)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* d=(Luna< mglDataA >::check(L,1));

	long lret = mgl_data_get_nz(d);
	lua_pushnumber(L,lret);

	return 1;
}

// long mgl_data_get_nz_(uintptr_t * d)
static int _bind_mgl_data_get_nz_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_get_nz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_data_get_nz_(uintptr_t * d) function, expected prototype:\nlong mgl_data_get_nz_(uintptr_t * d)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));

	long lret = mgl_data_get_nz_(d);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_first(const mglDataA * dat, const char * cond, long * i, long * j, long * k)
static int _bind_mgl_data_first(lua_State *L) {
	if (!_lg_typecheck_mgl_data_first(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_first(const mglDataA * dat, const char * cond, long * i, long * j, long * k) function, expected prototype:\ndouble mgl_data_first(const mglDataA * dat, const char * cond, long * i, long * j, long * k)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	const char * cond=(const char *)lua_tostring(L,2);
	long i=(long)lua_tointeger(L,3);
	long j=(long)lua_tointeger(L,4);
	long k=(long)lua_tointeger(L,5);

	double lret = mgl_data_first(dat, cond, &i, &j, &k);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_first_(uintptr_t * dat, const char * cond, int * i, int * j, int * k, int arg6)
static int _bind_mgl_data_first_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_first_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_first_(uintptr_t * dat, const char * cond, int * i, int * j, int * k, int arg6) function, expected prototype:\ndouble mgl_data_first_(uintptr_t * dat, const char * cond, int * i, int * j, int * k, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * cond=(const char *)lua_tostring(L,2);
	int i=(int)lua_tointeger(L,3);
	int j=(int)lua_tointeger(L,4);
	int k=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	double lret = mgl_data_first_(dat, cond, &i, &j, &k, _arg6);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_last(const mglDataA * dat, const char * cond, long * i, long * j, long * k)
static int _bind_mgl_data_last(lua_State *L) {
	if (!_lg_typecheck_mgl_data_last(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_last(const mglDataA * dat, const char * cond, long * i, long * j, long * k) function, expected prototype:\ndouble mgl_data_last(const mglDataA * dat, const char * cond, long * i, long * j, long * k)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	const char * cond=(const char *)lua_tostring(L,2);
	long i=(long)lua_tointeger(L,3);
	long j=(long)lua_tointeger(L,4);
	long k=(long)lua_tointeger(L,5);

	double lret = mgl_data_last(dat, cond, &i, &j, &k);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_last_(uintptr_t * dat, const char * cond, int * i, int * j, int * k, int arg6)
static int _bind_mgl_data_last_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_last_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_last_(uintptr_t * dat, const char * cond, int * i, int * j, int * k, int arg6) function, expected prototype:\ndouble mgl_data_last_(uintptr_t * dat, const char * cond, int * i, int * j, int * k, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * cond=(const char *)lua_tostring(L,2);
	int i=(int)lua_tointeger(L,3);
	int j=(int)lua_tointeger(L,4);
	int k=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	double lret = mgl_data_last_(dat, cond, &i, &j, &k, _arg6);
	lua_pushnumber(L,lret);

	return 1;
}

// long mgl_data_find(const mglDataA * dat, const char * cond, char dir, long i, long j, long k)
static int _bind_mgl_data_find(lua_State *L) {
	if (!_lg_typecheck_mgl_data_find(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in long mgl_data_find(const mglDataA * dat, const char * cond, char dir, long i, long j, long k) function, expected prototype:\nlong mgl_data_find(const mglDataA * dat, const char * cond, char dir, long i, long j, long k)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	const char * cond=(const char *)lua_tostring(L,2);
	char dir=(char)lua_tointeger(L,3);
	long i=(long)lua_tointeger(L,4);
	long j=(long)lua_tointeger(L,5);
	long k=(long)lua_tointeger(L,6);

	long lret = mgl_data_find(dat, cond, dir, i, j, k);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_find_(uintptr_t * dat, const char * cond, char * dir, int * i, int * j, int * k, int arg7, int arg8)
static int _bind_mgl_data_find_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_find_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_find_(uintptr_t * dat, const char * cond, char * dir, int * i, int * j, int * k, int arg7, int arg8) function, expected prototype:\nint mgl_data_find_(uintptr_t * dat, const char * cond, char * dir, int * i, int * j, int * k, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * cond=(const char *)lua_tostring(L,2);
	char dir=(char)lua_tointeger(L,3);
	int i=(int)lua_tointeger(L,4);
	int j=(int)lua_tointeger(L,5);
	int k=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	int lret = mgl_data_find_(dat, cond, &dir, &i, &j, &k, _arg7, _arg8);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_find_any(const mglDataA * dat, const char * cond)
static int _bind_mgl_data_find_any(lua_State *L) {
	if (!_lg_typecheck_mgl_data_find_any(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_find_any(const mglDataA * dat, const char * cond) function, expected prototype:\nint mgl_data_find_any(const mglDataA * dat, const char * cond)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	const char * cond=(const char *)lua_tostring(L,2);

	int lret = mgl_data_find_any(dat, cond);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_data_find_any_(uintptr_t * dat, const char * cond, int arg3)
static int _bind_mgl_data_find_any_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_find_any_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_data_find_any_(uintptr_t * dat, const char * cond, int arg3) function, expected prototype:\nint mgl_data_find_any_(uintptr_t * dat, const char * cond, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * cond=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	int lret = mgl_data_find_any_(dat, cond, _arg3);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_max_int(const mglDataA * dat, long * i, long * j, long * k)
static int _bind_mgl_data_max_int(lua_State *L) {
	if (!_lg_typecheck_mgl_data_max_int(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_max_int(const mglDataA * dat, long * i, long * j, long * k) function, expected prototype:\ndouble mgl_data_max_int(const mglDataA * dat, long * i, long * j, long * k)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	long i=(long)lua_tointeger(L,2);
	long j=(long)lua_tointeger(L,3);
	long k=(long)lua_tointeger(L,4);

	double lret = mgl_data_max_int(dat, &i, &j, &k);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_max_int_(uintptr_t * dat, int * i, int * j, int * k)
static int _bind_mgl_data_max_int_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_max_int_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_max_int_(uintptr_t * dat, int * i, int * j, int * k) function, expected prototype:\ndouble mgl_data_max_int_(uintptr_t * dat, int * i, int * j, int * k)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int i=(int)lua_tointeger(L,2);
	int j=(int)lua_tointeger(L,3);
	int k=(int)lua_tointeger(L,4);

	double lret = mgl_data_max_int_(dat, &i, &j, &k);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_max_real(const mglDataA * dat, double * x, double * y, double * z)
static int _bind_mgl_data_max_real(lua_State *L) {
	if (!_lg_typecheck_mgl_data_max_real(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_max_real(const mglDataA * dat, double * x, double * y, double * z) function, expected prototype:\ndouble mgl_data_max_real(const mglDataA * dat, double * x, double * y, double * z)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	double lret = mgl_data_max_real(dat, &x, &y, &z);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_max_real_(uintptr_t * dat, double * x, double * y, double * z)
static int _bind_mgl_data_max_real_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_max_real_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_max_real_(uintptr_t * dat, double * x, double * y, double * z) function, expected prototype:\ndouble mgl_data_max_real_(uintptr_t * dat, double * x, double * y, double * z)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	double lret = mgl_data_max_real_(dat, &x, &y, &z);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_min_int(const mglDataA * dat, long * i, long * j, long * k)
static int _bind_mgl_data_min_int(lua_State *L) {
	if (!_lg_typecheck_mgl_data_min_int(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_min_int(const mglDataA * dat, long * i, long * j, long * k) function, expected prototype:\ndouble mgl_data_min_int(const mglDataA * dat, long * i, long * j, long * k)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	long i=(long)lua_tointeger(L,2);
	long j=(long)lua_tointeger(L,3);
	long k=(long)lua_tointeger(L,4);

	double lret = mgl_data_min_int(dat, &i, &j, &k);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_min_int_(uintptr_t * dat, int * i, int * j, int * k)
static int _bind_mgl_data_min_int_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_min_int_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_min_int_(uintptr_t * dat, int * i, int * j, int * k) function, expected prototype:\ndouble mgl_data_min_int_(uintptr_t * dat, int * i, int * j, int * k)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int i=(int)lua_tointeger(L,2);
	int j=(int)lua_tointeger(L,3);
	int k=(int)lua_tointeger(L,4);

	double lret = mgl_data_min_int_(dat, &i, &j, &k);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_min_real(const mglDataA * dat, double * x, double * y, double * z)
static int _bind_mgl_data_min_real(lua_State *L) {
	if (!_lg_typecheck_mgl_data_min_real(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_min_real(const mglDataA * dat, double * x, double * y, double * z) function, expected prototype:\ndouble mgl_data_min_real(const mglDataA * dat, double * x, double * y, double * z)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	double lret = mgl_data_min_real(dat, &x, &y, &z);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_min_real_(uintptr_t * dat, double * x, double * y, double * z)
static int _bind_mgl_data_min_real_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_min_real_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_min_real_(uintptr_t * dat, double * x, double * y, double * z) function, expected prototype:\ndouble mgl_data_min_real_(uintptr_t * dat, double * x, double * y, double * z)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	double lret = mgl_data_min_real_(dat, &x, &y, &z);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_momentum_val(const mglDataA * d, char dir, double * m, double * w, double * s, double * k)
static int _bind_mgl_data_momentum_val(lua_State *L) {
	if (!_lg_typecheck_mgl_data_momentum_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_momentum_val(const mglDataA * d, char dir, double * m, double * w, double * s, double * k) function, expected prototype:\ndouble mgl_data_momentum_val(const mglDataA * d, char dir, double * m, double * w, double * s, double * k)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* d=(Luna< mglDataA >::check(L,1));
	char dir=(char)lua_tointeger(L,2);
	double m=(double)lua_tonumber(L,3);
	double w=(double)lua_tonumber(L,4);
	double s=(double)lua_tonumber(L,5);
	double k=(double)lua_tonumber(L,6);

	double lret = mgl_data_momentum_val(d, dir, &m, &w, &s, &k);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_momentum_val_(uintptr_t * dat, char * dir, double * m, double * w, double * s, double * k, int arg7)
static int _bind_mgl_data_momentum_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_momentum_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_momentum_val_(uintptr_t * dat, char * dir, double * m, double * w, double * s, double * k, int arg7) function, expected prototype:\ndouble mgl_data_momentum_val_(uintptr_t * dat, char * dir, double * m, double * w, double * s, double * k, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	char dir=(char)lua_tointeger(L,2);
	double m=(double)lua_tonumber(L,3);
	double w=(double)lua_tonumber(L,4);
	double s=(double)lua_tonumber(L,5);
	double k=(double)lua_tonumber(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	double lret = mgl_data_momentum_val_(dat, &dir, &m, &w, &s, &k, _arg7);
	lua_pushnumber(L,lret);

	return 1;
}

// mglData * mgl_data_combine(const mglDataA * dat1, const mglDataA * dat2)
static int _bind_mgl_data_combine(lua_State *L) {
	if (!_lg_typecheck_mgl_data_combine(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_combine(const mglDataA * dat1, const mglDataA * dat2) function, expected prototype:\nmglData * mgl_data_combine(const mglDataA * dat1, const mglDataA * dat2)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	const mglDataA* dat1=(Luna< mglDataA >::check(L,1));
	const mglDataA* dat2=(Luna< mglDataA >::check(L,2));

	mglData * lret = mgl_data_combine(dat1, dat2);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_combine_(uintptr_t * dat1, uintptr_t * dat2)
static int _bind_mgl_data_combine_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_combine_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_combine_(uintptr_t * dat1, uintptr_t * dat2) function, expected prototype:\nuintptr_t mgl_data_combine_(uintptr_t * dat1, uintptr_t * dat2)\nClass arguments details:\n");
	}

	uintptr_t* dat1=(Luna< uintptr_t >::check(L,1));
	uintptr_t* dat2=(Luna< uintptr_t >::check(L,2));

	uintptr_t stack_lret = mgl_data_combine_(dat1, dat2);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// void mgl_data_extend(mglData * dat, long n1, long n2)
static int _bind_mgl_data_extend(lua_State *L) {
	if (!_lg_typecheck_mgl_data_extend(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_extend(mglData * dat, long n1, long n2) function, expected prototype:\nvoid mgl_data_extend(mglData * dat, long n1, long n2)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	long n1=(long)lua_tointeger(L,2);
	long n2=(long)lua_tointeger(L,3);

	mgl_data_extend(dat, n1, n2);

	return 0;
}

// void mgl_data_extend_(uintptr_t * dat, int * n1, int * n2)
static int _bind_mgl_data_extend_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_extend_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_extend_(uintptr_t * dat, int * n1, int * n2) function, expected prototype:\nvoid mgl_data_extend_(uintptr_t * dat, int * n1, int * n2)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int n1=(int)lua_tointeger(L,2);
	int n2=(int)lua_tointeger(L,3);

	mgl_data_extend_(dat, &n1, &n2);

	return 0;
}

// void mgl_data_insert(mglData * dat, char dir, long at, long num)
static int _bind_mgl_data_insert(lua_State *L) {
	if (!_lg_typecheck_mgl_data_insert(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_insert(mglData * dat, char dir, long at, long num) function, expected prototype:\nvoid mgl_data_insert(mglData * dat, char dir, long at, long num)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	char dir=(char)lua_tointeger(L,2);
	long at=(long)lua_tointeger(L,3);
	long num=(long)lua_tointeger(L,4);

	mgl_data_insert(dat, dir, at, num);

	return 0;
}

// void mgl_data_insert_(uintptr_t * dat, const char * dir, int * at, int * num, int arg5)
static int _bind_mgl_data_insert_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_insert_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_insert_(uintptr_t * dat, const char * dir, int * at, int * num, int arg5) function, expected prototype:\nvoid mgl_data_insert_(uintptr_t * dat, const char * dir, int * at, int * num, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int at=(int)lua_tointeger(L,3);
	int num=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_data_insert_(dat, dir, &at, &num, _arg5);

	return 0;
}

// void mgl_data_delete(mglData * dat, char dir, long at, long num)
static int _bind_mgl_data_delete(lua_State *L) {
	if (!_lg_typecheck_mgl_data_delete(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_delete(mglData * dat, char dir, long at, long num) function, expected prototype:\nvoid mgl_data_delete(mglData * dat, char dir, long at, long num)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	char dir=(char)lua_tointeger(L,2);
	long at=(long)lua_tointeger(L,3);
	long num=(long)lua_tointeger(L,4);

	mgl_data_delete(dat, dir, at, num);

	return 0;
}

// void mgl_data_delete_(uintptr_t * dat, const char * dir, int * at, int * num, int arg5)
static int _bind_mgl_data_delete_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_delete_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_delete_(uintptr_t * dat, const char * dir, int * at, int * num, int arg5) function, expected prototype:\nvoid mgl_data_delete_(uintptr_t * dat, const char * dir, int * at, int * num, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int at=(int)lua_tointeger(L,3);
	int num=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_data_delete_(dat, dir, &at, &num, _arg5);

	return 0;
}

// void mgl_data_smooth(mglData * d, const char * dirs, double delta)
static int _bind_mgl_data_smooth(lua_State *L) {
	if (!_lg_typecheck_mgl_data_smooth(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_smooth(mglData * d, const char * dirs, double delta) function, expected prototype:\nvoid mgl_data_smooth(mglData * d, const char * dirs, double delta)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* d=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * dirs=(const char *)lua_tostring(L,2);
	double delta=(double)lua_tonumber(L,3);

	mgl_data_smooth(d, dirs, delta);

	return 0;
}

// void mgl_data_smooth_(uintptr_t * dat, const char * dirs, double * delta, int arg4)
static int _bind_mgl_data_smooth_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_smooth_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_smooth_(uintptr_t * dat, const char * dirs, double * delta, int arg4) function, expected prototype:\nvoid mgl_data_smooth_(uintptr_t * dat, const char * dirs, double * delta, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dirs=(const char *)lua_tostring(L,2);
	double delta=(double)lua_tonumber(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_data_smooth_(dat, dirs, &delta, _arg4);

	return 0;
}

// mglData * mgl_data_sum(const mglDataA * dat, const char * dir)
static int _bind_mgl_data_sum(lua_State *L) {
	if (!_lg_typecheck_mgl_data_sum(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_sum(const mglDataA * dat, const char * dir) function, expected prototype:\nmglData * mgl_data_sum(const mglDataA * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mglData * lret = mgl_data_sum(dat, dir);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_sum_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_data_sum_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_sum_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_sum_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nuintptr_t mgl_data_sum_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	uintptr_t stack_lret = mgl_data_sum_(dat, dir, _arg3);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_data_max_dir(const mglDataA * dat, const char * dir)
static int _bind_mgl_data_max_dir(lua_State *L) {
	if (!_lg_typecheck_mgl_data_max_dir(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_max_dir(const mglDataA * dat, const char * dir) function, expected prototype:\nmglData * mgl_data_max_dir(const mglDataA * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mglData * lret = mgl_data_max_dir(dat, dir);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_max_dir_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_data_max_dir_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_max_dir_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_max_dir_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nuintptr_t mgl_data_max_dir_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	uintptr_t stack_lret = mgl_data_max_dir_(dat, dir, _arg3);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_data_min_dir(const mglDataA * dat, const char * dir)
static int _bind_mgl_data_min_dir(lua_State *L) {
	if (!_lg_typecheck_mgl_data_min_dir(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_min_dir(const mglDataA * dat, const char * dir) function, expected prototype:\nmglData * mgl_data_min_dir(const mglDataA * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mglData * lret = mgl_data_min_dir(dat, dir);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_min_dir_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_data_min_dir_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_min_dir_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_min_dir_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nuintptr_t mgl_data_min_dir_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	uintptr_t stack_lret = mgl_data_min_dir_(dat, dir, _arg3);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// void mgl_data_cumsum(mglData * dat, const char * dir)
static int _bind_mgl_data_cumsum(lua_State *L) {
	if (!_lg_typecheck_mgl_data_cumsum(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_cumsum(mglData * dat, const char * dir) function, expected prototype:\nvoid mgl_data_cumsum(mglData * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_data_cumsum(dat, dir);

	return 0;
}

// void mgl_data_cumsum_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_data_cumsum_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_cumsum_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_cumsum_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_data_cumsum_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_data_cumsum_(dat, dir, _arg3);

	return 0;
}

// void mgl_data_integral(mglData * dat, const char * dir)
static int _bind_mgl_data_integral(lua_State *L) {
	if (!_lg_typecheck_mgl_data_integral(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_integral(mglData * dat, const char * dir) function, expected prototype:\nvoid mgl_data_integral(mglData * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_data_integral(dat, dir);

	return 0;
}

// void mgl_data_integral_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_data_integral_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_integral_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_integral_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_data_integral_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_data_integral_(dat, dir, _arg3);

	return 0;
}

// void mgl_data_diff(mglData * dat, const char * dir)
static int _bind_mgl_data_diff(lua_State *L) {
	if (!_lg_typecheck_mgl_data_diff(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_diff(mglData * dat, const char * dir) function, expected prototype:\nvoid mgl_data_diff(mglData * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_data_diff(dat, dir);

	return 0;
}

// void mgl_data_diff_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_data_diff_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_diff_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_diff_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_data_diff_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_data_diff_(dat, dir, _arg3);

	return 0;
}

// void mgl_data_diff_par(mglData * dat, const mglDataA * v1, const mglDataA * v2, const mglDataA * v3)
static int _bind_mgl_data_diff_par(lua_State *L) {
	if (!_lg_typecheck_mgl_data_diff_par(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_diff_par(mglData * dat, const mglDataA * v1, const mglDataA * v2, const mglDataA * v3) function, expected prototype:\nvoid mgl_data_diff_par(mglData * dat, const mglDataA * v1, const mglDataA * v2, const mglDataA * v3)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const mglDataA* v1=(Luna< mglDataA >::check(L,2));
	const mglDataA* v2=(Luna< mglDataA >::check(L,3));
	const mglDataA* v3=(Luna< mglDataA >::check(L,4));

	mgl_data_diff_par(dat, v1, v2, v3);

	return 0;
}

// void mgl_data_diff_par_(uintptr_t * dat, uintptr_t * v1, uintptr_t * v2, uintptr_t * v3)
static int _bind_mgl_data_diff_par_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_diff_par_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_diff_par_(uintptr_t * dat, uintptr_t * v1, uintptr_t * v2, uintptr_t * v3) function, expected prototype:\nvoid mgl_data_diff_par_(uintptr_t * dat, uintptr_t * v1, uintptr_t * v2, uintptr_t * v3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v1=(Luna< uintptr_t >::check(L,2));
	uintptr_t* v2=(Luna< uintptr_t >::check(L,3));
	uintptr_t* v3=(Luna< uintptr_t >::check(L,4));

	mgl_data_diff_par_(dat, v1, v2, v3);

	return 0;
}

// void mgl_data_diff2(mglData * dat, const char * dir)
static int _bind_mgl_data_diff2(lua_State *L) {
	if (!_lg_typecheck_mgl_data_diff2(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_diff2(mglData * dat, const char * dir) function, expected prototype:\nvoid mgl_data_diff2(mglData * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_data_diff2(dat, dir);

	return 0;
}

// void mgl_data_diff2_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_data_diff2_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_diff2_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_diff2_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_data_diff2_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_data_diff2_(dat, dir, _arg3);

	return 0;
}

// void mgl_data_swap(mglData * dat, const char * dir)
static int _bind_mgl_data_swap(lua_State *L) {
	if (!_lg_typecheck_mgl_data_swap(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_swap(mglData * dat, const char * dir) function, expected prototype:\nvoid mgl_data_swap(mglData * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_data_swap(dat, dir);

	return 0;
}

// void mgl_data_swap_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_data_swap_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_swap_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_swap_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_data_swap_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_data_swap_(dat, dir, _arg3);

	return 0;
}

// void mgl_data_roll(mglData * dat, char dir, long num)
static int _bind_mgl_data_roll(lua_State *L) {
	if (!_lg_typecheck_mgl_data_roll(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_roll(mglData * dat, char dir, long num) function, expected prototype:\nvoid mgl_data_roll(mglData * dat, char dir, long num)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	char dir=(char)lua_tointeger(L,2);
	long num=(long)lua_tointeger(L,3);

	mgl_data_roll(dat, dir, num);

	return 0;
}

// void mgl_data_roll_(uintptr_t * dat, const char * dir, int * num, int arg4)
static int _bind_mgl_data_roll_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_roll_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_roll_(uintptr_t * dat, const char * dir, int * num, int arg4) function, expected prototype:\nvoid mgl_data_roll_(uintptr_t * dat, const char * dir, int * num, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int num=(int)lua_tointeger(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_data_roll_(dat, dir, &num, _arg4);

	return 0;
}

// void mgl_data_mirror(mglData * dat, const char * dir)
static int _bind_mgl_data_mirror(lua_State *L) {
	if (!_lg_typecheck_mgl_data_mirror(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_mirror(mglData * dat, const char * dir) function, expected prototype:\nvoid mgl_data_mirror(mglData * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_data_mirror(dat, dir);

	return 0;
}

// void mgl_data_mirror_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_data_mirror_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_mirror_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_mirror_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_data_mirror_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_data_mirror_(dat, dir, _arg3);

	return 0;
}

// void mgl_data_sort(mglData * dat, long idx, long idy)
static int _bind_mgl_data_sort(lua_State *L) {
	if (!_lg_typecheck_mgl_data_sort(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_sort(mglData * dat, long idx, long idy) function, expected prototype:\nvoid mgl_data_sort(mglData * dat, long idx, long idy)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	long idx=(long)lua_tointeger(L,2);
	long idy=(long)lua_tointeger(L,3);

	mgl_data_sort(dat, idx, idy);

	return 0;
}

// void mgl_data_sort_(uintptr_t * dat, int * idx, int * idy)
static int _bind_mgl_data_sort_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_sort_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_sort_(uintptr_t * dat, int * idx, int * idy) function, expected prototype:\nvoid mgl_data_sort_(uintptr_t * dat, int * idx, int * idy)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int idx=(int)lua_tointeger(L,2);
	int idy=(int)lua_tointeger(L,3);

	mgl_data_sort_(dat, &idx, &idy);

	return 0;
}

// void mgl_data_hankel(mglData * dat, const char * dir)
static int _bind_mgl_data_hankel(lua_State *L) {
	if (!_lg_typecheck_mgl_data_hankel(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_hankel(mglData * dat, const char * dir) function, expected prototype:\nvoid mgl_data_hankel(mglData * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_data_hankel(dat, dir);

	return 0;
}

// void mgl_data_hankel_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_data_hankel_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_hankel_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_hankel_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_data_hankel_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_data_hankel_(dat, dir, _arg3);

	return 0;
}

// void mgl_data_sinfft(mglData * dat, const char * dir)
static int _bind_mgl_data_sinfft(lua_State *L) {
	if (!_lg_typecheck_mgl_data_sinfft(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_sinfft(mglData * dat, const char * dir) function, expected prototype:\nvoid mgl_data_sinfft(mglData * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_data_sinfft(dat, dir);

	return 0;
}

// void mgl_data_sinfft_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_data_sinfft_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_sinfft_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_sinfft_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_data_sinfft_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_data_sinfft_(dat, dir, _arg3);

	return 0;
}

// void mgl_data_cosfft(mglData * dat, const char * dir)
static int _bind_mgl_data_cosfft(lua_State *L) {
	if (!_lg_typecheck_mgl_data_cosfft(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_cosfft(mglData * dat, const char * dir) function, expected prototype:\nvoid mgl_data_cosfft(mglData * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_data_cosfft(dat, dir);

	return 0;
}

// void mgl_data_cosfft_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_data_cosfft_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_cosfft_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_cosfft_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_data_cosfft_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_data_cosfft_(dat, dir, _arg3);

	return 0;
}

// void mgl_data_fill_sample(mglData * dat, const char * how)
static int _bind_mgl_data_fill_sample(lua_State *L) {
	if (!_lg_typecheck_mgl_data_fill_sample(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_fill_sample(mglData * dat, const char * how) function, expected prototype:\nvoid mgl_data_fill_sample(mglData * dat, const char * how)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * how=(const char *)lua_tostring(L,2);

	mgl_data_fill_sample(dat, how);

	return 0;
}

// void mgl_data_fill_sample_(uintptr_t * dat, const char * how, int arg3)
static int _bind_mgl_data_fill_sample_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_fill_sample_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_fill_sample_(uintptr_t * dat, const char * how, int arg3) function, expected prototype:\nvoid mgl_data_fill_sample_(uintptr_t * dat, const char * how, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * how=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_data_fill_sample_(dat, how, _arg3);

	return 0;
}

// double mgl_data_spline(const mglDataA * dat, double x, double y, double z)
static int _bind_mgl_data_spline(lua_State *L) {
	if (!_lg_typecheck_mgl_data_spline(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_spline(const mglDataA * dat, double x, double y, double z) function, expected prototype:\ndouble mgl_data_spline(const mglDataA * dat, double x, double y, double z)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	double lret = mgl_data_spline(dat, x, y, z);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_spline_(uintptr_t * dat, double * x, double * y, double * z)
static int _bind_mgl_data_spline_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_spline_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_spline_(uintptr_t * dat, double * x, double * y, double * z) function, expected prototype:\ndouble mgl_data_spline_(uintptr_t * dat, double * x, double * y, double * z)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	double lret = mgl_data_spline_(dat, &x, &y, &z);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_linear(const mglDataA * dat, double x, double y, double z)
static int _bind_mgl_data_linear(lua_State *L) {
	if (!_lg_typecheck_mgl_data_linear(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_linear(const mglDataA * dat, double x, double y, double z) function, expected prototype:\ndouble mgl_data_linear(const mglDataA * dat, double x, double y, double z)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	double lret = mgl_data_linear(dat, x, y, z);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_linear_(uintptr_t * dat, double * x, double * y, double * z)
static int _bind_mgl_data_linear_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_linear_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_linear_(uintptr_t * dat, double * x, double * y, double * z) function, expected prototype:\ndouble mgl_data_linear_(uintptr_t * dat, double * x, double * y, double * z)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	double lret = mgl_data_linear_(dat, &x, &y, &z);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_spline_ext(const mglDataA * dat, double x, double y, double z, double * dx, double * dy, double * dz)
static int _bind_mgl_data_spline_ext(lua_State *L) {
	if (!_lg_typecheck_mgl_data_spline_ext(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_spline_ext(const mglDataA * dat, double x, double y, double z, double * dx, double * dy, double * dz) function, expected prototype:\ndouble mgl_data_spline_ext(const mglDataA * dat, double x, double y, double z, double * dx, double * dy, double * dz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	double dx=(double)lua_tonumber(L,5);
	double dy=(double)lua_tonumber(L,6);
	double dz=(double)lua_tonumber(L,7);

	double lret = mgl_data_spline_ext(dat, x, y, z, &dx, &dy, &dz);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_spline_ext_(uintptr_t * dat, double * x, double * y, double * z, double * dx, double * dy, double * dz)
static int _bind_mgl_data_spline_ext_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_spline_ext_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_spline_ext_(uintptr_t * dat, double * x, double * y, double * z, double * dx, double * dy, double * dz) function, expected prototype:\ndouble mgl_data_spline_ext_(uintptr_t * dat, double * x, double * y, double * z, double * dx, double * dy, double * dz)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	double dx=(double)lua_tonumber(L,5);
	double dy=(double)lua_tonumber(L,6);
	double dz=(double)lua_tonumber(L,7);

	double lret = mgl_data_spline_ext_(dat, &x, &y, &z, &dx, &dy, &dz);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_linear_ext(const mglDataA * dat, double x, double y, double z, double * dx, double * dy, double * dz)
static int _bind_mgl_data_linear_ext(lua_State *L) {
	if (!_lg_typecheck_mgl_data_linear_ext(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_linear_ext(const mglDataA * dat, double x, double y, double z, double * dx, double * dy, double * dz) function, expected prototype:\ndouble mgl_data_linear_ext(const mglDataA * dat, double x, double y, double z, double * dx, double * dy, double * dz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	double dx=(double)lua_tonumber(L,5);
	double dy=(double)lua_tonumber(L,6);
	double dz=(double)lua_tonumber(L,7);

	double lret = mgl_data_linear_ext(dat, x, y, z, &dx, &dy, &dz);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_linear_ext_(uintptr_t * dat, double * x, double * y, double * z, double * dx, double * dy, double * dz)
static int _bind_mgl_data_linear_ext_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_linear_ext_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_linear_ext_(uintptr_t * dat, double * x, double * y, double * z, double * dx, double * dy, double * dz) function, expected prototype:\ndouble mgl_data_linear_ext_(uintptr_t * dat, double * x, double * y, double * z, double * dx, double * dy, double * dz)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	double dx=(double)lua_tonumber(L,5);
	double dy=(double)lua_tonumber(L,6);
	double dz=(double)lua_tonumber(L,7);

	double lret = mgl_data_linear_ext_(dat, &x, &y, &z, &dx, &dy, &dz);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_solve_1d(const mglDataA * dat, double val, int spl, long i0)
static int _bind_mgl_data_solve_1d(lua_State *L) {
	if (!_lg_typecheck_mgl_data_solve_1d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_solve_1d(const mglDataA * dat, double val, int spl, long i0) function, expected prototype:\ndouble mgl_data_solve_1d(const mglDataA * dat, double val, int spl, long i0)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	double val=(double)lua_tonumber(L,2);
	int spl=(int)lua_tointeger(L,3);
	long i0=(long)lua_tointeger(L,4);

	double lret = mgl_data_solve_1d(dat, val, spl, i0);
	lua_pushnumber(L,lret);

	return 1;
}

// double mgl_data_solve_1d_(uintptr_t * dat, double * val, int * spl, int * i0)
static int _bind_mgl_data_solve_1d_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_solve_1d_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_data_solve_1d_(uintptr_t * dat, double * val, int * spl, int * i0) function, expected prototype:\ndouble mgl_data_solve_1d_(uintptr_t * dat, double * val, int * spl, int * i0)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double val=(double)lua_tonumber(L,2);
	int spl=(int)lua_tointeger(L,3);
	int i0=(int)lua_tointeger(L,4);

	double lret = mgl_data_solve_1d_(dat, &val, &spl, &i0);
	lua_pushnumber(L,lret);

	return 1;
}

// mglData * mgl_data_solve(const mglDataA * dat, double val, char dir, const mglDataA * i0, int norm)
static int _bind_mgl_data_solve(lua_State *L) {
	if (!_lg_typecheck_mgl_data_solve(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_solve(const mglDataA * dat, double val, char dir, const mglDataA * i0, int norm) function, expected prototype:\nmglData * mgl_data_solve(const mglDataA * dat, double val, char dir, const mglDataA * i0, int norm)\nClass arguments details:\narg 1 ID = 45413231\narg 4 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	double val=(double)lua_tonumber(L,2);
	char dir=(char)lua_tointeger(L,3);
	const mglDataA* i0=(Luna< mglDataA >::check(L,4));
	int norm=(int)lua_tointeger(L,5);

	mglData * lret = mgl_data_solve(dat, val, dir, i0, norm);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_solve_(uintptr_t * dat, double * val, const char * dir, uintptr_t * i0, int * norm, int arg6)
static int _bind_mgl_data_solve_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_solve_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_solve_(uintptr_t * dat, double * val, const char * dir, uintptr_t * i0, int * norm, int arg6) function, expected prototype:\nuintptr_t mgl_data_solve_(uintptr_t * dat, double * val, const char * dir, uintptr_t * i0, int * norm, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double val=(double)lua_tonumber(L,2);
	const char * dir=(const char *)lua_tostring(L,3);
	uintptr_t* i0=(Luna< uintptr_t >::check(L,4));
	int norm=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	uintptr_t stack_lret = mgl_data_solve_(dat, &val, dir, i0, &norm, _arg6);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_data_trace(const mglDataA * d)
static int _bind_mgl_data_trace(lua_State *L) {
	if (!_lg_typecheck_mgl_data_trace(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_trace(const mglDataA * d) function, expected prototype:\nmglData * mgl_data_trace(const mglDataA * d)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* d=(Luna< mglDataA >::check(L,1));

	mglData * lret = mgl_data_trace(d);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_trace_(uintptr_t * d)
static int _bind_mgl_data_trace_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_trace_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_trace_(uintptr_t * d) function, expected prototype:\nuintptr_t mgl_data_trace_(uintptr_t * d)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));

	uintptr_t stack_lret = mgl_data_trace_(d);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_data_resize(const mglDataA * dat, long mx, long my, long mz)
static int _bind_mgl_data_resize(lua_State *L) {
	if (!_lg_typecheck_mgl_data_resize(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_resize(const mglDataA * dat, long mx, long my, long mz) function, expected prototype:\nmglData * mgl_data_resize(const mglDataA * dat, long mx, long my, long mz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	long mx=(long)lua_tointeger(L,2);
	long my=(long)lua_tointeger(L,3);
	long mz=(long)lua_tointeger(L,4);

	mglData * lret = mgl_data_resize(dat, mx, my, mz);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_resize_(uintptr_t * dat, int * mx, int * my, int * mz)
static int _bind_mgl_data_resize_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_resize_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_resize_(uintptr_t * dat, int * mx, int * my, int * mz) function, expected prototype:\nuintptr_t mgl_data_resize_(uintptr_t * dat, int * mx, int * my, int * mz)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int mx=(int)lua_tointeger(L,2);
	int my=(int)lua_tointeger(L,3);
	int mz=(int)lua_tointeger(L,4);

	uintptr_t stack_lret = mgl_data_resize_(dat, &mx, &my, &mz);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_data_resize_box(const mglDataA * dat, long mx, long my, long mz, double x1, double x2, double y1, double y2, double z1, double z2)
static int _bind_mgl_data_resize_box(lua_State *L) {
	if (!_lg_typecheck_mgl_data_resize_box(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_resize_box(const mglDataA * dat, long mx, long my, long mz, double x1, double x2, double y1, double y2, double z1, double z2) function, expected prototype:\nmglData * mgl_data_resize_box(const mglDataA * dat, long mx, long my, long mz, double x1, double x2, double y1, double y2, double z1, double z2)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	long mx=(long)lua_tointeger(L,2);
	long my=(long)lua_tointeger(L,3);
	long mz=(long)lua_tointeger(L,4);
	double x1=(double)lua_tonumber(L,5);
	double x2=(double)lua_tonumber(L,6);
	double y1=(double)lua_tonumber(L,7);
	double y2=(double)lua_tonumber(L,8);
	double z1=(double)lua_tonumber(L,9);
	double z2=(double)lua_tonumber(L,10);

	mglData * lret = mgl_data_resize_box(dat, mx, my, mz, x1, x2, y1, y2, z1, z2);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_resize_box_(uintptr_t * dat, int * mx, int * my, int * mz, double * x1, double * x2, double * y1, double * y2, double * z1, double * z2)
static int _bind_mgl_data_resize_box_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_resize_box_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_resize_box_(uintptr_t * dat, int * mx, int * my, int * mz, double * x1, double * x2, double * y1, double * y2, double * z1, double * z2) function, expected prototype:\nuintptr_t mgl_data_resize_box_(uintptr_t * dat, int * mx, int * my, int * mz, double * x1, double * x2, double * y1, double * y2, double * z1, double * z2)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int mx=(int)lua_tointeger(L,2);
	int my=(int)lua_tointeger(L,3);
	int mz=(int)lua_tointeger(L,4);
	double x1=(double)lua_tonumber(L,5);
	double x2=(double)lua_tonumber(L,6);
	double y1=(double)lua_tonumber(L,7);
	double y2=(double)lua_tonumber(L,8);
	double z1=(double)lua_tonumber(L,9);
	double z2=(double)lua_tonumber(L,10);

	uintptr_t stack_lret = mgl_data_resize_box_(dat, &mx, &my, &mz, &x1, &x2, &y1, &y2, &z1, &z2);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_data_hist(const mglDataA * dat, long n, double v1, double v2, long nsub)
static int _bind_mgl_data_hist(lua_State *L) {
	if (!_lg_typecheck_mgl_data_hist(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_hist(const mglDataA * dat, long n, double v1, double v2, long nsub) function, expected prototype:\nmglData * mgl_data_hist(const mglDataA * dat, long n, double v1, double v2, long nsub)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	long n=(long)lua_tointeger(L,2);
	double v1=(double)lua_tonumber(L,3);
	double v2=(double)lua_tonumber(L,4);
	long nsub=(long)lua_tointeger(L,5);

	mglData * lret = mgl_data_hist(dat, n, v1, v2, nsub);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_momentum_(uintptr_t * dat, char * dir, const char * how, int arg4, int arg5)
static int _bind_mgl_data_momentum_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_momentum_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_momentum_(uintptr_t * dat, char * dir, const char * how, int arg4, int arg5) function, expected prototype:\nuintptr_t mgl_data_momentum_(uintptr_t * dat, char * dir, const char * how, int arg4, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	char dir=(char)lua_tointeger(L,2);
	const char * how=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	uintptr_t stack_lret = mgl_data_momentum_(dat, &dir, how, _arg4, _arg5);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_data_hist_w(const mglDataA * dat, const mglDataA * weight, long n, double v1, double v2, long nsub)
static int _bind_mgl_data_hist_w(lua_State *L) {
	if (!_lg_typecheck_mgl_data_hist_w(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_hist_w(const mglDataA * dat, const mglDataA * weight, long n, double v1, double v2, long nsub) function, expected prototype:\nmglData * mgl_data_hist_w(const mglDataA * dat, const mglDataA * weight, long n, double v1, double v2, long nsub)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	const mglDataA* weight=(Luna< mglDataA >::check(L,2));
	long n=(long)lua_tointeger(L,3);
	double v1=(double)lua_tonumber(L,4);
	double v2=(double)lua_tonumber(L,5);
	long nsub=(long)lua_tointeger(L,6);

	mglData * lret = mgl_data_hist_w(dat, weight, n, v1, v2, nsub);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_hist_(uintptr_t * dat, int * n, double * v1, double * v2, int * nsub)
static int _bind_mgl_data_hist_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_hist_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_hist_(uintptr_t * dat, int * n, double * v1, double * v2, int * nsub) function, expected prototype:\nuintptr_t mgl_data_hist_(uintptr_t * dat, int * n, double * v1, double * v2, int * nsub)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int n=(int)lua_tointeger(L,2);
	double v1=(double)lua_tonumber(L,3);
	double v2=(double)lua_tonumber(L,4);
	int nsub=(int)lua_tointeger(L,5);

	uintptr_t stack_lret = mgl_data_hist_(dat, &n, &v1, &v2, &nsub);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_data_momentum(const mglDataA * dat, char dir, const char * how)
static int _bind_mgl_data_momentum(lua_State *L) {
	if (!_lg_typecheck_mgl_data_momentum(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_momentum(const mglDataA * dat, char dir, const char * how) function, expected prototype:\nmglData * mgl_data_momentum(const mglDataA * dat, char dir, const char * how)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	char dir=(char)lua_tointeger(L,2);
	const char * how=(const char *)lua_tostring(L,3);

	mglData * lret = mgl_data_momentum(dat, dir, how);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_hist_w_(uintptr_t * dat, uintptr_t * weight, int * n, double * v1, double * v2, int * nsub)
static int _bind_mgl_data_hist_w_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_hist_w_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_hist_w_(uintptr_t * dat, uintptr_t * weight, int * n, double * v1, double * v2, int * nsub) function, expected prototype:\nuintptr_t mgl_data_hist_w_(uintptr_t * dat, uintptr_t * weight, int * n, double * v1, double * v2, int * nsub)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	uintptr_t* weight=(Luna< uintptr_t >::check(L,2));
	int n=(int)lua_tointeger(L,3);
	double v1=(double)lua_tonumber(L,4);
	double v2=(double)lua_tonumber(L,5);
	int nsub=(int)lua_tointeger(L,6);

	uintptr_t stack_lret = mgl_data_hist_w_(dat, weight, &n, &v1, &v2, &nsub);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_data_evaluate(const mglDataA * dat, const mglDataA * idat, const mglDataA * jdat, const mglDataA * kdat, int norm)
static int _bind_mgl_data_evaluate(lua_State *L) {
	if (!_lg_typecheck_mgl_data_evaluate(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_evaluate(const mglDataA * dat, const mglDataA * idat, const mglDataA * jdat, const mglDataA * kdat, int norm) function, expected prototype:\nmglData * mgl_data_evaluate(const mglDataA * dat, const mglDataA * idat, const mglDataA * jdat, const mglDataA * kdat, int norm)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	const mglDataA* idat=(Luna< mglDataA >::check(L,2));
	const mglDataA* jdat=(Luna< mglDataA >::check(L,3));
	const mglDataA* kdat=(Luna< mglDataA >::check(L,4));
	int norm=(int)lua_tointeger(L,5);

	mglData * lret = mgl_data_evaluate(dat, idat, jdat, kdat, norm);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_evaluate_(uintptr_t * dat, uintptr_t * idat, uintptr_t * jdat, uintptr_t * kdat, int * norm)
static int _bind_mgl_data_evaluate_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_evaluate_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_evaluate_(uintptr_t * dat, uintptr_t * idat, uintptr_t * jdat, uintptr_t * kdat, int * norm) function, expected prototype:\nuintptr_t mgl_data_evaluate_(uintptr_t * dat, uintptr_t * idat, uintptr_t * jdat, uintptr_t * kdat, int * norm)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	uintptr_t* idat=(Luna< uintptr_t >::check(L,2));
	uintptr_t* jdat=(Luna< uintptr_t >::check(L,3));
	uintptr_t* kdat=(Luna< uintptr_t >::check(L,4));
	int norm=(int)lua_tointeger(L,5);

	uintptr_t stack_lret = mgl_data_evaluate_(dat, idat, jdat, kdat, &norm);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// void mgl_data_envelop(mglData * dat, char dir)
static int _bind_mgl_data_envelop(lua_State *L) {
	if (!_lg_typecheck_mgl_data_envelop(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_envelop(mglData * dat, char dir) function, expected prototype:\nvoid mgl_data_envelop(mglData * dat, char dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	char dir=(char)lua_tointeger(L,2);

	mgl_data_envelop(dat, dir);

	return 0;
}

// void mgl_data_envelop_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_data_envelop_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_envelop_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_envelop_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_data_envelop_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_data_envelop_(dat, dir, _arg3);

	return 0;
}

// void mgl_data_sew(mglData * dat, const char * dirs, double da)
static int _bind_mgl_data_sew(lua_State *L) {
	if (!_lg_typecheck_mgl_data_sew(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_sew(mglData * dat, const char * dirs, double da) function, expected prototype:\nvoid mgl_data_sew(mglData * dat, const char * dirs, double da)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const char * dirs=(const char *)lua_tostring(L,2);
	double da=(double)lua_tonumber(L,3);

	mgl_data_sew(dat, dirs, da);

	return 0;
}

// void mgl_data_sew_(uintptr_t * dat, const char * dirs, double * da, int arg4)
static int _bind_mgl_data_sew_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_sew_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_sew_(uintptr_t * dat, const char * dirs, double * da, int arg4) function, expected prototype:\nvoid mgl_data_sew_(uintptr_t * dat, const char * dirs, double * da, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dirs=(const char *)lua_tostring(L,2);
	double da=(double)lua_tonumber(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_data_sew_(dat, dirs, &da, _arg4);

	return 0;
}

// void mgl_data_crop(mglData * dat, long n1, long n2, char dir)
static int _bind_mgl_data_crop(lua_State *L) {
	if (!_lg_typecheck_mgl_data_crop(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_crop(mglData * dat, long n1, long n2, char dir) function, expected prototype:\nvoid mgl_data_crop(mglData * dat, long n1, long n2, char dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	long n1=(long)lua_tointeger(L,2);
	long n2=(long)lua_tointeger(L,3);
	char dir=(char)lua_tointeger(L,4);

	mgl_data_crop(dat, n1, n2, dir);

	return 0;
}

// void mgl_data_crop_(uintptr_t * dat, int * n1, int * n2, const char * dir, int arg5)
static int _bind_mgl_data_crop__overload_1(lua_State *L) {
	if (!_lg_typecheck_mgl_data_crop__overload_1(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_crop_(uintptr_t * dat, int * n1, int * n2, const char * dir, int arg5) function, expected prototype:\nvoid mgl_data_crop_(uintptr_t * dat, int * n1, int * n2, const char * dir, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int n1=(int)lua_tointeger(L,2);
	int n2=(int)lua_tointeger(L,3);
	const char * dir=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_data_crop_(dat, &n1, &n2, dir, _arg5);

	return 0;
}

// void mgl_data_crop_(uintptr_t * dat, int * n1, int * n2, const char * dir, int arg5)
static int _bind_mgl_data_crop__overload_2(lua_State *L) {
	if (!_lg_typecheck_mgl_data_crop__overload_2(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_crop_(uintptr_t * dat, int * n1, int * n2, const char * dir, int arg5) function, expected prototype:\nvoid mgl_data_crop_(uintptr_t * dat, int * n1, int * n2, const char * dir, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int n1=(int)lua_tointeger(L,2);
	int n2=(int)lua_tointeger(L,3);
	const char * dir=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_data_crop_(dat, &n1, &n2, dir, _arg5);

	return 0;
}

// Overload binder for mgl_data_crop_
static int _bind_mgl_data_crop_(lua_State *L) {
	if (_lg_typecheck_mgl_data_crop__overload_1(L)) return _bind_mgl_data_crop__overload_1(L);
	if (_lg_typecheck_mgl_data_crop__overload_2(L)) return _bind_mgl_data_crop__overload_2(L);

	luaL_error(L, "error in function mgl_data_crop_, cannot match any of the overloads for function mgl_data_crop_:\n  mgl_data_crop_(uintptr_t *, int *, int *, const char *, int)\n  mgl_data_crop_(uintptr_t *, int *, int *, const char *, int)\n");
	return 0;
}

// void mgl_data_clean(mglData * dat, long id)
static int _bind_mgl_data_clean(lua_State *L) {
	if (!_lg_typecheck_mgl_data_clean(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_clean(mglData * dat, long id) function, expected prototype:\nvoid mgl_data_clean(mglData * dat, long id)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	long id=(long)lua_tointeger(L,2);

	mgl_data_clean(dat, id);

	return 0;
}

// void mgl_data_clean_(uintptr_t * dat, int * id)
static int _bind_mgl_data_clean_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_clean_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_clean_(uintptr_t * dat, int * id) function, expected prototype:\nvoid mgl_data_clean_(uintptr_t * dat, int * id)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int id=(int)lua_tointeger(L,2);

	mgl_data_clean_(dat, &id);

	return 0;
}

// void mgl_data_mul_dat(mglData * dat, const mglDataA * d)
static int _bind_mgl_data_mul_dat(lua_State *L) {
	if (!_lg_typecheck_mgl_data_mul_dat(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_mul_dat(mglData * dat, const mglDataA * d) function, expected prototype:\nvoid mgl_data_mul_dat(mglData * dat, const mglDataA * d)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const mglDataA* d=(Luna< mglDataA >::check(L,2));

	mgl_data_mul_dat(dat, d);

	return 0;
}

// void mgl_data_mul_dat_(uintptr_t * dat, uintptr_t * d)
static int _bind_mgl_data_mul_dat_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_mul_dat_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_mul_dat_(uintptr_t * dat, uintptr_t * d) function, expected prototype:\nvoid mgl_data_mul_dat_(uintptr_t * dat, uintptr_t * d)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	uintptr_t* d=(Luna< uintptr_t >::check(L,2));

	mgl_data_mul_dat_(dat, d);

	return 0;
}

// void mgl_data_div_dat(mglData * dat, const mglDataA * d)
static int _bind_mgl_data_div_dat(lua_State *L) {
	if (!_lg_typecheck_mgl_data_div_dat(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_div_dat(mglData * dat, const mglDataA * d) function, expected prototype:\nvoid mgl_data_div_dat(mglData * dat, const mglDataA * d)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const mglDataA* d=(Luna< mglDataA >::check(L,2));

	mgl_data_div_dat(dat, d);

	return 0;
}

// void mgl_data_div_dat_(uintptr_t * dat, uintptr_t * d)
static int _bind_mgl_data_div_dat_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_div_dat_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_div_dat_(uintptr_t * dat, uintptr_t * d) function, expected prototype:\nvoid mgl_data_div_dat_(uintptr_t * dat, uintptr_t * d)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	uintptr_t* d=(Luna< uintptr_t >::check(L,2));

	mgl_data_div_dat_(dat, d);

	return 0;
}

// void mgl_data_add_dat(mglData * dat, const mglDataA * d)
static int _bind_mgl_data_add_dat(lua_State *L) {
	if (!_lg_typecheck_mgl_data_add_dat(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_add_dat(mglData * dat, const mglDataA * d) function, expected prototype:\nvoid mgl_data_add_dat(mglData * dat, const mglDataA * d)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const mglDataA* d=(Luna< mglDataA >::check(L,2));

	mgl_data_add_dat(dat, d);

	return 0;
}

// void mgl_data_add_dat_(uintptr_t * dat, uintptr_t * d)
static int _bind_mgl_data_add_dat_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_add_dat_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_add_dat_(uintptr_t * dat, uintptr_t * d) function, expected prototype:\nvoid mgl_data_add_dat_(uintptr_t * dat, uintptr_t * d)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	uintptr_t* d=(Luna< uintptr_t >::check(L,2));

	mgl_data_add_dat_(dat, d);

	return 0;
}

// void mgl_data_sub_dat(mglData * dat, const mglDataA * d)
static int _bind_mgl_data_sub_dat(lua_State *L) {
	if (!_lg_typecheck_mgl_data_sub_dat(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_sub_dat(mglData * dat, const mglDataA * d) function, expected prototype:\nvoid mgl_data_sub_dat(mglData * dat, const mglDataA * d)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	const mglDataA* d=(Luna< mglDataA >::check(L,2));

	mgl_data_sub_dat(dat, d);

	return 0;
}

// void mgl_data_sub_dat_(uintptr_t * dat, uintptr_t * d)
static int _bind_mgl_data_sub_dat_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_sub_dat_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_sub_dat_(uintptr_t * dat, uintptr_t * d) function, expected prototype:\nvoid mgl_data_sub_dat_(uintptr_t * dat, uintptr_t * d)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	uintptr_t* d=(Luna< uintptr_t >::check(L,2));

	mgl_data_sub_dat_(dat, d);

	return 0;
}

// void mgl_data_mul_num(mglData * dat, double d)
static int _bind_mgl_data_mul_num(lua_State *L) {
	if (!_lg_typecheck_mgl_data_mul_num(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_mul_num(mglData * dat, double d) function, expected prototype:\nvoid mgl_data_mul_num(mglData * dat, double d)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	double d=(double)lua_tonumber(L,2);

	mgl_data_mul_num(dat, d);

	return 0;
}

// void mgl_data_mul_num_(uintptr_t * dat, double * d)
static int _bind_mgl_data_mul_num_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_mul_num_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_mul_num_(uintptr_t * dat, double * d) function, expected prototype:\nvoid mgl_data_mul_num_(uintptr_t * dat, double * d)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double d=(double)lua_tonumber(L,2);

	mgl_data_mul_num_(dat, &d);

	return 0;
}

// void mgl_data_div_num(mglData * dat, double d)
static int _bind_mgl_data_div_num(lua_State *L) {
	if (!_lg_typecheck_mgl_data_div_num(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_div_num(mglData * dat, double d) function, expected prototype:\nvoid mgl_data_div_num(mglData * dat, double d)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	double d=(double)lua_tonumber(L,2);

	mgl_data_div_num(dat, d);

	return 0;
}

// void mgl_data_div_num_(uintptr_t * dat, double * d)
static int _bind_mgl_data_div_num_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_div_num_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_div_num_(uintptr_t * dat, double * d) function, expected prototype:\nvoid mgl_data_div_num_(uintptr_t * dat, double * d)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double d=(double)lua_tonumber(L,2);

	mgl_data_div_num_(dat, &d);

	return 0;
}

// void mgl_data_add_num(mglData * dat, double d)
static int _bind_mgl_data_add_num(lua_State *L) {
	if (!_lg_typecheck_mgl_data_add_num(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_add_num(mglData * dat, double d) function, expected prototype:\nvoid mgl_data_add_num(mglData * dat, double d)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	double d=(double)lua_tonumber(L,2);

	mgl_data_add_num(dat, d);

	return 0;
}

// void mgl_data_add_num_(uintptr_t * dat, double * d)
static int _bind_mgl_data_add_num_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_add_num_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_add_num_(uintptr_t * dat, double * d) function, expected prototype:\nvoid mgl_data_add_num_(uintptr_t * dat, double * d)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double d=(double)lua_tonumber(L,2);

	mgl_data_add_num_(dat, &d);

	return 0;
}

// void mgl_data_sub_num(mglData * dat, double d)
static int _bind_mgl_data_sub_num(lua_State *L) {
	if (!_lg_typecheck_mgl_data_sub_num(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_sub_num(mglData * dat, double d) function, expected prototype:\nvoid mgl_data_sub_num(mglData * dat, double d)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglData* dat=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	double d=(double)lua_tonumber(L,2);

	mgl_data_sub_num(dat, d);

	return 0;
}

// void mgl_data_sub_num_(uintptr_t * dat, double * d)
static int _bind_mgl_data_sub_num_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_sub_num_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_sub_num_(uintptr_t * dat, double * d) function, expected prototype:\nvoid mgl_data_sub_num_(uintptr_t * dat, double * d)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double d=(double)lua_tonumber(L,2);

	mgl_data_sub_num_(dat, &d);

	return 0;
}

// mglData * mgl_pde_solve(mglBase * gr, const char * ham, const mglDataA * ini_re, const mglDataA * ini_im, double dz, double k0, const char * opt)
static int _bind_mgl_pde_solve(lua_State *L) {
	if (!_lg_typecheck_mgl_pde_solve(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_pde_solve(mglBase * gr, const char * ham, const mglDataA * ini_re, const mglDataA * ini_im, double dz, double k0, const char * opt) function, expected prototype:\nmglData * mgl_pde_solve(mglBase * gr, const char * ham, const mglDataA * ini_re, const mglDataA * ini_im, double dz, double k0, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * ham=(const char *)lua_tostring(L,2);
	const mglDataA* ini_re=(Luna< mglDataA >::check(L,3));
	const mglDataA* ini_im=(Luna< mglDataA >::check(L,4));
	double dz=(double)lua_tonumber(L,5);
	double k0=(double)lua_tonumber(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mglData * lret = mgl_pde_solve(gr, ham, ini_re, ini_im, dz, k0, opt);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_pde_solve_(uintptr_t * gr, const char * ham, uintptr_t * ini_re, uintptr_t * ini_im, double * dz, double * k0, const char * opt, int arg8, int arg9)
static int _bind_mgl_pde_solve_(lua_State *L) {
	if (!_lg_typecheck_mgl_pde_solve_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_pde_solve_(uintptr_t * gr, const char * ham, uintptr_t * ini_re, uintptr_t * ini_im, double * dz, double * k0, const char * opt, int arg8, int arg9) function, expected prototype:\nuintptr_t mgl_pde_solve_(uintptr_t * gr, const char * ham, uintptr_t * ini_re, uintptr_t * ini_im, double * dz, double * k0, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * ham=(const char *)lua_tostring(L,2);
	uintptr_t* ini_re=(Luna< uintptr_t >::check(L,3));
	uintptr_t* ini_im=(Luna< uintptr_t >::check(L,4));
	double dz=(double)lua_tonumber(L,5);
	double k0=(double)lua_tonumber(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	uintptr_t stack_lret = mgl_pde_solve_(gr, ham, ini_re, ini_im, &dz, &k0, opt, _arg8, _arg9);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_qo2d_solve(const char * ham, const mglDataA * ini_re, const mglDataA * ini_im, const mglDataA * ray, double r, double k0, mglData * xx, mglData * yy)
static int _bind_mgl_qo2d_solve(lua_State *L) {
	if (!_lg_typecheck_mgl_qo2d_solve(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_qo2d_solve(const char * ham, const mglDataA * ini_re, const mglDataA * ini_im, const mglDataA * ray, double r, double k0, mglData * xx, mglData * yy) function, expected prototype:\nmglData * mgl_qo2d_solve(const char * ham, const mglDataA * ini_re, const mglDataA * ini_im, const mglDataA * ray, double r, double k0, mglData * xx, mglData * yy)\nClass arguments details:\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 7 ID = 45413231\narg 8 ID = 45413231\n");
	}

	const char * ham=(const char *)lua_tostring(L,1);
	const mglDataA* ini_re=(Luna< mglDataA >::check(L,2));
	const mglDataA* ini_im=(Luna< mglDataA >::check(L,3));
	const mglDataA* ray=(Luna< mglDataA >::check(L,4));
	double r=(double)lua_tonumber(L,5);
	double k0=(double)lua_tonumber(L,6);
	mglData* xx=(Luna< mglDataA >::checkSubType< mglData >(L,7));
	mglData* yy=(Luna< mglDataA >::checkSubType< mglData >(L,8));

	mglData * lret = mgl_qo2d_solve(ham, ini_re, ini_im, ray, r, k0, xx, yy);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_qo2d_solve_(const char * ham, uintptr_t * ini_re, uintptr_t * ini_im, uintptr_t * ray, double * r, double * k0, uintptr_t * xx, uintptr_t * yy, int arg9)
static int _bind_mgl_qo2d_solve_(lua_State *L) {
	if (!_lg_typecheck_mgl_qo2d_solve_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_qo2d_solve_(const char * ham, uintptr_t * ini_re, uintptr_t * ini_im, uintptr_t * ray, double * r, double * k0, uintptr_t * xx, uintptr_t * yy, int arg9) function, expected prototype:\nuintptr_t mgl_qo2d_solve_(const char * ham, uintptr_t * ini_re, uintptr_t * ini_im, uintptr_t * ray, double * r, double * k0, uintptr_t * xx, uintptr_t * yy, int arg9)\nClass arguments details:\n");
	}

	const char * ham=(const char *)lua_tostring(L,1);
	uintptr_t* ini_re=(Luna< uintptr_t >::check(L,2));
	uintptr_t* ini_im=(Luna< uintptr_t >::check(L,3));
	uintptr_t* ray=(Luna< uintptr_t >::check(L,4));
	double r=(double)lua_tonumber(L,5);
	double k0=(double)lua_tonumber(L,6);
	uintptr_t* xx=(Luna< uintptr_t >::check(L,7));
	uintptr_t* yy=(Luna< uintptr_t >::check(L,8));
	int _arg9=(int)lua_tointeger(L,9);

	uintptr_t stack_lret = mgl_qo2d_solve_(ham, ini_re, ini_im, ray, &r, &k0, xx, yy, _arg9);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_ray_trace(const char * ham, double x0, double y0, double z0, double px, double py, double pz, double dt, double tmax)
static int _bind_mgl_ray_trace(lua_State *L) {
	if (!_lg_typecheck_mgl_ray_trace(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_ray_trace(const char * ham, double x0, double y0, double z0, double px, double py, double pz, double dt, double tmax) function, expected prototype:\nmglData * mgl_ray_trace(const char * ham, double x0, double y0, double z0, double px, double py, double pz, double dt, double tmax)\nClass arguments details:\n");
	}

	const char * ham=(const char *)lua_tostring(L,1);
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	double px=(double)lua_tonumber(L,5);
	double py=(double)lua_tonumber(L,6);
	double pz=(double)lua_tonumber(L,7);
	double dt=(double)lua_tonumber(L,8);
	double tmax=(double)lua_tonumber(L,9);

	mglData * lret = mgl_ray_trace(ham, x0, y0, z0, px, py, pz, dt, tmax);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_ray_trace_(const char * ham, double * x0, double * y0, double * z0, double * px, double * py, double * pz, double * dt, double * tmax, int arg10)
static int _bind_mgl_ray_trace_(lua_State *L) {
	if (!_lg_typecheck_mgl_ray_trace_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_ray_trace_(const char * ham, double * x0, double * y0, double * z0, double * px, double * py, double * pz, double * dt, double * tmax, int arg10) function, expected prototype:\nuintptr_t mgl_ray_trace_(const char * ham, double * x0, double * y0, double * z0, double * px, double * py, double * pz, double * dt, double * tmax, int arg10)\nClass arguments details:\n");
	}

	const char * ham=(const char *)lua_tostring(L,1);
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	double px=(double)lua_tonumber(L,5);
	double py=(double)lua_tonumber(L,6);
	double pz=(double)lua_tonumber(L,7);
	double dt=(double)lua_tonumber(L,8);
	double tmax=(double)lua_tonumber(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	uintptr_t stack_lret = mgl_ray_trace_(ham, &x0, &y0, &z0, &px, &py, &pz, &dt, &tmax, _arg10);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_jacobian_2d(const mglDataA * x, const mglDataA * y)
static int _bind_mgl_jacobian_2d(lua_State *L) {
	if (!_lg_typecheck_mgl_jacobian_2d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_jacobian_2d(const mglDataA * x, const mglDataA * y) function, expected prototype:\nmglData * mgl_jacobian_2d(const mglDataA * x, const mglDataA * y)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	const mglDataA* x=(Luna< mglDataA >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));

	mglData * lret = mgl_jacobian_2d(x, y);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_jacobian_2d_(uintptr_t * x, uintptr_t * y)
static int _bind_mgl_jacobian_2d_(lua_State *L) {
	if (!_lg_typecheck_mgl_jacobian_2d_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_jacobian_2d_(uintptr_t * x, uintptr_t * y) function, expected prototype:\nuintptr_t mgl_jacobian_2d_(uintptr_t * x, uintptr_t * y)\nClass arguments details:\n");
	}

	uintptr_t* x=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));

	uintptr_t stack_lret = mgl_jacobian_2d_(x, y);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_jacobian_3d(const mglDataA * x, const mglDataA * y, const mglDataA * z)
static int _bind_mgl_jacobian_3d(lua_State *L) {
	if (!_lg_typecheck_mgl_jacobian_3d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_jacobian_3d(const mglDataA * x, const mglDataA * y, const mglDataA * z) function, expected prototype:\nmglData * mgl_jacobian_3d(const mglDataA * x, const mglDataA * y, const mglDataA * z)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	const mglDataA* x=(Luna< mglDataA >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const mglDataA* z=(Luna< mglDataA >::check(L,3));

	mglData * lret = mgl_jacobian_3d(x, y, z);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_jacobian_3d_(uintptr_t * x, uintptr_t * y, uintptr_t * z)
static int _bind_mgl_jacobian_3d_(lua_State *L) {
	if (!_lg_typecheck_mgl_jacobian_3d_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_jacobian_3d_(uintptr_t * x, uintptr_t * y, uintptr_t * z) function, expected prototype:\nuintptr_t mgl_jacobian_3d_(uintptr_t * x, uintptr_t * y, uintptr_t * z)\nClass arguments details:\n");
	}

	uintptr_t* x=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	uintptr_t* z=(Luna< uintptr_t >::check(L,3));

	uintptr_t stack_lret = mgl_jacobian_3d_(x, y, z);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_transform_a(const mglDataA * am, const mglDataA * ph, const char * tr)
static int _bind_mgl_transform_a(lua_State *L) {
	if (!_lg_typecheck_mgl_transform_a(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_transform_a(const mglDataA * am, const mglDataA * ph, const char * tr) function, expected prototype:\nmglData * mgl_transform_a(const mglDataA * am, const mglDataA * ph, const char * tr)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	const mglDataA* am=(Luna< mglDataA >::check(L,1));
	const mglDataA* ph=(Luna< mglDataA >::check(L,2));
	const char * tr=(const char *)lua_tostring(L,3);

	mglData * lret = mgl_transform_a(am, ph, tr);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_transform_a_(uintptr_t * am, uintptr_t * ph, const char * tr, int arg4)
static int _bind_mgl_transform_a_(lua_State *L) {
	if (!_lg_typecheck_mgl_transform_a_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_transform_a_(uintptr_t * am, uintptr_t * ph, const char * tr, int arg4) function, expected prototype:\nuintptr_t mgl_transform_a_(uintptr_t * am, uintptr_t * ph, const char * tr, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* am=(Luna< uintptr_t >::check(L,1));
	uintptr_t* ph=(Luna< uintptr_t >::check(L,2));
	const char * tr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	uintptr_t stack_lret = mgl_transform_a_(am, ph, tr, _arg4);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_transform(const mglDataA * re, const mglDataA * im, const char * tr)
static int _bind_mgl_transform(lua_State *L) {
	if (!_lg_typecheck_mgl_transform(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_transform(const mglDataA * re, const mglDataA * im, const char * tr) function, expected prototype:\nmglData * mgl_transform(const mglDataA * re, const mglDataA * im, const char * tr)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	const mglDataA* re=(Luna< mglDataA >::check(L,1));
	const mglDataA* im=(Luna< mglDataA >::check(L,2));
	const char * tr=(const char *)lua_tostring(L,3);

	mglData * lret = mgl_transform(re, im, tr);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_transform_(uintptr_t * re, uintptr_t * im, const char * tr, int arg4)
static int _bind_mgl_transform_(lua_State *L) {
	if (!_lg_typecheck_mgl_transform_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_transform_(uintptr_t * re, uintptr_t * im, const char * tr, int arg4) function, expected prototype:\nuintptr_t mgl_transform_(uintptr_t * re, uintptr_t * im, const char * tr, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* re=(Luna< uintptr_t >::check(L,1));
	uintptr_t* im=(Luna< uintptr_t >::check(L,2));
	const char * tr=(const char *)lua_tostring(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	uintptr_t stack_lret = mgl_transform_(re, im, tr, _arg4);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// void mgl_data_fourier(mglData * re, mglData * im, const char * dir)
static int _bind_mgl_data_fourier(lua_State *L) {
	if (!_lg_typecheck_mgl_data_fourier(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_fourier(mglData * re, mglData * im, const char * dir) function, expected prototype:\nvoid mgl_data_fourier(mglData * re, mglData * im, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	mglData* re=(Luna< mglDataA >::checkSubType< mglData >(L,1));
	mglData* im=(Luna< mglDataA >::checkSubType< mglData >(L,2));
	const char * dir=(const char *)lua_tostring(L,3);

	mgl_data_fourier(re, im, dir);

	return 0;
}

// void mgl_data_fourier_(uintptr_t * re, uintptr_t * im, const char * dir, int l)
static int _bind_mgl_data_fourier_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_fourier_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_data_fourier_(uintptr_t * re, uintptr_t * im, const char * dir, int l) function, expected prototype:\nvoid mgl_data_fourier_(uintptr_t * re, uintptr_t * im, const char * dir, int l)\nClass arguments details:\n");
	}

	uintptr_t* re=(Luna< uintptr_t >::check(L,1));
	uintptr_t* im=(Luna< uintptr_t >::check(L,2));
	const char * dir=(const char *)lua_tostring(L,3);
	int l=(int)lua_tointeger(L,4);

	mgl_data_fourier_(re, im, dir, l);

	return 0;
}

// mglData * mgl_data_stfa(const mglDataA * re, const mglDataA * im, long dn, char dir)
static int _bind_mgl_data_stfa(lua_State *L) {
	if (!_lg_typecheck_mgl_data_stfa(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_data_stfa(const mglDataA * re, const mglDataA * im, long dn, char dir) function, expected prototype:\nmglData * mgl_data_stfa(const mglDataA * re, const mglDataA * im, long dn, char dir)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	const mglDataA* re=(Luna< mglDataA >::check(L,1));
	const mglDataA* im=(Luna< mglDataA >::check(L,2));
	long dn=(long)lua_tointeger(L,3);
	char dir=(char)lua_tointeger(L,4);

	mglData * lret = mgl_data_stfa(re, im, dn, dir);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_data_stfa_(uintptr_t * re, uintptr_t * im, int * dn, char * dir, int arg5)
static int _bind_mgl_data_stfa_(lua_State *L) {
	if (!_lg_typecheck_mgl_data_stfa_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_data_stfa_(uintptr_t * re, uintptr_t * im, int * dn, char * dir, int arg5) function, expected prototype:\nuintptr_t mgl_data_stfa_(uintptr_t * re, uintptr_t * im, int * dn, char * dir, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* re=(Luna< uintptr_t >::check(L,1));
	uintptr_t* im=(Luna< uintptr_t >::check(L,2));
	int dn=(int)lua_tointeger(L,3);
	char dir=(char)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	uintptr_t stack_lret = mgl_data_stfa_(re, im, &dn, &dir, _arg5);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_triangulation_3d(const mglDataA * x, const mglDataA * y, const mglDataA * z)
static int _bind_mgl_triangulation_3d(lua_State *L) {
	if (!_lg_typecheck_mgl_triangulation_3d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_triangulation_3d(const mglDataA * x, const mglDataA * y, const mglDataA * z) function, expected prototype:\nmglData * mgl_triangulation_3d(const mglDataA * x, const mglDataA * y, const mglDataA * z)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	const mglDataA* x=(Luna< mglDataA >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const mglDataA* z=(Luna< mglDataA >::check(L,3));

	mglData * lret = mgl_triangulation_3d(x, y, z);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_triangulation_3d_(uintptr_t * x, uintptr_t * y, uintptr_t * z)
static int _bind_mgl_triangulation_3d_(lua_State *L) {
	if (!_lg_typecheck_mgl_triangulation_3d_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_triangulation_3d_(uintptr_t * x, uintptr_t * y, uintptr_t * z) function, expected prototype:\nuintptr_t mgl_triangulation_3d_(uintptr_t * x, uintptr_t * y, uintptr_t * z)\nClass arguments details:\n");
	}

	uintptr_t* x=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	uintptr_t* z=(Luna< uintptr_t >::check(L,3));

	uintptr_t stack_lret = mgl_triangulation_3d_(x, y, z);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_triangulation_2d(const mglDataA * x, const mglDataA * y)
static int _bind_mgl_triangulation_2d(lua_State *L) {
	if (!_lg_typecheck_mgl_triangulation_2d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_triangulation_2d(const mglDataA * x, const mglDataA * y) function, expected prototype:\nmglData * mgl_triangulation_2d(const mglDataA * x, const mglDataA * y)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	const mglDataA* x=(Luna< mglDataA >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));

	mglData * lret = mgl_triangulation_2d(x, y);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_triangulation_2d_(uintptr_t * x, uintptr_t * y)
static int _bind_mgl_triangulation_2d_(lua_State *L) {
	if (!_lg_typecheck_mgl_triangulation_2d_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_triangulation_2d_(uintptr_t * x, uintptr_t * y) function, expected prototype:\nuintptr_t mgl_triangulation_2d_(uintptr_t * x, uintptr_t * y)\nClass arguments details:\n");
	}

	uintptr_t* x=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));

	uintptr_t stack_lret = mgl_triangulation_2d_(x, y);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglDataC * mgl_create_datac()
static int _bind_mgl_create_datac(lua_State *L) {
	if (!_lg_typecheck_mgl_create_datac(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglDataC * mgl_create_datac() function, expected prototype:\nmglDataC * mgl_create_datac()\nClass arguments details:\n");
	}


	mglDataC * lret = mgl_create_datac();
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglDataC >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_create_datac_()
static int _bind_mgl_create_datac_(lua_State *L) {
	if (!_lg_typecheck_mgl_create_datac_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_create_datac_() function, expected prototype:\nuintptr_t mgl_create_datac_()\nClass arguments details:\n");
	}


	uintptr_t stack_lret = mgl_create_datac_();
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglDataC * mgl_create_datac_size(long nx, long ny, long nz)
static int _bind_mgl_create_datac_size(lua_State *L) {
	if (!_lg_typecheck_mgl_create_datac_size(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglDataC * mgl_create_datac_size(long nx, long ny, long nz) function, expected prototype:\nmglDataC * mgl_create_datac_size(long nx, long ny, long nz)\nClass arguments details:\n");
	}

	long nx=(long)lua_tointeger(L,1);
	long ny=(long)lua_tointeger(L,2);
	long nz=(long)lua_tointeger(L,3);

	mglDataC * lret = mgl_create_datac_size(nx, ny, nz);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglDataC >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_create_datac_size_(int * nx, int * ny, int * nz)
static int _bind_mgl_create_datac_size_(lua_State *L) {
	if (!_lg_typecheck_mgl_create_datac_size_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_create_datac_size_(int * nx, int * ny, int * nz) function, expected prototype:\nuintptr_t mgl_create_datac_size_(int * nx, int * ny, int * nz)\nClass arguments details:\n");
	}

	int nx=(int)lua_tointeger(L,1);
	int ny=(int)lua_tointeger(L,2);
	int nz=(int)lua_tointeger(L,3);

	uintptr_t stack_lret = mgl_create_datac_size_(&nx, &ny, &nz);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglDataC * mgl_create_datac_file(const char * fname)
static int _bind_mgl_create_datac_file(lua_State *L) {
	if (!_lg_typecheck_mgl_create_datac_file(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglDataC * mgl_create_datac_file(const char * fname) function, expected prototype:\nmglDataC * mgl_create_datac_file(const char * fname)\nClass arguments details:\n");
	}

	const char * fname=(const char *)lua_tostring(L,1);

	mglDataC * lret = mgl_create_datac_file(fname);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglDataC >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_create_datac_file_(const char * fname, int len)
static int _bind_mgl_create_datac_file_(lua_State *L) {
	if (!_lg_typecheck_mgl_create_datac_file_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_create_datac_file_(const char * fname, int len) function, expected prototype:\nuintptr_t mgl_create_datac_file_(const char * fname, int len)\nClass arguments details:\n");
	}

	const char * fname=(const char *)lua_tostring(L,1);
	int len=(int)lua_tointeger(L,2);

	uintptr_t stack_lret = mgl_create_datac_file_(fname, len);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// void mgl_delete_datac(mglDataC * dat)
static int _bind_mgl_delete_datac(lua_State *L) {
	if (!_lg_typecheck_mgl_delete_datac(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_delete_datac(mglDataC * dat) function, expected prototype:\nvoid mgl_delete_datac(mglDataC * dat)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));

	mgl_delete_datac(dat);

	return 0;
}

// void mgl_delete_datac_(uintptr_t * dat)
static int _bind_mgl_delete_datac_(lua_State *L) {
	if (!_lg_typecheck_mgl_delete_datac_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_delete_datac_(uintptr_t * dat) function, expected prototype:\nvoid mgl_delete_datac_(uintptr_t * dat)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));

	mgl_delete_datac_(dat);

	return 0;
}

// void mgl_datac_rearrange(mglDataC * dat, long mx, long my, long mz)
static int _bind_mgl_datac_rearrange(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_rearrange(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_rearrange(mglDataC * dat, long mx, long my, long mz) function, expected prototype:\nvoid mgl_datac_rearrange(mglDataC * dat, long mx, long my, long mz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	long mx=(long)lua_tointeger(L,2);
	long my=(long)lua_tointeger(L,3);
	long mz=(long)lua_tointeger(L,4);

	mgl_datac_rearrange(dat, mx, my, mz);

	return 0;
}

// void mgl_datac_rearrange_(uintptr_t * dat, int * mx, int * my, int * mz)
static int _bind_mgl_datac_rearrange_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_rearrange_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_rearrange_(uintptr_t * dat, int * mx, int * my, int * mz) function, expected prototype:\nvoid mgl_datac_rearrange_(uintptr_t * dat, int * mx, int * my, int * mz)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int mx=(int)lua_tointeger(L,2);
	int my=(int)lua_tointeger(L,3);
	int mz=(int)lua_tointeger(L,4);

	mgl_datac_rearrange_(dat, &mx, &my, &mz);

	return 0;
}

// void mgl_datac_link(mglDataC * dat, dual * A, long mx, long my, long mz)
static int _bind_mgl_datac_link(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_link(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_link(mglDataC * dat, dual * A, long mx, long my, long mz) function, expected prototype:\nvoid mgl_datac_link(mglDataC * dat, dual * A, long mx, long my, long mz)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 3094652\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	dual* A=(Luna< std::complex< double > >::checkSubType< dual >(L,2));
	long mx=(long)lua_tointeger(L,3);
	long my=(long)lua_tointeger(L,4);
	long mz=(long)lua_tointeger(L,5);

	mgl_datac_link(dat, A, mx, my, mz);

	return 0;
}

// void mgl_datac_link_(uintptr_t * d, dual * A, int * nx, int * ny, int * nz)
static int _bind_mgl_datac_link_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_link_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_link_(uintptr_t * d, dual * A, int * nx, int * ny, int * nz) function, expected prototype:\nvoid mgl_datac_link_(uintptr_t * d, dual * A, int * nx, int * ny, int * nz)\nClass arguments details:\narg 2 ID = 3094652\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	dual* A=(Luna< std::complex< double > >::checkSubType< dual >(L,2));
	int nx=(int)lua_tointeger(L,3);
	int ny=(int)lua_tointeger(L,4);
	int nz=(int)lua_tointeger(L,5);

	mgl_datac_link_(d, A, &nx, &ny, &nz);

	return 0;
}

// void mgl_datac_set_float(mglDataC * dat, const float * A, long mx, long my, long mz)
static int _bind_mgl_datac_set_float(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_set_float(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_set_float(mglDataC * dat, const float * A, long mx, long my, long mz) function, expected prototype:\nvoid mgl_datac_set_float(mglDataC * dat, const float * A, long mx, long my, long mz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	float A=(float)lua_tonumber(L,2);
	long mx=(long)lua_tointeger(L,3);
	long my=(long)lua_tointeger(L,4);
	long mz=(long)lua_tointeger(L,5);

	mgl_datac_set_float(dat, &A, mx, my, mz);

	return 0;
}

// void mgl_datac_set_float_(uintptr_t * dat, const float * A, int * NX, int * NY, int * NZ)
static int _bind_mgl_datac_set_float_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_set_float_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_set_float_(uintptr_t * dat, const float * A, int * NX, int * NY, int * NZ) function, expected prototype:\nvoid mgl_datac_set_float_(uintptr_t * dat, const float * A, int * NX, int * NY, int * NZ)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	float A=(float)lua_tonumber(L,2);
	int NX=(int)lua_tointeger(L,3);
	int NY=(int)lua_tointeger(L,4);
	int NZ=(int)lua_tointeger(L,5);

	mgl_datac_set_float_(dat, &A, &NX, &NY, &NZ);

	return 0;
}

// void mgl_datac_set_double(mglDataC * dat, const double * A, long mx, long my, long mz)
static int _bind_mgl_datac_set_double(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_set_double(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_set_double(mglDataC * dat, const double * A, long mx, long my, long mz) function, expected prototype:\nvoid mgl_datac_set_double(mglDataC * dat, const double * A, long mx, long my, long mz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	double A=(double)lua_tonumber(L,2);
	long mx=(long)lua_tointeger(L,3);
	long my=(long)lua_tointeger(L,4);
	long mz=(long)lua_tointeger(L,5);

	mgl_datac_set_double(dat, &A, mx, my, mz);

	return 0;
}

// void mgl_datac_set_double_(uintptr_t * dat, const double * A, int * NX, int * NY, int * NZ)
static int _bind_mgl_datac_set_double_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_set_double_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_set_double_(uintptr_t * dat, const double * A, int * NX, int * NY, int * NZ) function, expected prototype:\nvoid mgl_datac_set_double_(uintptr_t * dat, const double * A, int * NX, int * NY, int * NZ)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	double A=(double)lua_tonumber(L,2);
	int NX=(int)lua_tointeger(L,3);
	int NY=(int)lua_tointeger(L,4);
	int NZ=(int)lua_tointeger(L,5);

	mgl_datac_set_double_(dat, &A, &NX, &NY, &NZ);

	return 0;
}

// void mgl_datac_set_complex(mglDataC * dat, const dual * A, long mx, long my, long mz)
static int _bind_mgl_datac_set_complex(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_set_complex(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_set_complex(mglDataC * dat, const dual * A, long mx, long my, long mz) function, expected prototype:\nvoid mgl_datac_set_complex(mglDataC * dat, const dual * A, long mx, long my, long mz)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 3094652\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const dual* A=(Luna< std::complex< double > >::checkSubType< dual >(L,2));
	long mx=(long)lua_tointeger(L,3);
	long my=(long)lua_tointeger(L,4);
	long mz=(long)lua_tointeger(L,5);

	mgl_datac_set_complex(dat, A, mx, my, mz);

	return 0;
}

// void mgl_datac_set_complex_(uintptr_t * d, const dual * A, int * NX, int * NY, int * NZ)
static int _bind_mgl_datac_set_complex_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_set_complex_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_set_complex_(uintptr_t * d, const dual * A, int * NX, int * NY, int * NZ) function, expected prototype:\nvoid mgl_datac_set_complex_(uintptr_t * d, const dual * A, int * NX, int * NY, int * NZ)\nClass arguments details:\narg 2 ID = 3094652\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	const dual* A=(Luna< std::complex< double > >::checkSubType< dual >(L,2));
	int NX=(int)lua_tointeger(L,3);
	int NY=(int)lua_tointeger(L,4);
	int NZ=(int)lua_tointeger(L,5);

	mgl_datac_set_complex_(d, A, &NX, &NY, &NZ);

	return 0;
}

// void mgl_datac_set(mglDataC * dat, const mglDataA * a)
static int _bind_mgl_datac_set(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_set(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_set(mglDataC * dat, const mglDataA * a) function, expected prototype:\nvoid mgl_datac_set(mglDataC * dat, const mglDataA * a)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));

	mgl_datac_set(dat, a);

	return 0;
}

// void mgl_datac_set_(uintptr_t * dat, uintptr_t * a)
static int _bind_mgl_datac_set_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_set_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_set_(uintptr_t * dat, uintptr_t * a) function, expected prototype:\nvoid mgl_datac_set_(uintptr_t * dat, uintptr_t * a)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));

	mgl_datac_set_(dat, a);

	return 0;
}

// dual mgl_datac_get_value(const mglDataA * dat, long i, long j, long k)
static int _bind_mgl_datac_get_value(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_get_value(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in dual mgl_datac_get_value(const mglDataA * dat, long i, long j, long k) function, expected prototype:\ndual mgl_datac_get_value(const mglDataA * dat, long i, long j, long k)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	long i=(long)lua_tointeger(L,2);
	long j=(long)lua_tointeger(L,3);
	long k=(long)lua_tointeger(L,4);

	dual stack_lret = mgl_datac_get_value(dat, i, j, k);
	dual* lret = new dual(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< dual >::push(L,lret,true);

	return 1;
}

// dual * mgl_datac_data(mglDataC * dat)
static int _bind_mgl_datac_data(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_data(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in dual * mgl_datac_data(mglDataC * dat) function, expected prototype:\ndual * mgl_datac_data(mglDataC * dat)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));

	dual * lret = mgl_datac_data(dat);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< dual >::push(L,lret,false);

	return 1;
}

// dual * mgl_datac_value(mglDataC * dat, long i, long j, long k)
static int _bind_mgl_datac_value(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_value(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in dual * mgl_datac_value(mglDataC * dat, long i, long j, long k) function, expected prototype:\ndual * mgl_datac_value(mglDataC * dat, long i, long j, long k)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	long i=(long)lua_tointeger(L,2);
	long j=(long)lua_tointeger(L,3);
	long k=(long)lua_tointeger(L,4);

	dual * lret = mgl_datac_value(dat, i, j, k);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< dual >::push(L,lret,false);

	return 1;
}

// void mgl_datac_set_ri(mglDataC * dat, const mglDataA * re, const mglDataA * im)
static int _bind_mgl_datac_set_ri(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_set_ri(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_set_ri(mglDataC * dat, const mglDataA * re, const mglDataA * im) function, expected prototype:\nvoid mgl_datac_set_ri(mglDataC * dat, const mglDataA * re, const mglDataA * im)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const mglDataA* re=(Luna< mglDataA >::check(L,2));
	const mglDataA* im=(Luna< mglDataA >::check(L,3));

	mgl_datac_set_ri(dat, re, im);

	return 0;
}

// void mgl_datac_set_ri_(uintptr_t * dat, uintptr_t * re, uintptr_t * im)
static int _bind_mgl_datac_set_ri_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_set_ri_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_set_ri_(uintptr_t * dat, uintptr_t * re, uintptr_t * im) function, expected prototype:\nvoid mgl_datac_set_ri_(uintptr_t * dat, uintptr_t * re, uintptr_t * im)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	uintptr_t* re=(Luna< uintptr_t >::check(L,2));
	uintptr_t* im=(Luna< uintptr_t >::check(L,3));

	mgl_datac_set_ri_(dat, re, im);

	return 0;
}

// void mgl_datac_set_ap(mglDataC * dat, const mglDataA * abs, const mglDataA * phi)
static int _bind_mgl_datac_set_ap(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_set_ap(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_set_ap(mglDataC * dat, const mglDataA * abs, const mglDataA * phi) function, expected prototype:\nvoid mgl_datac_set_ap(mglDataC * dat, const mglDataA * abs, const mglDataA * phi)\nClass arguments details:\narg 1 ID = 45413231\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const mglDataA* abs=(Luna< mglDataA >::check(L,2));
	const mglDataA* phi=(Luna< mglDataA >::check(L,3));

	mgl_datac_set_ap(dat, abs, phi);

	return 0;
}

// void mgl_datac_set_ap_(uintptr_t * dat, uintptr_t * abs, uintptr_t * phi)
static int _bind_mgl_datac_set_ap_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_set_ap_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_set_ap_(uintptr_t * dat, uintptr_t * abs, uintptr_t * phi) function, expected prototype:\nvoid mgl_datac_set_ap_(uintptr_t * dat, uintptr_t * abs, uintptr_t * phi)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	uintptr_t* abs=(Luna< uintptr_t >::check(L,2));
	uintptr_t* phi=(Luna< uintptr_t >::check(L,3));

	mgl_datac_set_ap_(dat, abs, phi);

	return 0;
}

// int mgl_datac_read(mglDataC * dat, const char * fname)
static int _bind_mgl_datac_read(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_read(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_datac_read(mglDataC * dat, const char * fname) function, expected prototype:\nint mgl_datac_read(mglDataC * dat, const char * fname)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * fname=(const char *)lua_tostring(L,2);

	int lret = mgl_datac_read(dat, fname);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_datac_read_(uintptr_t * d, const char * fname, int l)
static int _bind_mgl_datac_read_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_read_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_datac_read_(uintptr_t * d, const char * fname, int l) function, expected prototype:\nint mgl_datac_read_(uintptr_t * d, const char * fname, int l)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	int l=(int)lua_tointeger(L,3);

	int lret = mgl_datac_read_(d, fname, l);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_datac_read_mat(mglDataC * dat, const char * fname, long dim)
static int _bind_mgl_datac_read_mat(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_read_mat(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_datac_read_mat(mglDataC * dat, const char * fname, long dim) function, expected prototype:\nint mgl_datac_read_mat(mglDataC * dat, const char * fname, long dim)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	long dim=(long)lua_tointeger(L,3);

	int lret = mgl_datac_read_mat(dat, fname, dim);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_datac_read_mat_(uintptr_t * dat, const char * fname, int * dim, int arg4)
static int _bind_mgl_datac_read_mat_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_read_mat_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_datac_read_mat_(uintptr_t * dat, const char * fname, int * dim, int arg4) function, expected prototype:\nint mgl_datac_read_mat_(uintptr_t * dat, const char * fname, int * dim, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	int dim=(int)lua_tointeger(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	int lret = mgl_datac_read_mat_(dat, fname, &dim, _arg4);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_datac_read_dim(mglDataC * dat, const char * fname, long mx, long my, long mz)
static int _bind_mgl_datac_read_dim(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_read_dim(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_datac_read_dim(mglDataC * dat, const char * fname, long mx, long my, long mz) function, expected prototype:\nint mgl_datac_read_dim(mglDataC * dat, const char * fname, long mx, long my, long mz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	long mx=(long)lua_tointeger(L,3);
	long my=(long)lua_tointeger(L,4);
	long mz=(long)lua_tointeger(L,5);

	int lret = mgl_datac_read_dim(dat, fname, mx, my, mz);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_datac_read_dim_(uintptr_t * dat, const char * fname, int * mx, int * my, int * mz, int arg6)
static int _bind_mgl_datac_read_dim_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_read_dim_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_datac_read_dim_(uintptr_t * dat, const char * fname, int * mx, int * my, int * mz, int arg6) function, expected prototype:\nint mgl_datac_read_dim_(uintptr_t * dat, const char * fname, int * mx, int * my, int * mz, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	int mx=(int)lua_tointeger(L,3);
	int my=(int)lua_tointeger(L,4);
	int mz=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	int lret = mgl_datac_read_dim_(dat, fname, &mx, &my, &mz, _arg6);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_datac_read_range(mglDataC * d, const char * templ, double from, double to, double step, int as_slice)
static int _bind_mgl_datac_read_range(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_read_range(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_datac_read_range(mglDataC * d, const char * templ, double from, double to, double step, int as_slice) function, expected prototype:\nint mgl_datac_read_range(mglDataC * d, const char * templ, double from, double to, double step, int as_slice)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* d=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * templ=(const char *)lua_tostring(L,2);
	double from=(double)lua_tonumber(L,3);
	double to=(double)lua_tonumber(L,4);
	double step=(double)lua_tonumber(L,5);
	int as_slice=(int)lua_tointeger(L,6);

	int lret = mgl_datac_read_range(d, templ, from, to, step, as_slice);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_datac_read_all(mglDataC * dat, const char * templ, int as_slice)
static int _bind_mgl_datac_read_all(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_read_all(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_datac_read_all(mglDataC * dat, const char * templ, int as_slice) function, expected prototype:\nint mgl_datac_read_all(mglDataC * dat, const char * templ, int as_slice)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * templ=(const char *)lua_tostring(L,2);
	int as_slice=(int)lua_tointeger(L,3);

	int lret = mgl_datac_read_all(dat, templ, as_slice);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_datac_save(const mglDataA * dat, const char * fname, long ns)
static int _bind_mgl_datac_save(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_save(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_save(const mglDataA * dat, const char * fname, long ns) function, expected prototype:\nvoid mgl_datac_save(const mglDataA * dat, const char * fname, long ns)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	long ns=(long)lua_tointeger(L,3);

	mgl_datac_save(dat, fname, ns);

	return 0;
}

// void mgl_datac_save_(uintptr_t * dat, const char * fname, int * ns, int arg4)
static int _bind_mgl_datac_save_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_save_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_save_(uintptr_t * dat, const char * fname, int * ns, int arg4) function, expected prototype:\nvoid mgl_datac_save_(uintptr_t * dat, const char * fname, int * ns, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	int ns=(int)lua_tointeger(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_datac_save_(dat, fname, &ns, _arg4);

	return 0;
}

// int mgl_datac_read_hdf(mglDataC * d, const char * fname, const char * data)
static int _bind_mgl_datac_read_hdf(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_read_hdf(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_datac_read_hdf(mglDataC * d, const char * fname, const char * data) function, expected prototype:\nint mgl_datac_read_hdf(mglDataC * d, const char * fname, const char * data)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* d=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * data=(const char *)lua_tostring(L,3);

	int lret = mgl_datac_read_hdf(d, fname, data);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_datac_read_hdf_(uintptr_t * d, const char * fname, const char * data, int l, int n)
static int _bind_mgl_datac_read_hdf_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_read_hdf_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_datac_read_hdf_(uintptr_t * d, const char * fname, const char * data, int l, int n) function, expected prototype:\nint mgl_datac_read_hdf_(uintptr_t * d, const char * fname, const char * data, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * data=(const char *)lua_tostring(L,3);
	int l=(int)lua_tointeger(L,4);
	int n=(int)lua_tointeger(L,5);

	int lret = mgl_datac_read_hdf_(d, fname, data, l, n);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_datac_save_hdf(const mglDataA * d, const char * fname, const char * data, int rewrite)
static int _bind_mgl_datac_save_hdf(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_save_hdf(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_save_hdf(const mglDataA * d, const char * fname, const char * data, int rewrite) function, expected prototype:\nvoid mgl_datac_save_hdf(const mglDataA * d, const char * fname, const char * data, int rewrite)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* d=(Luna< mglDataA >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * data=(const char *)lua_tostring(L,3);
	int rewrite=(int)lua_tointeger(L,4);

	mgl_datac_save_hdf(d, fname, data, rewrite);

	return 0;
}

// void mgl_datac_save_hdf_(uintptr_t * d, const char * fname, const char * data, int * rewrite, int l, int n)
static int _bind_mgl_datac_save_hdf_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_save_hdf_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_save_hdf_(uintptr_t * d, const char * fname, const char * data, int * rewrite, int l, int n) function, expected prototype:\nvoid mgl_datac_save_hdf_(uintptr_t * d, const char * fname, const char * data, int * rewrite, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	const char * fname=(const char *)lua_tostring(L,2);
	const char * data=(const char *)lua_tostring(L,3);
	int rewrite=(int)lua_tointeger(L,4);
	int l=(int)lua_tointeger(L,5);
	int n=(int)lua_tointeger(L,6);

	mgl_datac_save_hdf_(d, fname, data, &rewrite, l, n);

	return 0;
}

// void mgl_datac_create(mglDataC * dat, long nx, long ny, long nz)
static int _bind_mgl_datac_create(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_create(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_create(mglDataC * dat, long nx, long ny, long nz) function, expected prototype:\nvoid mgl_datac_create(mglDataC * dat, long nx, long ny, long nz)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	long nx=(long)lua_tointeger(L,2);
	long ny=(long)lua_tointeger(L,3);
	long nz=(long)lua_tointeger(L,4);

	mgl_datac_create(dat, nx, ny, nz);

	return 0;
}

// void mgl_datac_create_(uintptr_t * dat, int * nx, int * ny, int * nz)
static int _bind_mgl_datac_create_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_create_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_create_(uintptr_t * dat, int * nx, int * ny, int * nz) function, expected prototype:\nvoid mgl_datac_create_(uintptr_t * dat, int * nx, int * ny, int * nz)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int nx=(int)lua_tointeger(L,2);
	int ny=(int)lua_tointeger(L,3);
	int nz=(int)lua_tointeger(L,4);

	mgl_datac_create_(dat, &nx, &ny, &nz);

	return 0;
}

// void mgl_datac_transpose(mglDataC * dat, const char * dim)
static int _bind_mgl_datac_transpose(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_transpose(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_transpose(mglDataC * dat, const char * dim) function, expected prototype:\nvoid mgl_datac_transpose(mglDataC * dat, const char * dim)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * dim=(const char *)lua_tostring(L,2);

	mgl_datac_transpose(dat, dim);

	return 0;
}

// void mgl_datac_transpose_(uintptr_t * dat, const char * dim, int arg3)
static int _bind_mgl_datac_transpose_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_transpose_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_transpose_(uintptr_t * dat, const char * dim, int arg3) function, expected prototype:\nvoid mgl_datac_transpose_(uintptr_t * dat, const char * dim, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dim=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_datac_transpose_(dat, dim, _arg3);

	return 0;
}

// void mgl_datac_set_id(mglDataC * d, const char * id)
static int _bind_mgl_datac_set_id(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_set_id(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_set_id(mglDataC * d, const char * id) function, expected prototype:\nvoid mgl_datac_set_id(mglDataC * d, const char * id)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* d=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * id=(const char *)lua_tostring(L,2);

	mgl_datac_set_id(d, id);

	return 0;
}

// void mgl_datac_set_id_(uintptr_t * dat, const char * id, int l)
static int _bind_mgl_datac_set_id_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_set_id_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_set_id_(uintptr_t * dat, const char * id, int l) function, expected prototype:\nvoid mgl_datac_set_id_(uintptr_t * dat, const char * id, int l)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * id=(const char *)lua_tostring(L,2);
	int l=(int)lua_tointeger(L,3);

	mgl_datac_set_id_(dat, id, l);

	return 0;
}

// void mgl_datac_modify(mglDataC * dat, const char * eq, long dim)
static int _bind_mgl_datac_modify(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_modify(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_modify(mglDataC * dat, const char * eq, long dim) function, expected prototype:\nvoid mgl_datac_modify(mglDataC * dat, const char * eq, long dim)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * eq=(const char *)lua_tostring(L,2);
	long dim=(long)lua_tointeger(L,3);

	mgl_datac_modify(dat, eq, dim);

	return 0;
}

// void mgl_datac_modify_(uintptr_t * dat, const char * eq, int * dim, int arg4)
static int _bind_mgl_datac_modify_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_modify_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_modify_(uintptr_t * dat, const char * eq, int * dim, int arg4) function, expected prototype:\nvoid mgl_datac_modify_(uintptr_t * dat, const char * eq, int * dim, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * eq=(const char *)lua_tostring(L,2);
	int dim=(int)lua_tointeger(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_datac_modify_(dat, eq, &dim, _arg4);

	return 0;
}

// void mgl_datac_modify_vw(mglDataC * dat, const char * eq, const mglDataA * vdat, const mglDataA * wdat)
static int _bind_mgl_datac_modify_vw(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_modify_vw(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_modify_vw(mglDataC * dat, const char * eq, const mglDataA * vdat, const mglDataA * wdat) function, expected prototype:\nvoid mgl_datac_modify_vw(mglDataC * dat, const char * eq, const mglDataA * vdat, const mglDataA * wdat)\nClass arguments details:\narg 1 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * eq=(const char *)lua_tostring(L,2);
	const mglDataA* vdat=(Luna< mglDataA >::check(L,3));
	const mglDataA* wdat=(Luna< mglDataA >::check(L,4));

	mgl_datac_modify_vw(dat, eq, vdat, wdat);

	return 0;
}

// void mgl_datac_modify_vw_(uintptr_t * dat, const char * eq, uintptr_t * vdat, uintptr_t * wdat, int arg5)
static int _bind_mgl_datac_modify_vw_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_modify_vw_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_modify_vw_(uintptr_t * dat, const char * eq, uintptr_t * vdat, uintptr_t * wdat, int arg5) function, expected prototype:\nvoid mgl_datac_modify_vw_(uintptr_t * dat, const char * eq, uintptr_t * vdat, uintptr_t * wdat, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * eq=(const char *)lua_tostring(L,2);
	uintptr_t* vdat=(Luna< uintptr_t >::check(L,3));
	uintptr_t* wdat=(Luna< uintptr_t >::check(L,4));
	int _arg5=(int)lua_tointeger(L,5);

	mgl_datac_modify_vw_(dat, eq, vdat, wdat, _arg5);

	return 0;
}

// void mgl_datac_squeeze(mglDataC * dat, long rx, long ry, long rz, long smooth)
static int _bind_mgl_datac_squeeze(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_squeeze(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_squeeze(mglDataC * dat, long rx, long ry, long rz, long smooth) function, expected prototype:\nvoid mgl_datac_squeeze(mglDataC * dat, long rx, long ry, long rz, long smooth)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	long rx=(long)lua_tointeger(L,2);
	long ry=(long)lua_tointeger(L,3);
	long rz=(long)lua_tointeger(L,4);
	long smooth=(long)lua_tointeger(L,5);

	mgl_datac_squeeze(dat, rx, ry, rz, smooth);

	return 0;
}

// void mgl_datac_squeeze_(uintptr_t * dat, int * rx, int * ry, int * rz, int * smooth)
static int _bind_mgl_datac_squeeze_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_squeeze_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_squeeze_(uintptr_t * dat, int * rx, int * ry, int * rz, int * smooth) function, expected prototype:\nvoid mgl_datac_squeeze_(uintptr_t * dat, int * rx, int * ry, int * rz, int * smooth)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int rx=(int)lua_tointeger(L,2);
	int ry=(int)lua_tointeger(L,3);
	int rz=(int)lua_tointeger(L,4);
	int smooth=(int)lua_tointeger(L,5);

	mgl_datac_squeeze_(dat, &rx, &ry, &rz, &smooth);

	return 0;
}

// void mgl_datac_extend(mglDataC * dat, long n1, long n2)
static int _bind_mgl_datac_extend(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_extend(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_extend(mglDataC * dat, long n1, long n2) function, expected prototype:\nvoid mgl_datac_extend(mglDataC * dat, long n1, long n2)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	long n1=(long)lua_tointeger(L,2);
	long n2=(long)lua_tointeger(L,3);

	mgl_datac_extend(dat, n1, n2);

	return 0;
}

// void mgl_datac_extend_(uintptr_t * dat, int * n1, int * n2)
static int _bind_mgl_datac_extend_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_extend_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_extend_(uintptr_t * dat, int * n1, int * n2) function, expected prototype:\nvoid mgl_datac_extend_(uintptr_t * dat, int * n1, int * n2)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	int n1=(int)lua_tointeger(L,2);
	int n2=(int)lua_tointeger(L,3);

	mgl_datac_extend_(dat, &n1, &n2);

	return 0;
}

// void mgl_datac_insert(mglDataC * dat, char dir, long at, long num)
static int _bind_mgl_datac_insert(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_insert(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_insert(mglDataC * dat, char dir, long at, long num) function, expected prototype:\nvoid mgl_datac_insert(mglDataC * dat, char dir, long at, long num)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	char dir=(char)lua_tointeger(L,2);
	long at=(long)lua_tointeger(L,3);
	long num=(long)lua_tointeger(L,4);

	mgl_datac_insert(dat, dir, at, num);

	return 0;
}

// void mgl_datac_insert_(uintptr_t * dat, const char * dir, int * at, int * num, int arg5)
static int _bind_mgl_datac_insert_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_insert_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_insert_(uintptr_t * dat, const char * dir, int * at, int * num, int arg5) function, expected prototype:\nvoid mgl_datac_insert_(uintptr_t * dat, const char * dir, int * at, int * num, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int at=(int)lua_tointeger(L,3);
	int num=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_datac_insert_(dat, dir, &at, &num, _arg5);

	return 0;
}

// void mgl_datac_delete(mglDataC * dat, char dir, long at, long num)
static int _bind_mgl_datac_delete(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_delete(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_delete(mglDataC * dat, char dir, long at, long num) function, expected prototype:\nvoid mgl_datac_delete(mglDataC * dat, char dir, long at, long num)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	char dir=(char)lua_tointeger(L,2);
	long at=(long)lua_tointeger(L,3);
	long num=(long)lua_tointeger(L,4);

	mgl_datac_delete(dat, dir, at, num);

	return 0;
}

// void mgl_datac_delete_(uintptr_t * dat, const char * dir, int * at, int * num, int arg5)
static int _bind_mgl_datac_delete_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_delete_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_delete_(uintptr_t * dat, const char * dir, int * at, int * num, int arg5) function, expected prototype:\nvoid mgl_datac_delete_(uintptr_t * dat, const char * dir, int * at, int * num, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int at=(int)lua_tointeger(L,3);
	int num=(int)lua_tointeger(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	mgl_datac_delete_(dat, dir, &at, &num, _arg5);

	return 0;
}

// void mgl_datac_smooth(mglDataC * d, const char * dirs, double delta)
static int _bind_mgl_datac_smooth(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_smooth(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_smooth(mglDataC * d, const char * dirs, double delta) function, expected prototype:\nvoid mgl_datac_smooth(mglDataC * d, const char * dirs, double delta)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* d=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * dirs=(const char *)lua_tostring(L,2);
	double delta=(double)lua_tonumber(L,3);

	mgl_datac_smooth(d, dirs, delta);

	return 0;
}

// void mgl_datac_smooth_(uintptr_t * dat, const char * dirs, double * delta, int arg4)
static int _bind_mgl_datac_smooth_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_smooth_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_smooth_(uintptr_t * dat, const char * dirs, double * delta, int arg4) function, expected prototype:\nvoid mgl_datac_smooth_(uintptr_t * dat, const char * dirs, double * delta, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dirs=(const char *)lua_tostring(L,2);
	double delta=(double)lua_tonumber(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_datac_smooth_(dat, dirs, &delta, _arg4);

	return 0;
}

// void mgl_datac_cumsum(mglDataC * dat, const char * dir)
static int _bind_mgl_datac_cumsum(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_cumsum(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_cumsum(mglDataC * dat, const char * dir) function, expected prototype:\nvoid mgl_datac_cumsum(mglDataC * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_datac_cumsum(dat, dir);

	return 0;
}

// void mgl_datac_cumsum_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_datac_cumsum_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_cumsum_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_cumsum_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_datac_cumsum_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_datac_cumsum_(dat, dir, _arg3);

	return 0;
}

// void mgl_datac_integral(mglDataC * dat, const char * dir)
static int _bind_mgl_datac_integral(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_integral(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_integral(mglDataC * dat, const char * dir) function, expected prototype:\nvoid mgl_datac_integral(mglDataC * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_datac_integral(dat, dir);

	return 0;
}

// void mgl_datac_integral_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_datac_integral_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_integral_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_integral_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_datac_integral_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_datac_integral_(dat, dir, _arg3);

	return 0;
}

// void mgl_datac_diff(mglDataC * dat, const char * dir)
static int _bind_mgl_datac_diff(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_diff(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_diff(mglDataC * dat, const char * dir) function, expected prototype:\nvoid mgl_datac_diff(mglDataC * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_datac_diff(dat, dir);

	return 0;
}

// void mgl_datac_diff_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_datac_diff_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_diff_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_diff_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_datac_diff_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_datac_diff_(dat, dir, _arg3);

	return 0;
}

// void mgl_datac_diff2(mglDataC * dat, const char * dir)
static int _bind_mgl_datac_diff2(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_diff2(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_diff2(mglDataC * dat, const char * dir) function, expected prototype:\nvoid mgl_datac_diff2(mglDataC * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_datac_diff2(dat, dir);

	return 0;
}

// void mgl_datac_diff2_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_datac_diff2_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_diff2_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_diff2_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_datac_diff2_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_datac_diff2_(dat, dir, _arg3);

	return 0;
}

// void mgl_datac_swap(mglDataC * dat, const char * dir)
static int _bind_mgl_datac_swap(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_swap(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_swap(mglDataC * dat, const char * dir) function, expected prototype:\nvoid mgl_datac_swap(mglDataC * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_datac_swap(dat, dir);

	return 0;
}

// void mgl_datac_swap_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_datac_swap_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_swap_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_swap_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_datac_swap_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_datac_swap_(dat, dir, _arg3);

	return 0;
}

// void mgl_datac_roll(mglDataC * dat, char dir, long num)
static int _bind_mgl_datac_roll(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_roll(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_roll(mglDataC * dat, char dir, long num) function, expected prototype:\nvoid mgl_datac_roll(mglDataC * dat, char dir, long num)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	char dir=(char)lua_tointeger(L,2);
	long num=(long)lua_tointeger(L,3);

	mgl_datac_roll(dat, dir, num);

	return 0;
}

// void mgl_datac_roll_(uintptr_t * dat, const char * dir, int * num, int arg4)
static int _bind_mgl_datac_roll_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_roll_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_roll_(uintptr_t * dat, const char * dir, int * num, int arg4) function, expected prototype:\nvoid mgl_datac_roll_(uintptr_t * dat, const char * dir, int * num, int arg4)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int num=(int)lua_tointeger(L,3);
	int _arg4=(int)lua_tointeger(L,4);

	mgl_datac_roll_(dat, dir, &num, _arg4);

	return 0;
}

// void mgl_datac_mirror(mglDataC * dat, const char * dir)
static int _bind_mgl_datac_mirror(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_mirror(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_mirror(mglDataC * dat, const char * dir) function, expected prototype:\nvoid mgl_datac_mirror(mglDataC * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_datac_mirror(dat, dir);

	return 0;
}

// void mgl_datac_mirror_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_datac_mirror_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_mirror_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_mirror_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_datac_mirror_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_datac_mirror_(dat, dir, _arg3);

	return 0;
}

// void mgl_datac_crop(mglDataC * dat, long n1, long n2, char dir)
static int _bind_mgl_datac_crop(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_crop(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_crop(mglDataC * dat, long n1, long n2, char dir) function, expected prototype:\nvoid mgl_datac_crop(mglDataC * dat, long n1, long n2, char dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	long n1=(long)lua_tointeger(L,2);
	long n2=(long)lua_tointeger(L,3);
	char dir=(char)lua_tointeger(L,4);

	mgl_datac_crop(dat, n1, n2, dir);

	return 0;
}

// void mgl_datac_hankel(mglDataC * dat, const char * dir)
static int _bind_mgl_datac_hankel(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_hankel(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_hankel(mglDataC * dat, const char * dir) function, expected prototype:\nvoid mgl_datac_hankel(mglDataC * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_datac_hankel(dat, dir);

	return 0;
}

// void mgl_datac_hankel_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_datac_hankel_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_hankel_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_hankel_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_datac_hankel_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_datac_hankel_(dat, dir, _arg3);

	return 0;
}

// void mgl_datac_fft(mglDataC * dat, const char * dir)
static int _bind_mgl_datac_fft(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_fft(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_fft(mglDataC * dat, const char * dir) function, expected prototype:\nvoid mgl_datac_fft(mglDataC * dat, const char * dir)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	mglDataC* dat=(Luna< mglDataA >::checkSubType< mglDataC >(L,1));
	const char * dir=(const char *)lua_tostring(L,2);

	mgl_datac_fft(dat, dir);

	return 0;
}

// void mgl_datac_fft_(uintptr_t * dat, const char * dir, int arg3)
static int _bind_mgl_datac_fft_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_fft_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_datac_fft_(uintptr_t * dat, const char * dir, int arg3) function, expected prototype:\nvoid mgl_datac_fft_(uintptr_t * dat, const char * dir, int arg3)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));
	const char * dir=(const char *)lua_tostring(L,2);
	int _arg3=(int)lua_tointeger(L,3);

	mgl_datac_fft_(dat, dir, _arg3);

	return 0;
}

// mglData * mgl_datac_real(const mglDataA * dat)
static int _bind_mgl_datac_real(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_real(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_datac_real(const mglDataA * dat) function, expected prototype:\nmglData * mgl_datac_real(const mglDataA * dat)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));

	mglData * lret = mgl_datac_real(dat);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_datac_real_(uintptr_t * dat)
static int _bind_mgl_datac_real_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_real_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_datac_real_(uintptr_t * dat) function, expected prototype:\nuintptr_t mgl_datac_real_(uintptr_t * dat)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));

	uintptr_t stack_lret = mgl_datac_real_(dat);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_datac_imag(const mglDataA * dat)
static int _bind_mgl_datac_imag(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_imag(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_datac_imag(const mglDataA * dat) function, expected prototype:\nmglData * mgl_datac_imag(const mglDataA * dat)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));

	mglData * lret = mgl_datac_imag(dat);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_datac_imag_(uintptr_t * dat)
static int _bind_mgl_datac_imag_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_imag_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_datac_imag_(uintptr_t * dat) function, expected prototype:\nuintptr_t mgl_datac_imag_(uintptr_t * dat)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));

	uintptr_t stack_lret = mgl_datac_imag_(dat);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_datac_abs(const mglDataA * dat)
static int _bind_mgl_datac_abs(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_abs(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_datac_abs(const mglDataA * dat) function, expected prototype:\nmglData * mgl_datac_abs(const mglDataA * dat)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));

	mglData * lret = mgl_datac_abs(dat);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_datac_abs_(uintptr_t * dat)
static int _bind_mgl_datac_abs_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_abs_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_datac_abs_(uintptr_t * dat) function, expected prototype:\nuintptr_t mgl_datac_abs_(uintptr_t * dat)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));

	uintptr_t stack_lret = mgl_datac_abs_(dat);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// mglData * mgl_datac_arg(const mglDataA * dat)
static int _bind_mgl_datac_arg(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_arg(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_datac_arg(const mglDataA * dat) function, expected prototype:\nmglData * mgl_datac_arg(const mglDataA * dat)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* dat=(Luna< mglDataA >::check(L,1));

	mglData * lret = mgl_datac_arg(dat);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_datac_arg_(uintptr_t * dat)
static int _bind_mgl_datac_arg_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_arg_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_datac_arg_(uintptr_t * dat) function, expected prototype:\nuintptr_t mgl_datac_arg_(uintptr_t * dat)\nClass arguments details:\n");
	}

	uintptr_t* dat=(Luna< uintptr_t >::check(L,1));

	uintptr_t stack_lret = mgl_datac_arg_(dat);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// dual mgl_datac_linear(const mglDataA * d, double x, double y, double z)
static int _bind_mgl_datac_linear(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_linear(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in dual mgl_datac_linear(const mglDataA * d, double x, double y, double z) function, expected prototype:\ndual mgl_datac_linear(const mglDataA * d, double x, double y, double z)\nClass arguments details:\narg 1 ID = 45413231\n");
	}

	const mglDataA* d=(Luna< mglDataA >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	dual stack_lret = mgl_datac_linear(d, x, y, z);
	dual* lret = new dual(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< dual >::push(L,lret,true);

	return 1;
}

// dual mgl_datac_linear_(uintptr_t * d, double * x, double * y, double * z)
static int _bind_mgl_datac_linear_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_linear_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in dual mgl_datac_linear_(uintptr_t * d, double * x, double * y, double * z) function, expected prototype:\ndual mgl_datac_linear_(uintptr_t * d, double * x, double * y, double * z)\nClass arguments details:\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	dual stack_lret = mgl_datac_linear_(d, &x, &y, &z);
	dual* lret = new dual(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< dual >::push(L,lret,true);

	return 1;
}

// dual mgl_datac_linear_ext(const mglDataA * d, double x, double y, double z, dual * dx, dual * dy, dual * dz)
static int _bind_mgl_datac_linear_ext(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_linear_ext(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in dual mgl_datac_linear_ext(const mglDataA * d, double x, double y, double z, dual * dx, dual * dy, dual * dz) function, expected prototype:\ndual mgl_datac_linear_ext(const mglDataA * d, double x, double y, double z, dual * dx, dual * dy, dual * dz)\nClass arguments details:\narg 1 ID = 45413231\narg 5 ID = 3094652\narg 6 ID = 3094652\narg 7 ID = 3094652\n");
	}

	const mglDataA* d=(Luna< mglDataA >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	dual* dx=(Luna< std::complex< double > >::checkSubType< dual >(L,5));
	dual* dy=(Luna< std::complex< double > >::checkSubType< dual >(L,6));
	dual* dz=(Luna< std::complex< double > >::checkSubType< dual >(L,7));

	dual stack_lret = mgl_datac_linear_ext(d, x, y, z, dx, dy, dz);
	dual* lret = new dual(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< dual >::push(L,lret,true);

	return 1;
}

// dual mgl_datac_linear_ext_(uintptr_t * d, double * x, double * y, double * z, dual * dx, dual * dy, dual * dz)
static int _bind_mgl_datac_linear_ext_(lua_State *L) {
	if (!_lg_typecheck_mgl_datac_linear_ext_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in dual mgl_datac_linear_ext_(uintptr_t * d, double * x, double * y, double * z, dual * dx, dual * dy, dual * dz) function, expected prototype:\ndual mgl_datac_linear_ext_(uintptr_t * d, double * x, double * y, double * z, dual * dx, dual * dy, dual * dz)\nClass arguments details:\narg 5 ID = 3094652\narg 6 ID = 3094652\narg 7 ID = 3094652\n");
	}

	uintptr_t* d=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	dual* dx=(Luna< std::complex< double > >::checkSubType< dual >(L,5));
	dual* dy=(Luna< std::complex< double > >::checkSubType< dual >(L,6));
	dual* dz=(Luna< std::complex< double > >::checkSubType< dual >(L,7));

	dual stack_lret = mgl_datac_linear_ext_(d, &x, &y, &z, dx, dy, dz);
	dual* lret = new dual(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< dual >::push(L,lret,true);

	return 1;
}

// const char * mglchr(const char * str, char ch)
static int _bind_mglchr(lua_State *L) {
	if (!_lg_typecheck_mglchr(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in const char * mglchr(const char * str, char ch) function, expected prototype:\nconst char * mglchr(const char * str, char ch)\nClass arguments details:\n");
	}

	const char * str=(const char *)lua_tostring(L,1);
	char ch=(char)lua_tointeger(L,2);

	const char * lret = mglchr(str, ch);
	lua_pushstring(L,lret);

	return 1;
}

// void mgl_set_num_thr(int n)
static int _bind_mgl_set_num_thr(lua_State *L) {
	if (!_lg_typecheck_mgl_set_num_thr(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_num_thr(int n) function, expected prototype:\nvoid mgl_set_num_thr(int n)\nClass arguments details:\n");
	}

	int n=(int)lua_tointeger(L,1);

	mgl_set_num_thr(n);

	return 0;
}

// void mgl_set_test_mode(int enable)
static int _bind_mgl_set_test_mode(lua_State *L) {
	if (!_lg_typecheck_mgl_set_test_mode(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_set_test_mode(int enable) function, expected prototype:\nvoid mgl_set_test_mode(int enable)\nClass arguments details:\n");
	}

	int enable=(int)lua_tointeger(L,1);

	mgl_set_test_mode(enable);

	return 0;
}

// void mgl_strtrim(char * str)
static int _bind_mgl_strtrim(lua_State *L) {
	if (!_lg_typecheck_mgl_strtrim(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_strtrim(char * str) function, expected prototype:\nvoid mgl_strtrim(char * str)\nClass arguments details:\n");
	}

	char str=(char)lua_tointeger(L,1);

	mgl_strtrim(&str);

	return 0;
}

// void mgl_strlwr(char * str)
static int _bind_mgl_strlwr(lua_State *L) {
	if (!_lg_typecheck_mgl_strlwr(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_strlwr(char * str) function, expected prototype:\nvoid mgl_strlwr(char * str)\nClass arguments details:\n");
	}

	char str=(char)lua_tointeger(L,1);

	mgl_strlwr(&str);

	return 0;
}

// mglData * mgl_fit_1(mglBase * gr, const mglDataA * y, const char * eq, const char * var, mglData * ini, const char * opt)
static int _bind_mgl_fit_1(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_1(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_fit_1(mglBase * gr, const mglDataA * y, const char * eq, const char * var, mglData * ini, const char * opt) function, expected prototype:\nmglData * mgl_fit_1(mglBase * gr, const mglDataA * y, const char * eq, const char * var, mglData * ini, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const char * eq=(const char *)lua_tostring(L,3);
	const char * var=(const char *)lua_tostring(L,4);
	mglData* ini=(Luna< mglDataA >::checkSubType< mglData >(L,5));
	const char * opt=(const char *)lua_tostring(L,6);

	mglData * lret = mgl_fit_1(gr, y, eq, var, ini, opt);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// mglData * mgl_fit_2(mglBase * gr, const mglDataA * z, const char * eq, const char * var, mglData * ini, const char * opt)
static int _bind_mgl_fit_2(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_2(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_fit_2(mglBase * gr, const mglDataA * z, const char * eq, const char * var, mglData * ini, const char * opt) function, expected prototype:\nmglData * mgl_fit_2(mglBase * gr, const mglDataA * z, const char * eq, const char * var, mglData * ini, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const char * eq=(const char *)lua_tostring(L,3);
	const char * var=(const char *)lua_tostring(L,4);
	mglData* ini=(Luna< mglDataA >::checkSubType< mglData >(L,5));
	const char * opt=(const char *)lua_tostring(L,6);

	mglData * lret = mgl_fit_2(gr, z, eq, var, ini, opt);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// mglData * mgl_fit_3(mglBase * gr, const mglDataA * a, const char * eq, const char * var, mglData * ini, const char * opt)
static int _bind_mgl_fit_3(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_3(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_fit_3(mglBase * gr, const mglDataA * a, const char * eq, const char * var, mglData * ini, const char * opt) function, expected prototype:\nmglData * mgl_fit_3(mglBase * gr, const mglDataA * a, const char * eq, const char * var, mglData * ini, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * eq=(const char *)lua_tostring(L,3);
	const char * var=(const char *)lua_tostring(L,4);
	mglData* ini=(Luna< mglDataA >::checkSubType< mglData >(L,5));
	const char * opt=(const char *)lua_tostring(L,6);

	mglData * lret = mgl_fit_3(gr, a, eq, var, ini, opt);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// mglData * mgl_fit_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const char * eq, const char * var, mglData * ini, const char * opt)
static int _bind_mgl_fit_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_fit_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const char * eq, const char * var, mglData * ini, const char * opt) function, expected prototype:\nmglData * mgl_fit_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const char * eq, const char * var, mglData * ini, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const char * eq=(const char *)lua_tostring(L,4);
	const char * var=(const char *)lua_tostring(L,5);
	mglData* ini=(Luna< mglDataA >::checkSubType< mglData >(L,6));
	const char * opt=(const char *)lua_tostring(L,7);

	mglData * lret = mgl_fit_xy(gr, x, y, eq, var, ini, opt);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// mglData * mgl_fit_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * eq, const char * var, mglData * ini, const char * opt)
static int _bind_mgl_fit_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_fit_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * eq, const char * var, mglData * ini, const char * opt) function, expected prototype:\nmglData * mgl_fit_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * eq, const char * var, mglData * ini, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 7 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * eq=(const char *)lua_tostring(L,5);
	const char * var=(const char *)lua_tostring(L,6);
	mglData* ini=(Luna< mglDataA >::checkSubType< mglData >(L,7));
	const char * opt=(const char *)lua_tostring(L,8);

	mglData * lret = mgl_fit_xyz(gr, x, y, z, eq, var, ini, opt);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// mglData * mgl_fit_xyza(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * eq, const char * var, mglData * ini, const char * opt)
static int _bind_mgl_fit_xyza(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_xyza(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_fit_xyza(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * eq, const char * var, mglData * ini, const char * opt) function, expected prototype:\nmglData * mgl_fit_xyza(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * eq, const char * var, mglData * ini, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 8 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	const char * eq=(const char *)lua_tostring(L,6);
	const char * var=(const char *)lua_tostring(L,7);
	mglData* ini=(Luna< mglDataA >::checkSubType< mglData >(L,8));
	const char * opt=(const char *)lua_tostring(L,9);

	mglData * lret = mgl_fit_xyza(gr, x, y, z, a, eq, var, ini, opt);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// mglData * mgl_fit_ys(mglBase * gr, const mglDataA * y, const mglDataA * s, const char * eq, const char * var, mglData * ini, const char * opt)
static int _bind_mgl_fit_ys(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_ys(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_fit_ys(mglBase * gr, const mglDataA * y, const mglDataA * s, const char * eq, const char * var, mglData * ini, const char * opt) function, expected prototype:\nmglData * mgl_fit_ys(mglBase * gr, const mglDataA * y, const mglDataA * s, const char * eq, const char * var, mglData * ini, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const mglDataA* s=(Luna< mglDataA >::check(L,3));
	const char * eq=(const char *)lua_tostring(L,4);
	const char * var=(const char *)lua_tostring(L,5);
	mglData* ini=(Luna< mglDataA >::checkSubType< mglData >(L,6));
	const char * opt=(const char *)lua_tostring(L,7);

	mglData * lret = mgl_fit_ys(gr, y, s, eq, var, ini, opt);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// mglData * mgl_fit_xys(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * s, const char * eq, const char * var, mglData * ini, const char * opt)
static int _bind_mgl_fit_xys(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_xys(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_fit_xys(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * s, const char * eq, const char * var, mglData * ini, const char * opt) function, expected prototype:\nmglData * mgl_fit_xys(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * s, const char * eq, const char * var, mglData * ini, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 7 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* s=(Luna< mglDataA >::check(L,4));
	const char * eq=(const char *)lua_tostring(L,5);
	const char * var=(const char *)lua_tostring(L,6);
	mglData* ini=(Luna< mglDataA >::checkSubType< mglData >(L,7));
	const char * opt=(const char *)lua_tostring(L,8);

	mglData * lret = mgl_fit_xys(gr, x, y, s, eq, var, ini, opt);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// mglData * mgl_fit_xyzs(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * s, const char * eq, const char * var, mglData * ini, const char * opt)
static int _bind_mgl_fit_xyzs(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_xyzs(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_fit_xyzs(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * s, const char * eq, const char * var, mglData * ini, const char * opt) function, expected prototype:\nmglData * mgl_fit_xyzs(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * s, const char * eq, const char * var, mglData * ini, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 8 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* s=(Luna< mglDataA >::check(L,5));
	const char * eq=(const char *)lua_tostring(L,6);
	const char * var=(const char *)lua_tostring(L,7);
	mglData* ini=(Luna< mglDataA >::checkSubType< mglData >(L,8));
	const char * opt=(const char *)lua_tostring(L,9);

	mglData * lret = mgl_fit_xyzs(gr, x, y, z, s, eq, var, ini, opt);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// mglData * mgl_fit_xyzas(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * s, const char * eq, const char * var, mglData * ini, const char * opt)
static int _bind_mgl_fit_xyzas(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_xyzas(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_fit_xyzas(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * s, const char * eq, const char * var, mglData * ini, const char * opt) function, expected prototype:\nmglData * mgl_fit_xyzas(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * s, const char * eq, const char * var, mglData * ini, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 9 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	const mglDataA* s=(Luna< mglDataA >::check(L,6));
	const char * eq=(const char *)lua_tostring(L,7);
	const char * var=(const char *)lua_tostring(L,8);
	mglData* ini=(Luna< mglDataA >::checkSubType< mglData >(L,9));
	const char * opt=(const char *)lua_tostring(L,10);

	mglData * lret = mgl_fit_xyzas(gr, x, y, z, a, s, eq, var, ini, opt);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// const char * mgl_get_fit(mglBase * gr)
static int _bind_mgl_get_fit(lua_State *L) {
	if (!_lg_typecheck_mgl_get_fit(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in const char * mgl_get_fit(mglBase * gr) function, expected prototype:\nconst char * mgl_get_fit(mglBase * gr)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));

	const char * lret = mgl_get_fit(gr);
	lua_pushstring(L,lret);

	return 1;
}

// mglData * mgl_hist_x(mglBase * gr, const mglDataA * x, const mglDataA * a, const char * opt)
static int _bind_mgl_hist_x(lua_State *L) {
	if (!_lg_typecheck_mgl_hist_x(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_hist_x(mglBase * gr, const mglDataA * x, const mglDataA * a, const char * opt) function, expected prototype:\nmglData * mgl_hist_x(mglBase * gr, const mglDataA * x, const mglDataA * a, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const char * opt=(const char *)lua_tostring(L,4);

	mglData * lret = mgl_hist_x(gr, x, a, opt);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// mglData * mgl_hist_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * a, const char * opt)
static int _bind_mgl_hist_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_hist_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_hist_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * a, const char * opt) function, expected prototype:\nmglData * mgl_hist_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * a, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* a=(Luna< mglDataA >::check(L,4));
	const char * opt=(const char *)lua_tostring(L,5);

	mglData * lret = mgl_hist_xy(gr, x, y, a, opt);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// mglData * mgl_hist_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * opt)
static int _bind_mgl_hist_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_hist_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglData * mgl_hist_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * opt) function, expected prototype:\nmglData * mgl_hist_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	const char * opt=(const char *)lua_tostring(L,6);

	mglData * lret = mgl_hist_xyz(gr, x, y, z, a, opt);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglData >::push(L,lret,false);

	return 1;
}

// void mgl_puts_fit(mglBase * gr, double x, double y, double z, const char * prefix, const char * font, double size)
static int _bind_mgl_puts_fit(lua_State *L) {
	if (!_lg_typecheck_mgl_puts_fit(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_puts_fit(mglBase * gr, double x, double y, double z, const char * prefix, const char * font, double size) function, expected prototype:\nvoid mgl_puts_fit(mglBase * gr, double x, double y, double z, const char * prefix, const char * font, double size)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	const char * prefix=(const char *)lua_tostring(L,5);
	const char * font=(const char *)lua_tostring(L,6);
	double size=(double)lua_tonumber(L,7);

	mgl_puts_fit(gr, x, y, z, prefix, font, size);

	return 0;
}

// uintptr_t mgl_fit_1_(uintptr_t * gr, uintptr_t * y, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg7, int l, int n)
static int _bind_mgl_fit_1_(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_1_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_fit_1_(uintptr_t * gr, uintptr_t * y, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg7, int l, int n) function, expected prototype:\nuintptr_t mgl_fit_1_(uintptr_t * gr, uintptr_t * y, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg7, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	const char * eq=(const char *)lua_tostring(L,3);
	const char * var=(const char *)lua_tostring(L,4);
	uintptr_t* ini=(Luna< uintptr_t >::check(L,5));
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int l=(int)lua_tointeger(L,8);
	int n=(int)lua_tointeger(L,9);

	uintptr_t stack_lret = mgl_fit_1_(gr, y, eq, var, ini, opt, _arg7, l, n);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// uintptr_t mgl_fit_2_(uintptr_t * gr, uintptr_t * z, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg7, int l, int n)
static int _bind_mgl_fit_2_(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_2_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_fit_2_(uintptr_t * gr, uintptr_t * z, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg7, int l, int n) function, expected prototype:\nuintptr_t mgl_fit_2_(uintptr_t * gr, uintptr_t * z, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg7, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	const char * eq=(const char *)lua_tostring(L,3);
	const char * var=(const char *)lua_tostring(L,4);
	uintptr_t* ini=(Luna< uintptr_t >::check(L,5));
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int l=(int)lua_tointeger(L,8);
	int n=(int)lua_tointeger(L,9);

	uintptr_t stack_lret = mgl_fit_2_(gr, z, eq, var, ini, opt, _arg7, l, n);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// uintptr_t mgl_fit_3_(uintptr_t * gr, uintptr_t * a, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg7, int l, int n)
static int _bind_mgl_fit_3_(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_3_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_fit_3_(uintptr_t * gr, uintptr_t * a, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg7, int l, int n) function, expected prototype:\nuintptr_t mgl_fit_3_(uintptr_t * gr, uintptr_t * a, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg7, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * eq=(const char *)lua_tostring(L,3);
	const char * var=(const char *)lua_tostring(L,4);
	uintptr_t* ini=(Luna< uintptr_t >::check(L,5));
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int l=(int)lua_tointeger(L,8);
	int n=(int)lua_tointeger(L,9);

	uintptr_t stack_lret = mgl_fit_3_(gr, a, eq, var, ini, opt, _arg7, l, n);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// uintptr_t mgl_fit_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg8, int l, int n)
static int _bind_mgl_fit_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_fit_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg8, int l, int n) function, expected prototype:\nuintptr_t mgl_fit_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg8, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	const char * eq=(const char *)lua_tostring(L,4);
	const char * var=(const char *)lua_tostring(L,5);
	uintptr_t* ini=(Luna< uintptr_t >::check(L,6));
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int l=(int)lua_tointeger(L,9);
	int n=(int)lua_tointeger(L,10);

	uintptr_t stack_lret = mgl_fit_xy_(gr, x, y, eq, var, ini, opt, _arg8, l, n);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// uintptr_t mgl_fit_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg9, int l, int n)
static int _bind_mgl_fit_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_fit_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg9, int l, int n) function, expected prototype:\nuintptr_t mgl_fit_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg9, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * eq=(const char *)lua_tostring(L,5);
	const char * var=(const char *)lua_tostring(L,6);
	uintptr_t* ini=(Luna< uintptr_t >::check(L,7));
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int l=(int)lua_tointeger(L,10);
	int n=(int)lua_tointeger(L,11);

	uintptr_t stack_lret = mgl_fit_xyz_(gr, x, y, z, eq, var, ini, opt, _arg9, l, n);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// uintptr_t mgl_fit_xyza_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg10, int l, int n)
static int _bind_mgl_fit_xyza_(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_xyza_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_fit_xyza_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg10, int l, int n) function, expected prototype:\nuintptr_t mgl_fit_xyza_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg10, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* a=(Luna< uintptr_t >::check(L,5));
	const char * eq=(const char *)lua_tostring(L,6);
	const char * var=(const char *)lua_tostring(L,7);
	uintptr_t* ini=(Luna< uintptr_t >::check(L,8));
	const char * opt=(const char *)lua_tostring(L,9);
	int _arg10=(int)lua_tointeger(L,10);
	int l=(int)lua_tointeger(L,11);
	int n=(int)lua_tointeger(L,12);

	uintptr_t stack_lret = mgl_fit_xyza_(gr, x, y, z, a, eq, var, ini, opt, _arg10, l, n);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// uintptr_t mgl_fit_ys_(uintptr_t * gr, uintptr_t * y, uintptr_t * ss, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg8, int l, int n)
static int _bind_mgl_fit_ys_(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_ys_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_fit_ys_(uintptr_t * gr, uintptr_t * y, uintptr_t * ss, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg8, int l, int n) function, expected prototype:\nuintptr_t mgl_fit_ys_(uintptr_t * gr, uintptr_t * y, uintptr_t * ss, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg8, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	uintptr_t* ss=(Luna< uintptr_t >::check(L,3));
	const char * eq=(const char *)lua_tostring(L,4);
	const char * var=(const char *)lua_tostring(L,5);
	uintptr_t* ini=(Luna< uintptr_t >::check(L,6));
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int l=(int)lua_tointeger(L,9);
	int n=(int)lua_tointeger(L,10);

	uintptr_t stack_lret = mgl_fit_ys_(gr, y, ss, eq, var, ini, opt, _arg8, l, n);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// uintptr_t mgl_fit_xys_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ss, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg9, int l, int n)
static int _bind_mgl_fit_xys_(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_xys_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_fit_xys_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ss, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg9, int l, int n) function, expected prototype:\nuintptr_t mgl_fit_xys_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ss, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg9, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* ss=(Luna< uintptr_t >::check(L,4));
	const char * eq=(const char *)lua_tostring(L,5);
	const char * var=(const char *)lua_tostring(L,6);
	uintptr_t* ini=(Luna< uintptr_t >::check(L,7));
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int l=(int)lua_tointeger(L,10);
	int n=(int)lua_tointeger(L,11);

	uintptr_t stack_lret = mgl_fit_xys_(gr, x, y, ss, eq, var, ini, opt, _arg9, l, n);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// uintptr_t mgl_fit_xyzs_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ss, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg10, int l, int n)
static int _bind_mgl_fit_xyzs_(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_xyzs_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_fit_xyzs_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ss, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg10, int l, int n) function, expected prototype:\nuintptr_t mgl_fit_xyzs_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ss, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg10, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* ss=(Luna< uintptr_t >::check(L,5));
	const char * eq=(const char *)lua_tostring(L,6);
	const char * var=(const char *)lua_tostring(L,7);
	uintptr_t* ini=(Luna< uintptr_t >::check(L,8));
	const char * opt=(const char *)lua_tostring(L,9);
	int _arg10=(int)lua_tointeger(L,10);
	int l=(int)lua_tointeger(L,11);
	int n=(int)lua_tointeger(L,12);

	uintptr_t stack_lret = mgl_fit_xyzs_(gr, x, y, z, ss, eq, var, ini, opt, _arg10, l, n);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// uintptr_t mgl_fit_xyzas_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * ss, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg11, int l, int n)
static int _bind_mgl_fit_xyzas_(lua_State *L) {
	if (!_lg_typecheck_mgl_fit_xyzas_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_fit_xyzas_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * ss, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg11, int l, int n) function, expected prototype:\nuintptr_t mgl_fit_xyzas_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * ss, const char * eq, const char * var, uintptr_t * ini, const char * opt, int arg11, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* a=(Luna< uintptr_t >::check(L,5));
	uintptr_t* ss=(Luna< uintptr_t >::check(L,6));
	const char * eq=(const char *)lua_tostring(L,7);
	const char * var=(const char *)lua_tostring(L,8);
	uintptr_t* ini=(Luna< uintptr_t >::check(L,9));
	const char * opt=(const char *)lua_tostring(L,10);
	int _arg11=(int)lua_tointeger(L,11);
	int l=(int)lua_tointeger(L,12);
	int n=(int)lua_tointeger(L,13);

	uintptr_t stack_lret = mgl_fit_xyzas_(gr, x, y, z, a, ss, eq, var, ini, opt, _arg11, l, n);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// uintptr_t mgl_hist_x_(uintptr_t * gr, uintptr_t * x, uintptr_t * a, const char * opt, int arg5)
static int _bind_mgl_hist_x_(lua_State *L) {
	if (!_lg_typecheck_mgl_hist_x_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_hist_x_(uintptr_t * gr, uintptr_t * x, uintptr_t * a, const char * opt, int arg5) function, expected prototype:\nuintptr_t mgl_hist_x_(uintptr_t * gr, uintptr_t * x, uintptr_t * a, const char * opt, int arg5)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* a=(Luna< uintptr_t >::check(L,3));
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);

	uintptr_t stack_lret = mgl_hist_x_(gr, x, a, opt, _arg5);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// uintptr_t mgl_hist_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * a, const char * opt, int arg6)
static int _bind_mgl_hist_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_hist_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_hist_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * a, const char * opt, int arg6) function, expected prototype:\nuintptr_t mgl_hist_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * a, const char * opt, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* a=(Luna< uintptr_t >::check(L,4));
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	uintptr_t stack_lret = mgl_hist_xy_(gr, x, y, a, opt, _arg6);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// uintptr_t mgl_hist_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * opt, int arg7)
static int _bind_mgl_hist_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_hist_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_hist_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * opt, int arg7) function, expected prototype:\nuintptr_t mgl_hist_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * opt, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* a=(Luna< uintptr_t >::check(L,5));
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	uintptr_t stack_lret = mgl_hist_xyz_(gr, x, y, z, a, opt, _arg7);
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// void mgl_puts_fit_(uintptr_t * gr, double * x, double * y, double * z, const char * prefix, const char * font, double * size, int l, int n)
static int _bind_mgl_puts_fit_(lua_State *L) {
	if (!_lg_typecheck_mgl_puts_fit_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_puts_fit_(uintptr_t * gr, double * x, double * y, double * z, const char * prefix, const char * font, double * size, int l, int n) function, expected prototype:\nvoid mgl_puts_fit_(uintptr_t * gr, double * x, double * y, double * z, const char * prefix, const char * font, double * size, int l, int n)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	const char * prefix=(const char *)lua_tostring(L,5);
	const char * font=(const char *)lua_tostring(L,6);
	double size=(double)lua_tonumber(L,7);
	int l=(int)lua_tointeger(L,8);
	int n=(int)lua_tointeger(L,9);

	mgl_puts_fit_(gr, &x, &y, &z, prefix, font, &size, l, n);

	return 0;
}

// char mglGetStyle(const char * how, int * font, int * align = 0)
static int _bind_mglGetStyle(lua_State *L) {
	if (!_lg_typecheck_mglGetStyle(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in char mglGetStyle(const char * how, int * font, int * align = 0) function, expected prototype:\nchar mglGetStyle(const char * how, int * font, int * align = 0)\nClass arguments details:\n");
	}

	int luatop = lua_gettop(L);

	const char * how=(const char *)lua_tostring(L,1);
	int font=(int)lua_tointeger(L,2);
	int align=luatop>2 ? (int)lua_tointeger(L,3) : 0;

	char lret = mglGetStyle(how, &font, &align);
	lua_pushnumber(L,lret);

	return 1;
}

// mglBase * mgl_create_graph_gl()
static int _bind_mgl_create_graph_gl(lua_State *L) {
	if (!_lg_typecheck_mgl_create_graph_gl(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in mglBase * mgl_create_graph_gl() function, expected prototype:\nmglBase * mgl_create_graph_gl()\nClass arguments details:\n");
	}


	mglBase * lret = mgl_create_graph_gl();
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< mglBase >::push(L,lret,false);

	return 1;
}

// uintptr_t mgl_create_graph_gl_()
static int _bind_mgl_create_graph_gl_(lua_State *L) {
	if (!_lg_typecheck_mgl_create_graph_gl_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in uintptr_t mgl_create_graph_gl_() function, expected prototype:\nuintptr_t mgl_create_graph_gl_()\nClass arguments details:\n");
	}


	uintptr_t stack_lret = mgl_create_graph_gl_();
	uintptr_t* lret = new uintptr_t(stack_lret);
	if(!lret) return 0; // Do not write NULL pointers.

	Luna< uintptr_t >::push(L,lret,true);

	return 1;
}

// void mgl_triplot_xyzc(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)
static int _bind_mgl_triplot_xyzc(lua_State *L) {
	if (!_lg_typecheck_mgl_triplot_xyzc(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_triplot_xyzc(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_triplot_xyzc(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* nums=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const mglDataA* c=(Luna< mglDataA >::check(L,6));
	const char * sch=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_triplot_xyzc(gr, nums, x, y, z, c, sch, opt);

	return 0;
}

// void mgl_triplot_xyzc_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg9, int arg10)
static int _bind_mgl_triplot_xyzc_(lua_State *L) {
	if (!_lg_typecheck_mgl_triplot_xyzc_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_triplot_xyzc_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_triplot_xyzc_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* nums=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	uintptr_t* c=(Luna< uintptr_t >::check(L,6));
	const char * sch=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_triplot_xyzc_(gr, nums, x, y, z, c, sch, opt, _arg9, _arg10);

	return 0;
}

// void mgl_triplot_xyz(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_triplot_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_triplot_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_triplot_xyz(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_triplot_xyz(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* nums=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_triplot_xyz(gr, nums, x, y, z, sch, opt);

	return 0;
}

// void mgl_triplot_xyz_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_triplot_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_triplot_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_triplot_xyz_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_triplot_xyz_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* nums=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_triplot_xyz_(gr, nums, x, y, z, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_triplot_xy(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const char * sch, const char * opt)
static int _bind_mgl_triplot_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_triplot_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_triplot_xy(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_triplot_xy(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* nums=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_triplot_xy(gr, nums, x, y, sch, opt);

	return 0;
}

// void mgl_triplot_xy_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_triplot_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_triplot_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_triplot_xy_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_triplot_xy_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* nums=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_triplot_xy_(gr, nums, x, y, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_quadplot_xyzc(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)
static int _bind_mgl_quadplot_xyzc(lua_State *L) {
	if (!_lg_typecheck_mgl_quadplot_xyzc(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_quadplot_xyzc(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_quadplot_xyzc(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* nums=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const mglDataA* c=(Luna< mglDataA >::check(L,6));
	const char * sch=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_quadplot_xyzc(gr, nums, x, y, z, c, sch, opt);

	return 0;
}

// void mgl_quadplot_xyzc_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg9, int arg10)
static int _bind_mgl_quadplot_xyzc_(lua_State *L) {
	if (!_lg_typecheck_mgl_quadplot_xyzc_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_quadplot_xyzc_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_quadplot_xyzc_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* nums=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	uintptr_t* c=(Luna< uintptr_t >::check(L,6));
	const char * sch=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_quadplot_xyzc_(gr, nums, x, y, z, c, sch, opt, _arg9, _arg10);

	return 0;
}

// void mgl_quadplot_xyz(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_quadplot_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_quadplot_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_quadplot_xyz(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_quadplot_xyz(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* nums=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_quadplot_xyz(gr, nums, x, y, z, sch, opt);

	return 0;
}

// void mgl_quadplot_xyz_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_quadplot_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_quadplot_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_quadplot_xyz_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_quadplot_xyz_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* nums=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_quadplot_xyz_(gr, nums, x, y, z, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_quadplot_xy(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const char * sch, const char * opt)
static int _bind_mgl_quadplot_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_quadplot_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_quadplot_xy(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_quadplot_xy(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* nums=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_quadplot_xy(gr, nums, x, y, sch, opt);

	return 0;
}

// void mgl_quadplot_xy_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_quadplot_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_quadplot_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_quadplot_xy_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_quadplot_xy_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* nums=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_quadplot_xy_(gr, nums, x, y, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_tricont_xyzcv(mglBase * gr, const mglDataA * v, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)
static int _bind_mgl_tricont_xyzcv(lua_State *L) {
	if (!_lg_typecheck_mgl_tricont_xyzcv(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tricont_xyzcv(mglBase * gr, const mglDataA * v, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_tricont_xyzcv(mglBase * gr, const mglDataA * v, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 7 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* nums=(Luna< mglDataA >::check(L,3));
	const mglDataA* x=(Luna< mglDataA >::check(L,4));
	const mglDataA* y=(Luna< mglDataA >::check(L,5));
	const mglDataA* z=(Luna< mglDataA >::check(L,6));
	const mglDataA* c=(Luna< mglDataA >::check(L,7));
	const char * sch=(const char *)lua_tostring(L,8);
	const char * opt=(const char *)lua_tostring(L,9);

	mgl_tricont_xyzcv(gr, v, nums, x, y, z, c, sch, opt);

	return 0;
}

// void mgl_tricont_xyzcv_(uintptr_t * gr, uintptr_t * v, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg10, int arg11)
static int _bind_mgl_tricont_xyzcv_(lua_State *L) {
	if (!_lg_typecheck_mgl_tricont_xyzcv_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tricont_xyzcv_(uintptr_t * gr, uintptr_t * v, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg10, int arg11) function, expected prototype:\nvoid mgl_tricont_xyzcv_(uintptr_t * gr, uintptr_t * v, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg10, int arg11)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* nums=(Luna< uintptr_t >::check(L,3));
	uintptr_t* x=(Luna< uintptr_t >::check(L,4));
	uintptr_t* y=(Luna< uintptr_t >::check(L,5));
	uintptr_t* z=(Luna< uintptr_t >::check(L,6));
	uintptr_t* c=(Luna< uintptr_t >::check(L,7));
	const char * sch=(const char *)lua_tostring(L,8);
	const char * opt=(const char *)lua_tostring(L,9);
	int _arg10=(int)lua_tointeger(L,10);
	int _arg11=(int)lua_tointeger(L,11);

	mgl_tricont_xyzcv_(gr, v, nums, x, y, z, c, sch, opt, _arg10, _arg11);

	return 0;
}

// void mgl_tricont_xycv(mglBase * gr, const mglDataA * v, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_tricont_xycv(lua_State *L) {
	if (!_lg_typecheck_mgl_tricont_xycv(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tricont_xycv(mglBase * gr, const mglDataA * v, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_tricont_xycv(mglBase * gr, const mglDataA * v, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* nums=(Luna< mglDataA >::check(L,3));
	const mglDataA* x=(Luna< mglDataA >::check(L,4));
	const mglDataA* y=(Luna< mglDataA >::check(L,5));
	const mglDataA* z=(Luna< mglDataA >::check(L,6));
	const char * sch=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_tricont_xycv(gr, v, nums, x, y, z, sch, opt);

	return 0;
}

// void mgl_tricont_xycv_(uintptr_t * gr, uintptr_t * v, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg9, int arg10)
static int _bind_mgl_tricont_xycv_(lua_State *L) {
	if (!_lg_typecheck_mgl_tricont_xycv_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tricont_xycv_(uintptr_t * gr, uintptr_t * v, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_tricont_xycv_(uintptr_t * gr, uintptr_t * v, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* nums=(Luna< uintptr_t >::check(L,3));
	uintptr_t* x=(Luna< uintptr_t >::check(L,4));
	uintptr_t* y=(Luna< uintptr_t >::check(L,5));
	uintptr_t* z=(Luna< uintptr_t >::check(L,6));
	const char * sch=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_tricont_xycv_(gr, v, nums, x, y, z, sch, opt, _arg9, _arg10);

	return 0;
}

// void mgl_tricont_xyzc(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)
static int _bind_mgl_tricont_xyzc(lua_State *L) {
	if (!_lg_typecheck_mgl_tricont_xyzc(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tricont_xyzc(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_tricont_xyzc(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* nums=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const mglDataA* c=(Luna< mglDataA >::check(L,6));
	const char * sch=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_tricont_xyzc(gr, nums, x, y, z, c, sch, opt);

	return 0;
}

// void mgl_tricont_xyzc_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg9, int arg10)
static int _bind_mgl_tricont_xyzc_(lua_State *L) {
	if (!_lg_typecheck_mgl_tricont_xyzc_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tricont_xyzc_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_tricont_xyzc_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* nums=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	uintptr_t* c=(Luna< uintptr_t >::check(L,6));
	const char * sch=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_tricont_xyzc_(gr, nums, x, y, z, c, sch, opt, _arg9, _arg10);

	return 0;
}

// void mgl_tricont_xyc(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_tricont_xyc(lua_State *L) {
	if (!_lg_typecheck_mgl_tricont_xyc(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tricont_xyc(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_tricont_xyc(mglBase * gr, const mglDataA * nums, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* nums=(Luna< mglDataA >::check(L,2));
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_tricont_xyc(gr, nums, x, y, z, sch, opt);

	return 0;
}

// void mgl_tricont_xyc_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_tricont_xyc_(lua_State *L) {
	if (!_lg_typecheck_mgl_tricont_xyc_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tricont_xyc_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_tricont_xyc_(uintptr_t * gr, uintptr_t * nums, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* nums=(Luna< uintptr_t >::check(L,2));
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_tricont_xyc_(gr, nums, x, y, z, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_dots(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_dots(lua_State *L) {
	if (!_lg_typecheck_mgl_dots(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dots(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_dots(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_dots(gr, x, y, z, sch, opt);

	return 0;
}

// void mgl_dots_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_dots_(lua_State *L) {
	if (!_lg_typecheck_mgl_dots_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dots_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_dots_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_dots_(gr, x, y, z, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_dots_a(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, const char * opt)
static int _bind_mgl_dots_a(lua_State *L) {
	if (!_lg_typecheck_mgl_dots_a(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dots_a(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_dots_a(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_dots_a(gr, x, y, z, a, sch, opt);

	return 0;
}

// void mgl_dots_a_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_dots_a_(lua_State *L) {
	if (!_lg_typecheck_mgl_dots_a_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dots_a_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_dots_a_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* a=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_dots_a_(gr, x, y, z, a, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_crust(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_crust(lua_State *L) {
	if (!_lg_typecheck_mgl_crust(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_crust(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_crust(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_crust(gr, x, y, z, sch, opt);

	return 0;
}

// void mgl_crust_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_crust_(lua_State *L) {
	if (!_lg_typecheck_mgl_crust_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_crust_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_crust_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_crust_(gr, x, y, z, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_dens_x(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_dens_x(lua_State *L) {
	if (!_lg_typecheck_mgl_dens_x(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dens_x(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_dens_x(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_dens_x(graph, a, stl, sVal, opt);

	return 0;
}

// void mgl_dens_x_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)
static int _bind_mgl_dens_x_(lua_State *L) {
	if (!_lg_typecheck_mgl_dens_x_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dens_x_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_dens_x_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_dens_x_(graph, a, stl, &sVal, opt, _arg6, _arg7);

	return 0;
}

// void mgl_dens_y(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_dens_y(lua_State *L) {
	if (!_lg_typecheck_mgl_dens_y(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dens_y(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_dens_y(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_dens_y(graph, a, stl, sVal, opt);

	return 0;
}

// void mgl_dens_y_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)
static int _bind_mgl_dens_y_(lua_State *L) {
	if (!_lg_typecheck_mgl_dens_y_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dens_y_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_dens_y_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_dens_y_(graph, a, stl, &sVal, opt, _arg6, _arg7);

	return 0;
}

// void mgl_dens_z(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_dens_z(lua_State *L) {
	if (!_lg_typecheck_mgl_dens_z(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dens_z(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_dens_z(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_dens_z(graph, a, stl, sVal, opt);

	return 0;
}

// void mgl_dens_z_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)
static int _bind_mgl_dens_z_(lua_State *L) {
	if (!_lg_typecheck_mgl_dens_z_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dens_z_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_dens_z_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_dens_z_(graph, a, stl, &sVal, opt, _arg6, _arg7);

	return 0;
}

// void mgl_cont_x(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_cont_x(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_x(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_x(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_cont_x(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_cont_x(graph, a, stl, sVal, opt);

	return 0;
}

// void mgl_cont_x_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)
static int _bind_mgl_cont_x_(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_x_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_x_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_cont_x_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_cont_x_(graph, a, stl, &sVal, opt, _arg6, _arg7);

	return 0;
}

// void mgl_cont_y(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_cont_y(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_y(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_y(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_cont_y(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_cont_y(graph, a, stl, sVal, opt);

	return 0;
}

// void mgl_cont_y_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)
static int _bind_mgl_cont_y_(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_y_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_y_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_cont_y_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_cont_y_(graph, a, stl, &sVal, opt, _arg6, _arg7);

	return 0;
}

// void mgl_cont_z(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_cont_z(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_z(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_z(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_cont_z(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_cont_z(graph, a, stl, sVal, opt);

	return 0;
}

// void mgl_cont_z_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)
static int _bind_mgl_cont_z_(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_z_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_z_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_cont_z_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_cont_z_(graph, a, stl, &sVal, opt, _arg6, _arg7);

	return 0;
}

// void mgl_cont_x_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_cont_x_val(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_x_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_x_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_cont_x_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_cont_x_val(graph, v, a, stl, sVal, opt);

	return 0;
}

// void mgl_cont_x_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8)
static int _bind_mgl_cont_x_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_x_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_x_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_cont_x_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* a=(Luna< uintptr_t >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_cont_x_val_(graph, v, a, stl, &sVal, opt, _arg7, _arg8);

	return 0;
}

// void mgl_cont_y_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_cont_y_val(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_y_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_y_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_cont_y_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_cont_y_val(graph, v, a, stl, sVal, opt);

	return 0;
}

// void mgl_cont_y_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8)
static int _bind_mgl_cont_y_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_y_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_y_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_cont_y_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* a=(Luna< uintptr_t >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_cont_y_val_(graph, v, a, stl, &sVal, opt, _arg7, _arg8);

	return 0;
}

// void mgl_cont_z_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_cont_z_val(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_z_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_z_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_cont_z_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_cont_z_val(graph, v, a, stl, sVal, opt);

	return 0;
}

// void mgl_cont_z_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8)
static int _bind_mgl_cont_z_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_cont_z_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cont_z_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_cont_z_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* a=(Luna< uintptr_t >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_cont_z_val_(graph, v, a, stl, &sVal, opt, _arg7, _arg8);

	return 0;
}

// void mgl_contf_x(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_contf_x(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_x(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_x(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_contf_x(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_contf_x(graph, a, stl, sVal, opt);

	return 0;
}

// void mgl_contf_x_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)
static int _bind_mgl_contf_x_(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_x_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_x_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_contf_x_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_contf_x_(graph, a, stl, &sVal, opt, _arg6, _arg7);

	return 0;
}

// void mgl_contf_y(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_contf_y(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_y(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_y(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_contf_y(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_contf_y(graph, a, stl, sVal, opt);

	return 0;
}

// void mgl_contf_y_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)
static int _bind_mgl_contf_y_(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_y_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_y_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_contf_y_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_contf_y_(graph, a, stl, &sVal, opt, _arg6, _arg7);

	return 0;
}

// void mgl_contf_z(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_contf_z(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_z(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_z(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_contf_z(mglBase * graph, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_contf_z(graph, a, stl, sVal, opt);

	return 0;
}

// void mgl_contf_z_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)
static int _bind_mgl_contf_z_(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_z_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_z_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_contf_z_(uintptr_t * graph, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	double sVal=(double)lua_tonumber(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_contf_z_(graph, a, stl, &sVal, opt, _arg6, _arg7);

	return 0;
}

// void mgl_contf_x_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_contf_x_val(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_x_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_x_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_contf_x_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_contf_x_val(graph, v, a, stl, sVal, opt);

	return 0;
}

// void mgl_contf_x_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8)
static int _bind_mgl_contf_x_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_x_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_x_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_contf_x_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* a=(Luna< uintptr_t >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_contf_x_val_(graph, v, a, stl, &sVal, opt, _arg7, _arg8);

	return 0;
}

// void mgl_contf_y_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_contf_y_val(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_y_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_y_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_contf_y_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_contf_y_val(graph, v, a, stl, sVal, opt);

	return 0;
}

// void mgl_contf_y_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8)
static int _bind_mgl_contf_y_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_y_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_y_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_contf_y_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* a=(Luna< uintptr_t >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_contf_y_val_(graph, v, a, stl, &sVal, opt, _arg7, _arg8);

	return 0;
}

// void mgl_contf_z_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt)
static int _bind_mgl_contf_z_val(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_z_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_z_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt) function, expected prototype:\nvoid mgl_contf_z_val(mglBase * graph, const mglDataA * v, const mglDataA * a, const char * stl, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_contf_z_val(graph, v, a, stl, sVal, opt);

	return 0;
}

// void mgl_contf_z_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8)
static int _bind_mgl_contf_z_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_contf_z_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_contf_z_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_contf_z_val_(uintptr_t * graph, uintptr_t * v, uintptr_t * a, const char * stl, double * sVal, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	uintptr_t* a=(Luna< uintptr_t >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	double sVal=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_contf_z_val_(graph, v, a, stl, &sVal, opt, _arg7, _arg8);

	return 0;
}

// void mgl_fplot(mglBase * gr, const char * eqY, const char * pen, const char * opt)
static int _bind_mgl_fplot(lua_State *L) {
	if (!_lg_typecheck_mgl_fplot(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_fplot(mglBase * gr, const char * eqY, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_fplot(mglBase * gr, const char * eqY, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * eqY=(const char *)lua_tostring(L,2);
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_fplot(gr, eqY, pen, opt);

	return 0;
}

// void mgl_fplot_(uintptr_t * gr, const char * fy, const char * stl, const char * opt, int ly, int ls, int lo)
static int _bind_mgl_fplot_(lua_State *L) {
	if (!_lg_typecheck_mgl_fplot_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_fplot_(uintptr_t * gr, const char * fy, const char * stl, const char * opt, int ly, int ls, int lo) function, expected prototype:\nvoid mgl_fplot_(uintptr_t * gr, const char * fy, const char * stl, const char * opt, int ly, int ls, int lo)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fy=(const char *)lua_tostring(L,2);
	const char * stl=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int ly=(int)lua_tointeger(L,5);
	int ls=(int)lua_tointeger(L,6);
	int lo=(int)lua_tointeger(L,7);

	mgl_fplot_(gr, fy, stl, opt, ly, ls, lo);

	return 0;
}

// void mgl_fplot_xyz(mglBase * gr, const char * eqX, const char * eqY, const char * eqZ, const char * pen, const char * opt)
static int _bind_mgl_fplot_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_fplot_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_fplot_xyz(mglBase * gr, const char * eqX, const char * eqY, const char * eqZ, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_fplot_xyz(mglBase * gr, const char * eqX, const char * eqY, const char * eqZ, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const char * eqX=(const char *)lua_tostring(L,2);
	const char * eqY=(const char *)lua_tostring(L,3);
	const char * eqZ=(const char *)lua_tostring(L,4);
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_fplot_xyz(gr, eqX, eqY, eqZ, pen, opt);

	return 0;
}

// void mgl_fplot_xyz_(uintptr_t * gr, const char * fx, const char * fy, const char * fz, const char * stl, const char * opt, int lx, int ly, int lz, int ls, int lo)
static int _bind_mgl_fplot_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_fplot_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_fplot_xyz_(uintptr_t * gr, const char * fx, const char * fy, const char * fz, const char * stl, const char * opt, int lx, int ly, int lz, int ls, int lo) function, expected prototype:\nvoid mgl_fplot_xyz_(uintptr_t * gr, const char * fx, const char * fy, const char * fz, const char * stl, const char * opt, int lx, int ly, int lz, int ls, int lo)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	const char * fx=(const char *)lua_tostring(L,2);
	const char * fy=(const char *)lua_tostring(L,3);
	const char * fz=(const char *)lua_tostring(L,4);
	const char * stl=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int lx=(int)lua_tointeger(L,7);
	int ly=(int)lua_tointeger(L,8);
	int lz=(int)lua_tointeger(L,9);
	int ls=(int)lua_tointeger(L,10);
	int lo=(int)lua_tointeger(L,11);

	mgl_fplot_xyz_(gr, fx, fy, fz, stl, opt, lx, ly, lz, ls, lo);

	return 0;
}

// void mgl_radar(mglBase * graph, const mglDataA * a, const char * pen, const char * opt)
static int _bind_mgl_radar(lua_State *L) {
	if (!_lg_typecheck_mgl_radar(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_radar(mglBase * graph, const mglDataA * a, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_radar(mglBase * graph, const mglDataA * a, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_radar(graph, a, pen, opt);

	return 0;
}

// void mgl_radar_(uintptr_t * gr, uintptr_t * a, const char * pen, const char * opt, int l, int lo)
static int _bind_mgl_radar_(lua_State *L) {
	if (!_lg_typecheck_mgl_radar_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_radar_(uintptr_t * gr, uintptr_t * a, const char * pen, const char * opt, int l, int lo) function, expected prototype:\nvoid mgl_radar_(uintptr_t * gr, uintptr_t * a, const char * pen, const char * opt, int l, int lo)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int l=(int)lua_tointeger(L,5);
	int lo=(int)lua_tointeger(L,6);

	mgl_radar_(gr, a, pen, opt, l, lo);

	return 0;
}

// void mgl_plot_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt)
static int _bind_mgl_plot_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_plot_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_plot_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_plot_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_plot_xyz(graph, x, y, z, pen, opt);

	return 0;
}

// void mgl_plot_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8)
static int _bind_mgl_plot_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_plot_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_plot_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_plot_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_plot_xyz_(graph, x, y, z, pen, opt, _arg7, _arg8);

	return 0;
}

// void mgl_plot_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt)
static int _bind_mgl_plot_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_plot_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_plot_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_plot_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_plot_xy(graph, x, y, pen, opt);

	return 0;
}

// void mgl_plot_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_plot_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_plot_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_plot_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_plot_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_plot_xy_(graph, x, y, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_plot(mglBase * graph, const mglDataA * y, const char * pen, const char * opt)
static int _bind_mgl_plot(lua_State *L) {
	if (!_lg_typecheck_mgl_plot(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_plot(mglBase * graph, const mglDataA * y, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_plot(mglBase * graph, const mglDataA * y, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_plot(graph, y, pen, opt);

	return 0;
}

// void mgl_plot_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6)
static int _bind_mgl_plot_(lua_State *L) {
	if (!_lg_typecheck_mgl_plot_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_plot_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_plot_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_plot_(graph, y, pen, opt, _arg5, _arg6);

	return 0;
}

// void mgl_tens_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * pen, const char * opt)
static int _bind_mgl_tens_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_tens_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tens_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_tens_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* c=(Luna< mglDataA >::check(L,5));
	const char * pen=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_tens_xyz(graph, x, y, z, c, pen, opt);

	return 0;
}

// void mgl_tens_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * pen, const char * opt, int arg8, int arg9)
static int _bind_mgl_tens_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_tens_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tens_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * pen, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_tens_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * pen, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* c=(Luna< uintptr_t >::check(L,5));
	const char * pen=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_tens_xyz_(graph, x, y, z, c, pen, opt, _arg8, _arg9);

	return 0;
}

// void mgl_tens_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * c, const char * pen, const char * opt)
static int _bind_mgl_tens_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_tens_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tens_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * c, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_tens_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * c, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* c=(Luna< mglDataA >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_tens_xy(graph, x, y, c, pen, opt);

	return 0;
}

// void mgl_tens_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * c, const char * pen, const char * opt, int arg7, int arg8)
static int _bind_mgl_tens_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_tens_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tens_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * c, const char * pen, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_tens_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * c, const char * pen, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* c=(Luna< uintptr_t >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_tens_xy_(graph, x, y, c, pen, opt, _arg7, _arg8);

	return 0;
}

// void mgl_tens(mglBase * graph, const mglDataA * y, const mglDataA * c, const char * pen, const char * opt)
static int _bind_mgl_tens(lua_State *L) {
	if (!_lg_typecheck_mgl_tens(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tens(mglBase * graph, const mglDataA * y, const mglDataA * c, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_tens(mglBase * graph, const mglDataA * y, const mglDataA * c, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const mglDataA* c=(Luna< mglDataA >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_tens(graph, y, c, pen, opt);

	return 0;
}

// void mgl_tens_(uintptr_t * graph, uintptr_t * y, uintptr_t * c, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_tens_(lua_State *L) {
	if (!_lg_typecheck_mgl_tens_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tens_(uintptr_t * graph, uintptr_t * y, uintptr_t * c, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_tens_(uintptr_t * graph, uintptr_t * y, uintptr_t * c, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	uintptr_t* c=(Luna< uintptr_t >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_tens_(graph, y, c, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_tape_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt)
static int _bind_mgl_tape_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_tape_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tape_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_tape_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_tape_xyz(graph, x, y, z, pen, opt);

	return 0;
}

// void mgl_tape_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8)
static int _bind_mgl_tape_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_tape_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tape_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_tape_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_tape_xyz_(graph, x, y, z, pen, opt, _arg7, _arg8);

	return 0;
}

// void mgl_tape_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt)
static int _bind_mgl_tape_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_tape_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tape_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_tape_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_tape_xy(graph, x, y, pen, opt);

	return 0;
}

// void mgl_tape_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_tape_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_tape_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tape_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_tape_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_tape_xy_(graph, x, y, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_tape(mglBase * graph, const mglDataA * y, const char * pen, const char * opt)
static int _bind_mgl_tape(lua_State *L) {
	if (!_lg_typecheck_mgl_tape(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tape(mglBase * graph, const mglDataA * y, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_tape(mglBase * graph, const mglDataA * y, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_tape(graph, y, pen, opt);

	return 0;
}

// void mgl_tape_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6)
static int _bind_mgl_tape_(lua_State *L) {
	if (!_lg_typecheck_mgl_tape_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tape_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_tape_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_tape_(graph, y, pen, opt, _arg5, _arg6);

	return 0;
}

// void mgl_boxplot_xy(mglBase * graph, const mglDataA * x, const mglDataA * a, const char * pen, const char * opt)
static int _bind_mgl_boxplot_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_boxplot_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_boxplot_xy(mglBase * graph, const mglDataA * x, const mglDataA * a, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_boxplot_xy(mglBase * graph, const mglDataA * x, const mglDataA * a, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_boxplot_xy(graph, x, a, pen, opt);

	return 0;
}

// void mgl_boxplot_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_boxplot_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_boxplot_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_boxplot_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_boxplot_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_boxplot_xy_(graph, x, y, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_boxplot(mglBase * graph, const mglDataA * a, const char * pen, const char * opt)
static int _bind_mgl_boxplot(lua_State *L) {
	if (!_lg_typecheck_mgl_boxplot(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_boxplot(mglBase * graph, const mglDataA * a, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_boxplot(mglBase * graph, const mglDataA * a, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_boxplot(graph, a, pen, opt);

	return 0;
}

// void mgl_boxplot_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6)
static int _bind_mgl_boxplot_(lua_State *L) {
	if (!_lg_typecheck_mgl_boxplot_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_boxplot_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_boxplot_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_boxplot_(graph, y, pen, opt, _arg5, _arg6);

	return 0;
}

// void mgl_area_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt)
static int _bind_mgl_area_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_area_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_area_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_area_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_area_xyz(graph, x, y, z, pen, opt);

	return 0;
}

// void mgl_area_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8)
static int _bind_mgl_area_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_area_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_area_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_area_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_area_xyz_(graph, x, y, z, pen, opt, _arg7, _arg8);

	return 0;
}

// void mgl_area_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt)
static int _bind_mgl_area_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_area_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_area_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_area_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_area_xy(graph, x, y, pen, opt);

	return 0;
}

// void mgl_area_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_area_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_area_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_area_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_area_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_area_xy_(graph, x, y, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_area(mglBase * graph, const mglDataA * y, const char * pen, const char * opt)
static int _bind_mgl_area(lua_State *L) {
	if (!_lg_typecheck_mgl_area(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_area(mglBase * graph, const mglDataA * y, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_area(mglBase * graph, const mglDataA * y, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_area(graph, y, pen, opt);

	return 0;
}

// void mgl_area_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6)
static int _bind_mgl_area_(lua_State *L) {
	if (!_lg_typecheck_mgl_area_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_area_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_area_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_area_(graph, y, pen, opt, _arg5, _arg6);

	return 0;
}

// void mgl_region_xy(mglBase * graph, const mglDataA * x, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt)
static int _bind_mgl_region_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_region_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_region_xy(mglBase * graph, const mglDataA * x, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_region_xy(mglBase * graph, const mglDataA * x, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y1=(Luna< mglDataA >::check(L,3));
	const mglDataA* y2=(Luna< mglDataA >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_region_xy(graph, x, y1, y2, pen, opt);

	return 0;
}

// void mgl_region_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg7, int arg8)
static int _bind_mgl_region_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_region_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_region_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_region_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y1=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y2=(Luna< uintptr_t >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_region_xy_(graph, x, y1, y2, pen, opt, _arg7, _arg8);

	return 0;
}

// void mgl_region(mglBase * graph, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt)
static int _bind_mgl_region(lua_State *L) {
	if (!_lg_typecheck_mgl_region(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_region(mglBase * graph, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_region(mglBase * graph, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y1=(Luna< mglDataA >::check(L,2));
	const mglDataA* y2=(Luna< mglDataA >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_region(graph, y1, y2, pen, opt);

	return 0;
}

// void mgl_region_(uintptr_t * graph, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_region_(lua_State *L) {
	if (!_lg_typecheck_mgl_region_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_region_(uintptr_t * graph, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_region_(uintptr_t * graph, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y1=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y2=(Luna< uintptr_t >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_region_(graph, y1, y2, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_stem_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt)
static int _bind_mgl_stem_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_stem_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_stem_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_stem_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_stem_xyz(graph, x, y, z, pen, opt);

	return 0;
}

// void mgl_stem_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8)
static int _bind_mgl_stem_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_stem_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_stem_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_stem_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_stem_xyz_(graph, x, y, z, pen, opt, _arg7, _arg8);

	return 0;
}

// void mgl_stem_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt)
static int _bind_mgl_stem_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_stem_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_stem_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_stem_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_stem_xy(graph, x, y, pen, opt);

	return 0;
}

// void mgl_stem_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_stem_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_stem_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_stem_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_stem_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_stem_xy_(graph, x, y, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_stem(mglBase * graph, const mglDataA * y, const char * pen, const char * opt)
static int _bind_mgl_stem(lua_State *L) {
	if (!_lg_typecheck_mgl_stem(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_stem(mglBase * graph, const mglDataA * y, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_stem(mglBase * graph, const mglDataA * y, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_stem(graph, y, pen, opt);

	return 0;
}

// void mgl_stem_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6)
static int _bind_mgl_stem_(lua_State *L) {
	if (!_lg_typecheck_mgl_stem_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_stem_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_stem_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_stem_(graph, y, pen, opt, _arg5, _arg6);

	return 0;
}

// void mgl_step_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt)
static int _bind_mgl_step_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_step_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_step_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_step_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_step_xyz(graph, x, y, z, pen, opt);

	return 0;
}

// void mgl_step_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8)
static int _bind_mgl_step_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_step_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_step_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_step_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_step_xyz_(graph, x, y, z, pen, opt, _arg7, _arg8);

	return 0;
}

// void mgl_step_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt)
static int _bind_mgl_step_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_step_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_step_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_step_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_step_xy(graph, x, y, pen, opt);

	return 0;
}

// void mgl_step_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_step_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_step_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_step_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_step_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_step_xy_(graph, x, y, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_step(mglBase * graph, const mglDataA * y, const char * pen, const char * opt)
static int _bind_mgl_step(lua_State *L) {
	if (!_lg_typecheck_mgl_step(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_step(mglBase * graph, const mglDataA * y, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_step(mglBase * graph, const mglDataA * y, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_step(graph, y, pen, opt);

	return 0;
}

// void mgl_step_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6)
static int _bind_mgl_step_(lua_State *L) {
	if (!_lg_typecheck_mgl_step_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_step_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_step_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_step_(graph, y, pen, opt, _arg5, _arg6);

	return 0;
}

// void mgl_bars_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt)
static int _bind_mgl_bars_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_bars_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_bars_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_bars_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_bars_xyz(graph, x, y, z, pen, opt);

	return 0;
}

// void mgl_bars_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8)
static int _bind_mgl_bars_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_bars_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_bars_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_bars_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_bars_xyz_(graph, x, y, z, pen, opt, _arg7, _arg8);

	return 0;
}

// void mgl_bars_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt)
static int _bind_mgl_bars_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_bars_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_bars_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_bars_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_bars_xy(graph, x, y, pen, opt);

	return 0;
}

// void mgl_bars_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_bars_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_bars_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_bars_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_bars_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_bars_xy_(graph, x, y, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_bars(mglBase * graph, const mglDataA * y, const char * pen, const char * opt)
static int _bind_mgl_bars(lua_State *L) {
	if (!_lg_typecheck_mgl_bars(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_bars(mglBase * graph, const mglDataA * y, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_bars(mglBase * graph, const mglDataA * y, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_bars(graph, y, pen, opt);

	return 0;
}

// void mgl_bars_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6)
static int _bind_mgl_bars_(lua_State *L) {
	if (!_lg_typecheck_mgl_bars_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_bars_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_bars_(uintptr_t * graph, uintptr_t * y, const char * pen, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_bars_(graph, y, pen, opt, _arg5, _arg6);

	return 0;
}

// void mgl_barh_yx(mglBase * graph, const mglDataA * y, const mglDataA * v, const char * pen, const char * opt)
static int _bind_mgl_barh_yx(lua_State *L) {
	if (!_lg_typecheck_mgl_barh_yx(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_barh_yx(mglBase * graph, const mglDataA * y, const mglDataA * v, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_barh_yx(mglBase * graph, const mglDataA * y, const mglDataA * v, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const mglDataA* v=(Luna< mglDataA >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_barh_yx(graph, y, v, pen, opt);

	return 0;
}

// void mgl_barh_yx_(uintptr_t * graph, uintptr_t * y, uintptr_t * v, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_barh_yx_(lua_State *L) {
	if (!_lg_typecheck_mgl_barh_yx_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_barh_yx_(uintptr_t * graph, uintptr_t * y, uintptr_t * v, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_barh_yx_(uintptr_t * graph, uintptr_t * y, uintptr_t * v, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	uintptr_t* v=(Luna< uintptr_t >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_barh_yx_(graph, y, v, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_barh(mglBase * graph, const mglDataA * v, const char * pen, const char * opt)
static int _bind_mgl_barh(lua_State *L) {
	if (!_lg_typecheck_mgl_barh(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_barh(mglBase * graph, const mglDataA * v, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_barh(mglBase * graph, const mglDataA * v, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_barh(graph, v, pen, opt);

	return 0;
}

// void mgl_barh_(uintptr_t * graph, uintptr_t * v, const char * pen, const char * opt, int arg5, int arg6)
static int _bind_mgl_barh_(lua_State *L) {
	if (!_lg_typecheck_mgl_barh_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_barh_(uintptr_t * graph, uintptr_t * v, const char * pen, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_barh_(uintptr_t * graph, uintptr_t * v, const char * pen, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v=(Luna< uintptr_t >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_barh_(graph, v, pen, opt, _arg5, _arg6);

	return 0;
}

// void mgl_chart(mglBase * graph, const mglDataA * a, const char * col, const char * opt)
static int _bind_mgl_chart(lua_State *L) {
	if (!_lg_typecheck_mgl_chart(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_chart(mglBase * graph, const mglDataA * a, const char * col, const char * opt) function, expected prototype:\nvoid mgl_chart(mglBase * graph, const mglDataA * a, const char * col, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * col=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_chart(graph, a, col, opt);

	return 0;
}

// void mgl_chart_(uintptr_t * graph, uintptr_t * a, const char * col, const char * opt, int arg5, int arg6)
static int _bind_mgl_chart_(lua_State *L) {
	if (!_lg_typecheck_mgl_chart_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_chart_(uintptr_t * graph, uintptr_t * a, const char * col, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_chart_(uintptr_t * graph, uintptr_t * a, const char * col, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * col=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_chart_(graph, a, col, opt, _arg5, _arg6);

	return 0;
}

// void mgl_error_exy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * ex, const mglDataA * ey, const char * pen, const char * opt)
static int _bind_mgl_error_exy(lua_State *L) {
	if (!_lg_typecheck_mgl_error_exy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_error_exy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * ex, const mglDataA * ey, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_error_exy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * ex, const mglDataA * ey, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* ex=(Luna< mglDataA >::check(L,4));
	const mglDataA* ey=(Luna< mglDataA >::check(L,5));
	const char * pen=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_error_exy(graph, x, y, ex, ey, pen, opt);

	return 0;
}

// void mgl_error_exy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * ex, uintptr_t * ey, const char * pen, const char * opt, int arg8, int arg9)
static int _bind_mgl_error_exy_(lua_State *L) {
	if (!_lg_typecheck_mgl_error_exy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_error_exy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * ex, uintptr_t * ey, const char * pen, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_error_exy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * ex, uintptr_t * ey, const char * pen, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* ex=(Luna< uintptr_t >::check(L,4));
	uintptr_t* ey=(Luna< uintptr_t >::check(L,5));
	const char * pen=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_error_exy_(graph, x, y, ex, ey, pen, opt, _arg8, _arg9);

	return 0;
}

// void mgl_error_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * ey, const char * pen, const char * opt)
static int _bind_mgl_error_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_error_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_error_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * ey, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_error_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * ey, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* ey=(Luna< mglDataA >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_error_xy(graph, x, y, ey, pen, opt);

	return 0;
}

// void mgl_error_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * ey, const char * pen, const char * opt, int arg7, int arg8)
static int _bind_mgl_error_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_error_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_error_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * ey, const char * pen, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_error_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * ey, const char * pen, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* ey=(Luna< uintptr_t >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_error_xy_(graph, x, y, ey, pen, opt, _arg7, _arg8);

	return 0;
}

// void mgl_error(mglBase * graph, const mglDataA * y, const mglDataA * ey, const char * pen, const char * opt)
static int _bind_mgl_error(lua_State *L) {
	if (!_lg_typecheck_mgl_error(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_error(mglBase * graph, const mglDataA * y, const mglDataA * ey, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_error(mglBase * graph, const mglDataA * y, const mglDataA * ey, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const mglDataA* ey=(Luna< mglDataA >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_error(graph, y, ey, pen, opt);

	return 0;
}

// void mgl_error_(uintptr_t * graph, uintptr_t * y, uintptr_t * ey, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_error_(lua_State *L) {
	if (!_lg_typecheck_mgl_error_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_error_(uintptr_t * graph, uintptr_t * y, uintptr_t * ey, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_error_(uintptr_t * graph, uintptr_t * y, uintptr_t * ey, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	uintptr_t* ey=(Luna< uintptr_t >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_error_(graph, y, ey, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_mark_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * pen, const char * opt)
static int _bind_mgl_mark_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_mark_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mark_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_mark_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* r=(Luna< mglDataA >::check(L,5));
	const char * pen=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_mark_xyz(graph, x, y, z, r, pen, opt);

	return 0;
}

// void mgl_mark_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * r, const char * pen, const char * opt, int arg8, int arg9)
static int _bind_mgl_mark_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_mark_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mark_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * r, const char * pen, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_mark_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * r, const char * pen, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* r=(Luna< uintptr_t >::check(L,5));
	const char * pen=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_mark_xyz_(graph, x, y, z, r, pen, opt, _arg8, _arg9);

	return 0;
}

// void mgl_mark_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * r, const char * pen, const char * opt)
static int _bind_mgl_mark_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_mark_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mark_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * r, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_mark_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * r, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* r=(Luna< mglDataA >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_mark_xy(graph, x, y, r, pen, opt);

	return 0;
}

// void mgl_mark_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * r, const char * pen, const char * opt, int arg7, int arg8)
static int _bind_mgl_mark_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_mark_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mark_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * r, const char * pen, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_mark_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * r, const char * pen, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* r=(Luna< uintptr_t >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_mark_xy_(graph, x, y, r, pen, opt, _arg7, _arg8);

	return 0;
}

// void mgl_mark_y(mglBase * graph, const mglDataA * y, const mglDataA * r, const char * pen, const char * opt)
static int _bind_mgl_mark_y(lua_State *L) {
	if (!_lg_typecheck_mgl_mark_y(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mark_y(mglBase * graph, const mglDataA * y, const mglDataA * r, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_mark_y(mglBase * graph, const mglDataA * y, const mglDataA * r, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const mglDataA* r=(Luna< mglDataA >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_mark_y(graph, y, r, pen, opt);

	return 0;
}

// void mgl_mark_y_(uintptr_t * graph, uintptr_t * y, uintptr_t * r, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_mark_y_(lua_State *L) {
	if (!_lg_typecheck_mgl_mark_y_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mark_y_(uintptr_t * graph, uintptr_t * y, uintptr_t * r, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_mark_y_(uintptr_t * graph, uintptr_t * y, uintptr_t * r, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	uintptr_t* r=(Luna< uintptr_t >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_mark_y_(graph, y, r, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_tube_xyzr(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * pen, const char * opt)
static int _bind_mgl_tube_xyzr(lua_State *L) {
	if (!_lg_typecheck_mgl_tube_xyzr(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tube_xyzr(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_tube_xyzr(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* r=(Luna< mglDataA >::check(L,5));
	const char * pen=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_tube_xyzr(graph, x, y, z, r, pen, opt);

	return 0;
}

// void mgl_tube_xyzr_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * r, const char * pen, const char * opt, int arg8, int arg9)
static int _bind_mgl_tube_xyzr_(lua_State *L) {
	if (!_lg_typecheck_mgl_tube_xyzr_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tube_xyzr_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * r, const char * pen, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_tube_xyzr_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * r, const char * pen, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* r=(Luna< uintptr_t >::check(L,5));
	const char * pen=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_tube_xyzr_(graph, x, y, z, r, pen, opt, _arg8, _arg9);

	return 0;
}

// void mgl_tube_xyr(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * r, const char * pen, const char * opt)
static int _bind_mgl_tube_xyr(lua_State *L) {
	if (!_lg_typecheck_mgl_tube_xyr(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tube_xyr(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * r, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_tube_xyr(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * r, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* r=(Luna< mglDataA >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_tube_xyr(graph, x, y, r, pen, opt);

	return 0;
}

// void mgl_tube_xyr_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * r, const char * pen, const char * opt, int arg7, int arg8)
static int _bind_mgl_tube_xyr_(lua_State *L) {
	if (!_lg_typecheck_mgl_tube_xyr_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tube_xyr_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * r, const char * pen, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_tube_xyr_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * r, const char * pen, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* r=(Luna< uintptr_t >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_tube_xyr_(graph, x, y, r, pen, opt, _arg7, _arg8);

	return 0;
}

// void mgl_tube_r(mglBase * graph, const mglDataA * y, const mglDataA * r, const char * pen, const char * opt)
static int _bind_mgl_tube_r(lua_State *L) {
	if (!_lg_typecheck_mgl_tube_r(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tube_r(mglBase * graph, const mglDataA * y, const mglDataA * r, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_tube_r(mglBase * graph, const mglDataA * y, const mglDataA * r, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const mglDataA* r=(Luna< mglDataA >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_tube_r(graph, y, r, pen, opt);

	return 0;
}

// void mgl_tube_r_(uintptr_t * graph, uintptr_t * y, uintptr_t * r, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_tube_r_(lua_State *L) {
	if (!_lg_typecheck_mgl_tube_r_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tube_r_(uintptr_t * graph, uintptr_t * y, uintptr_t * r, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_tube_r_(uintptr_t * graph, uintptr_t * y, uintptr_t * r, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	uintptr_t* r=(Luna< uintptr_t >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_tube_r_(graph, y, r, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_tube_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, double r, const char * pen, const char * opt)
static int _bind_mgl_tube_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_tube_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tube_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, double r, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_tube_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, double r, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	double r=(double)lua_tonumber(L,5);
	const char * pen=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_tube_xyz(graph, x, y, z, r, pen, opt);

	return 0;
}

// void mgl_tube_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, double * r, const char * pen, const char * opt, int arg8, int arg9)
static int _bind_mgl_tube_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_tube_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tube_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, double * r, const char * pen, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_tube_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, double * r, const char * pen, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	double r=(double)lua_tonumber(L,5);
	const char * pen=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_tube_xyz_(graph, x, y, z, &r, pen, opt, _arg8, _arg9);

	return 0;
}

// void mgl_tube_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, double r, const char * penl, const char * opt)
static int _bind_mgl_tube_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_tube_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tube_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, double r, const char * penl, const char * opt) function, expected prototype:\nvoid mgl_tube_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, double r, const char * penl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	double r=(double)lua_tonumber(L,4);
	const char * penl=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_tube_xy(graph, x, y, r, penl, opt);

	return 0;
}

// void mgl_tube_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, double * r, const char * pen, const char * opt, int arg7, int arg8)
static int _bind_mgl_tube_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_tube_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tube_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, double * r, const char * pen, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_tube_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, double * r, const char * pen, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	double r=(double)lua_tonumber(L,4);
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_tube_xy_(graph, x, y, &r, pen, opt, _arg7, _arg8);

	return 0;
}

// void mgl_tube(mglBase * graph, const mglDataA * y, double r, const char * pen, const char * opt)
static int _bind_mgl_tube(lua_State *L) {
	if (!_lg_typecheck_mgl_tube(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tube(mglBase * graph, const mglDataA * y, double r, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_tube(mglBase * graph, const mglDataA * y, double r, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	double r=(double)lua_tonumber(L,3);
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_tube(graph, y, r, pen, opt);

	return 0;
}

// void mgl_tube_(uintptr_t * graph, uintptr_t * y, double * r, const char * pen, const char * opt, int arg6, int arg7)
static int _bind_mgl_tube_(lua_State *L) {
	if (!_lg_typecheck_mgl_tube_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tube_(uintptr_t * graph, uintptr_t * y, double * r, const char * pen, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_tube_(uintptr_t * graph, uintptr_t * y, double * r, const char * pen, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	double r=(double)lua_tonumber(L,3);
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_tube_(graph, y, &r, pen, opt, _arg6, _arg7);

	return 0;
}

// void mgl_candle_xyv(mglBase * gr, const mglDataA * x, const mglDataA * v1, const mglDataA * v2, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt)
static int _bind_mgl_candle_xyv(lua_State *L) {
	if (!_lg_typecheck_mgl_candle_xyv(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_candle_xyv(mglBase * gr, const mglDataA * x, const mglDataA * v1, const mglDataA * v2, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_candle_xyv(mglBase * gr, const mglDataA * x, const mglDataA * v1, const mglDataA * v2, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* v1=(Luna< mglDataA >::check(L,3));
	const mglDataA* v2=(Luna< mglDataA >::check(L,4));
	const mglDataA* y1=(Luna< mglDataA >::check(L,5));
	const mglDataA* y2=(Luna< mglDataA >::check(L,6));
	const char * pen=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_candle_xyv(gr, x, v1, v2, y1, y2, pen, opt);

	return 0;
}

// void mgl_candle_xyv_(uintptr_t * gr, uintptr_t * x, uintptr_t * v1, uintptr_t * v2, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg9, int arg10)
static int _bind_mgl_candle_xyv_(lua_State *L) {
	if (!_lg_typecheck_mgl_candle_xyv_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_candle_xyv_(uintptr_t * gr, uintptr_t * x, uintptr_t * v1, uintptr_t * v2, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_candle_xyv_(uintptr_t * gr, uintptr_t * x, uintptr_t * v1, uintptr_t * v2, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* v1=(Luna< uintptr_t >::check(L,3));
	uintptr_t* v2=(Luna< uintptr_t >::check(L,4));
	uintptr_t* y1=(Luna< uintptr_t >::check(L,5));
	uintptr_t* y2=(Luna< uintptr_t >::check(L,6));
	const char * pen=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_candle_xyv_(gr, x, v1, v2, y1, y2, pen, opt, _arg9, _arg10);

	return 0;
}

// void mgl_candle_yv(mglBase * gr, const mglDataA * v1, const mglDataA * v2, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt)
static int _bind_mgl_candle_yv(lua_State *L) {
	if (!_lg_typecheck_mgl_candle_yv(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_candle_yv(mglBase * gr, const mglDataA * v1, const mglDataA * v2, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_candle_yv(mglBase * gr, const mglDataA * v1, const mglDataA * v2, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v1=(Luna< mglDataA >::check(L,2));
	const mglDataA* v2=(Luna< mglDataA >::check(L,3));
	const mglDataA* y1=(Luna< mglDataA >::check(L,4));
	const mglDataA* y2=(Luna< mglDataA >::check(L,5));
	const char * pen=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_candle_yv(gr, v1, v2, y1, y2, pen, opt);

	return 0;
}

// void mgl_candle_yv_(uintptr_t * gr, uintptr_t * v1, uintptr_t * v2, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg8, int arg9)
static int _bind_mgl_candle_yv_(lua_State *L) {
	if (!_lg_typecheck_mgl_candle_yv_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_candle_yv_(uintptr_t * gr, uintptr_t * v1, uintptr_t * v2, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_candle_yv_(uintptr_t * gr, uintptr_t * v1, uintptr_t * v2, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* v1=(Luna< uintptr_t >::check(L,2));
	uintptr_t* v2=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y1=(Luna< uintptr_t >::check(L,4));
	uintptr_t* y2=(Luna< uintptr_t >::check(L,5));
	const char * pen=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_candle_yv_(gr, v1, v2, y1, y2, pen, opt, _arg8, _arg9);

	return 0;
}

// void mgl_candle(mglBase * gr, const mglDataA * v, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt)
static int _bind_mgl_candle(lua_State *L) {
	if (!_lg_typecheck_mgl_candle(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_candle(mglBase * gr, const mglDataA * v, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_candle(mglBase * gr, const mglDataA * v, const mglDataA * y1, const mglDataA * y2, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* v=(Luna< mglDataA >::check(L,2));
	const mglDataA* y1=(Luna< mglDataA >::check(L,3));
	const mglDataA* y2=(Luna< mglDataA >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_candle(gr, v, y1, y2, pen, opt);

	return 0;
}

// void mgl_candle_(uintptr_t * gr, uintptr_t * y, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg7, int arg8)
static int _bind_mgl_candle_(lua_State *L) {
	if (!_lg_typecheck_mgl_candle_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_candle_(uintptr_t * gr, uintptr_t * y, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_candle_(uintptr_t * gr, uintptr_t * y, uintptr_t * y1, uintptr_t * y2, const char * pen, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y1=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y2=(Luna< uintptr_t >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_candle_(gr, y, y1, y2, pen, opt, _arg7, _arg8);

	return 0;
}

// void mgl_mark(mglBase * gr, double x, double y, double z, const char * mark)
static int _bind_mgl_mark(lua_State *L) {
	if (!_lg_typecheck_mgl_mark(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mark(mglBase * gr, double x, double y, double z, const char * mark) function, expected prototype:\nvoid mgl_mark(mglBase * gr, double x, double y, double z, const char * mark)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	const char * mark=(const char *)lua_tostring(L,5);

	mgl_mark(gr, x, y, z, mark);

	return 0;
}

// void mgl_mark_(uintptr_t * gr, double * x, double * y, double * z, const char * mark, int arg6)
static int _bind_mgl_mark_(lua_State *L) {
	if (!_lg_typecheck_mgl_mark_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mark_(uintptr_t * gr, double * x, double * y, double * z, const char * mark, int arg6) function, expected prototype:\nvoid mgl_mark_(uintptr_t * gr, double * x, double * y, double * z, const char * mark, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	const char * mark=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_mark_(gr, &x, &y, &z, mark, _arg6);

	return 0;
}

// void mgl_ball(mglBase * gr, double x, double y, double z)
static int _bind_mgl_ball(lua_State *L) {
	if (!_lg_typecheck_mgl_ball(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_ball(mglBase * gr, double x, double y, double z) function, expected prototype:\nvoid mgl_ball(mglBase * gr, double x, double y, double z)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	mgl_ball(gr, x, y, z);

	return 0;
}

// void mgl_ball_(uintptr_t * gr, double * x, double * y, double * z)
static int _bind_mgl_ball_(lua_State *L) {
	if (!_lg_typecheck_mgl_ball_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_ball_(uintptr_t * gr, double * x, double * y, double * z) function, expected prototype:\nvoid mgl_ball_(uintptr_t * gr, double * x, double * y, double * z)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);

	mgl_ball_(gr, &x, &y, &z);

	return 0;
}

// void mgl_line(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2, const char * pen, int n)
static int _bind_mgl_line(lua_State *L) {
	if (!_lg_typecheck_mgl_line(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_line(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2, const char * pen, int n) function, expected prototype:\nvoid mgl_line(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2, const char * pen, int n)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double x2=(double)lua_tonumber(L,5);
	double y2=(double)lua_tonumber(L,6);
	double z2=(double)lua_tonumber(L,7);
	const char * pen=(const char *)lua_tostring(L,8);
	int n=(int)lua_tointeger(L,9);

	mgl_line(gr, x1, y1, z1, x2, y2, z2, pen, n);

	return 0;
}

// void mgl_line_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, const char * pen, int * n, int arg10)
static int _bind_mgl_line_(lua_State *L) {
	if (!_lg_typecheck_mgl_line_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_line_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, const char * pen, int * n, int arg10) function, expected prototype:\nvoid mgl_line_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, const char * pen, int * n, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double x2=(double)lua_tonumber(L,5);
	double y2=(double)lua_tonumber(L,6);
	double z2=(double)lua_tonumber(L,7);
	const char * pen=(const char *)lua_tostring(L,8);
	int n=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_line_(gr, &x1, &y1, &z1, &x2, &y2, &z2, pen, &n, _arg10);

	return 0;
}

// void mgl_curve(mglBase * gr, double x1, double y1, double z1, double dx1, double dy1, double dz1, double x2, double y2, double z2, double dx2, double dy2, double dz2, const char * pen, int n)
static int _bind_mgl_curve(lua_State *L) {
	if (!_lg_typecheck_mgl_curve(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_curve(mglBase * gr, double x1, double y1, double z1, double dx1, double dy1, double dz1, double x2, double y2, double z2, double dx2, double dy2, double dz2, const char * pen, int n) function, expected prototype:\nvoid mgl_curve(mglBase * gr, double x1, double y1, double z1, double dx1, double dy1, double dz1, double x2, double y2, double z2, double dx2, double dy2, double dz2, const char * pen, int n)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double dx1=(double)lua_tonumber(L,5);
	double dy1=(double)lua_tonumber(L,6);
	double dz1=(double)lua_tonumber(L,7);
	double x2=(double)lua_tonumber(L,8);
	double y2=(double)lua_tonumber(L,9);
	double z2=(double)lua_tonumber(L,10);
	double dx2=(double)lua_tonumber(L,11);
	double dy2=(double)lua_tonumber(L,12);
	double dz2=(double)lua_tonumber(L,13);
	const char * pen=(const char *)lua_tostring(L,14);
	int n=(int)lua_tointeger(L,15);

	mgl_curve(gr, x1, y1, z1, dx1, dy1, dz1, x2, y2, z2, dx2, dy2, dz2, pen, n);

	return 0;
}

// void mgl_curve_(uintptr_t * gr, double * x1, double * y1, double * z1, double * dx1, double * dy1, double * dz1, double * x2, double * y2, double * z2, double * dx2, double * dy2, double * dz2, const char * pen, int * n, int l)
static int _bind_mgl_curve_(lua_State *L) {
	if (!_lg_typecheck_mgl_curve_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_curve_(uintptr_t * gr, double * x1, double * y1, double * z1, double * dx1, double * dy1, double * dz1, double * x2, double * y2, double * z2, double * dx2, double * dy2, double * dz2, const char * pen, int * n, int l) function, expected prototype:\nvoid mgl_curve_(uintptr_t * gr, double * x1, double * y1, double * z1, double * dx1, double * dy1, double * dz1, double * x2, double * y2, double * z2, double * dx2, double * dy2, double * dz2, const char * pen, int * n, int l)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double dx1=(double)lua_tonumber(L,5);
	double dy1=(double)lua_tonumber(L,6);
	double dz1=(double)lua_tonumber(L,7);
	double x2=(double)lua_tonumber(L,8);
	double y2=(double)lua_tonumber(L,9);
	double z2=(double)lua_tonumber(L,10);
	double dx2=(double)lua_tonumber(L,11);
	double dy2=(double)lua_tonumber(L,12);
	double dz2=(double)lua_tonumber(L,13);
	const char * pen=(const char *)lua_tostring(L,14);
	int n=(int)lua_tointeger(L,15);
	int l=(int)lua_tointeger(L,16);

	mgl_curve_(gr, &x1, &y1, &z1, &dx1, &dy1, &dz1, &x2, &y2, &z2, &dx2, &dy2, &dz2, pen, &n, l);

	return 0;
}

// void mgl_error_box(mglBase * gr, double x, double y, double z, double ex, double ey, double ez, const char * pen)
static int _bind_mgl_error_box(lua_State *L) {
	if (!_lg_typecheck_mgl_error_box(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_error_box(mglBase * gr, double x, double y, double z, double ex, double ey, double ez, const char * pen) function, expected prototype:\nvoid mgl_error_box(mglBase * gr, double x, double y, double z, double ex, double ey, double ez, const char * pen)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	double ex=(double)lua_tonumber(L,5);
	double ey=(double)lua_tonumber(L,6);
	double ez=(double)lua_tonumber(L,7);
	const char * pen=(const char *)lua_tostring(L,8);

	mgl_error_box(gr, x, y, z, ex, ey, ez, pen);

	return 0;
}

// void mgl_error_box_(uintptr_t * gr, double * x, double * y, double * z, double * ex, double * ey, double * ez, const char * pen, int arg9)
static int _bind_mgl_error_box_(lua_State *L) {
	if (!_lg_typecheck_mgl_error_box_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_error_box_(uintptr_t * gr, double * x, double * y, double * z, double * ex, double * ey, double * ez, const char * pen, int arg9) function, expected prototype:\nvoid mgl_error_box_(uintptr_t * gr, double * x, double * y, double * z, double * ex, double * ey, double * ez, const char * pen, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	double ex=(double)lua_tonumber(L,5);
	double ey=(double)lua_tonumber(L,6);
	double ez=(double)lua_tonumber(L,7);
	const char * pen=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_error_box_(gr, &x, &y, &z, &ex, &ey, &ez, pen, _arg9);

	return 0;
}

// void mgl_face(mglBase * gr, double x0, double y0, double z0, double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, const char * stl)
static int _bind_mgl_face(lua_State *L) {
	if (!_lg_typecheck_mgl_face(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_face(mglBase * gr, double x0, double y0, double z0, double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, const char * stl) function, expected prototype:\nvoid mgl_face(mglBase * gr, double x0, double y0, double z0, double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, const char * stl)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	double x1=(double)lua_tonumber(L,5);
	double y1=(double)lua_tonumber(L,6);
	double z1=(double)lua_tonumber(L,7);
	double x2=(double)lua_tonumber(L,8);
	double y2=(double)lua_tonumber(L,9);
	double z2=(double)lua_tonumber(L,10);
	double x3=(double)lua_tonumber(L,11);
	double y3=(double)lua_tonumber(L,12);
	double z3=(double)lua_tonumber(L,13);
	const char * stl=(const char *)lua_tostring(L,14);

	mgl_face(gr, x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3, stl);

	return 0;
}

// void mgl_face_(uintptr_t * gr, double * x0, double * y0, double * z0, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * x3, double * y3, double * z3, const char * stl, int arg15)
static int _bind_mgl_face_(lua_State *L) {
	if (!_lg_typecheck_mgl_face_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_face_(uintptr_t * gr, double * x0, double * y0, double * z0, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * x3, double * y3, double * z3, const char * stl, int arg15) function, expected prototype:\nvoid mgl_face_(uintptr_t * gr, double * x0, double * y0, double * z0, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * x3, double * y3, double * z3, const char * stl, int arg15)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	double x1=(double)lua_tonumber(L,5);
	double y1=(double)lua_tonumber(L,6);
	double z1=(double)lua_tonumber(L,7);
	double x2=(double)lua_tonumber(L,8);
	double y2=(double)lua_tonumber(L,9);
	double z2=(double)lua_tonumber(L,10);
	double x3=(double)lua_tonumber(L,11);
	double y3=(double)lua_tonumber(L,12);
	double z3=(double)lua_tonumber(L,13);
	const char * stl=(const char *)lua_tostring(L,14);
	int _arg15=(int)lua_tointeger(L,15);

	mgl_face_(gr, &x0, &y0, &z0, &x1, &y1, &z1, &x2, &y2, &z2, &x3, &y3, &z3, stl, _arg15);

	return 0;
}

// void mgl_facex(mglBase * gr, double x0, double y0, double z0, double wy, double wz, const char * stl, double dx, double dy)
static int _bind_mgl_facex(lua_State *L) {
	if (!_lg_typecheck_mgl_facex(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_facex(mglBase * gr, double x0, double y0, double z0, double wy, double wz, const char * stl, double dx, double dy) function, expected prototype:\nvoid mgl_facex(mglBase * gr, double x0, double y0, double z0, double wy, double wz, const char * stl, double dx, double dy)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	double wy=(double)lua_tonumber(L,5);
	double wz=(double)lua_tonumber(L,6);
	const char * stl=(const char *)lua_tostring(L,7);
	double dx=(double)lua_tonumber(L,8);
	double dy=(double)lua_tonumber(L,9);

	mgl_facex(gr, x0, y0, z0, wy, wz, stl, dx, dy);

	return 0;
}

// void mgl_facex_(uintptr_t * gr, double * x0, double * y0, double * z0, double * wy, double * wz, const char * stl, double * dx, double * dy, int l)
static int _bind_mgl_facex_(lua_State *L) {
	if (!_lg_typecheck_mgl_facex_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_facex_(uintptr_t * gr, double * x0, double * y0, double * z0, double * wy, double * wz, const char * stl, double * dx, double * dy, int l) function, expected prototype:\nvoid mgl_facex_(uintptr_t * gr, double * x0, double * y0, double * z0, double * wy, double * wz, const char * stl, double * dx, double * dy, int l)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	double wy=(double)lua_tonumber(L,5);
	double wz=(double)lua_tonumber(L,6);
	const char * stl=(const char *)lua_tostring(L,7);
	double dx=(double)lua_tonumber(L,8);
	double dy=(double)lua_tonumber(L,9);
	int l=(int)lua_tointeger(L,10);

	mgl_facex_(gr, &x0, &y0, &z0, &wy, &wz, stl, &dx, &dy, l);

	return 0;
}

// void mgl_facey(mglBase * gr, double x0, double y0, double z0, double wx, double wz, const char * stl, double dx, double dy)
static int _bind_mgl_facey(lua_State *L) {
	if (!_lg_typecheck_mgl_facey(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_facey(mglBase * gr, double x0, double y0, double z0, double wx, double wz, const char * stl, double dx, double dy) function, expected prototype:\nvoid mgl_facey(mglBase * gr, double x0, double y0, double z0, double wx, double wz, const char * stl, double dx, double dy)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	double wx=(double)lua_tonumber(L,5);
	double wz=(double)lua_tonumber(L,6);
	const char * stl=(const char *)lua_tostring(L,7);
	double dx=(double)lua_tonumber(L,8);
	double dy=(double)lua_tonumber(L,9);

	mgl_facey(gr, x0, y0, z0, wx, wz, stl, dx, dy);

	return 0;
}

// void mgl_facey_(uintptr_t * gr, double * x0, double * y0, double * z0, double * wx, double * wz, const char * stl, double * dx, double * dy, int l)
static int _bind_mgl_facey_(lua_State *L) {
	if (!_lg_typecheck_mgl_facey_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_facey_(uintptr_t * gr, double * x0, double * y0, double * z0, double * wx, double * wz, const char * stl, double * dx, double * dy, int l) function, expected prototype:\nvoid mgl_facey_(uintptr_t * gr, double * x0, double * y0, double * z0, double * wx, double * wz, const char * stl, double * dx, double * dy, int l)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	double wx=(double)lua_tonumber(L,5);
	double wz=(double)lua_tonumber(L,6);
	const char * stl=(const char *)lua_tostring(L,7);
	double dx=(double)lua_tonumber(L,8);
	double dy=(double)lua_tonumber(L,9);
	int l=(int)lua_tointeger(L,10);

	mgl_facey_(gr, &x0, &y0, &z0, &wx, &wz, stl, &dx, &dy, l);

	return 0;
}

// void mgl_facez(mglBase * gr, double x0, double y0, double z0, double wx, double wy, const char * stl, double dx, double dy)
static int _bind_mgl_facez(lua_State *L) {
	if (!_lg_typecheck_mgl_facez(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_facez(mglBase * gr, double x0, double y0, double z0, double wx, double wy, const char * stl, double dx, double dy) function, expected prototype:\nvoid mgl_facez(mglBase * gr, double x0, double y0, double z0, double wx, double wy, const char * stl, double dx, double dy)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	double wx=(double)lua_tonumber(L,5);
	double wy=(double)lua_tonumber(L,6);
	const char * stl=(const char *)lua_tostring(L,7);
	double dx=(double)lua_tonumber(L,8);
	double dy=(double)lua_tonumber(L,9);

	mgl_facez(gr, x0, y0, z0, wx, wy, stl, dx, dy);

	return 0;
}

// void mgl_facez_(uintptr_t * gr, double * x0, double * y0, double * z0, double * wx, double * wy, const char * stl, double * dx, double * dy, int l)
static int _bind_mgl_facez_(lua_State *L) {
	if (!_lg_typecheck_mgl_facez_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_facez_(uintptr_t * gr, double * x0, double * y0, double * z0, double * wx, double * wy, const char * stl, double * dx, double * dy, int l) function, expected prototype:\nvoid mgl_facez_(uintptr_t * gr, double * x0, double * y0, double * z0, double * wx, double * wy, const char * stl, double * dx, double * dy, int l)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	double wx=(double)lua_tonumber(L,5);
	double wy=(double)lua_tonumber(L,6);
	const char * stl=(const char *)lua_tostring(L,7);
	double dx=(double)lua_tonumber(L,8);
	double dy=(double)lua_tonumber(L,9);
	int l=(int)lua_tointeger(L,10);

	mgl_facez_(gr, &x0, &y0, &z0, &wx, &wy, stl, &dx, &dy, l);

	return 0;
}

// void mgl_sphere(mglBase * gr, double x, double y, double z, double r, const char * stl)
static int _bind_mgl_sphere(lua_State *L) {
	if (!_lg_typecheck_mgl_sphere(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_sphere(mglBase * gr, double x, double y, double z, double r, const char * stl) function, expected prototype:\nvoid mgl_sphere(mglBase * gr, double x, double y, double z, double r, const char * stl)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	double r=(double)lua_tonumber(L,5);
	const char * stl=(const char *)lua_tostring(L,6);

	mgl_sphere(gr, x, y, z, r, stl);

	return 0;
}

// void mgl_sphere_(uintptr_t * gr, double * x, double * y, double * z, double * r, const char * stl, int arg7)
static int _bind_mgl_sphere_(lua_State *L) {
	if (!_lg_typecheck_mgl_sphere_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_sphere_(uintptr_t * gr, double * x, double * y, double * z, double * r, const char * stl, int arg7) function, expected prototype:\nvoid mgl_sphere_(uintptr_t * gr, double * x, double * y, double * z, double * r, const char * stl, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	double r=(double)lua_tonumber(L,5);
	const char * stl=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_sphere_(gr, &x, &y, &z, &r, stl, _arg7);

	return 0;
}

// void mgl_drop(mglBase * gr, double x, double y, double z, double dx, double dy, double dz, double r, const char * stl, double shift, double ap)
static int _bind_mgl_drop(lua_State *L) {
	if (!_lg_typecheck_mgl_drop(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_drop(mglBase * gr, double x, double y, double z, double dx, double dy, double dz, double r, const char * stl, double shift, double ap) function, expected prototype:\nvoid mgl_drop(mglBase * gr, double x, double y, double z, double dx, double dy, double dz, double r, const char * stl, double shift, double ap)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	double dx=(double)lua_tonumber(L,5);
	double dy=(double)lua_tonumber(L,6);
	double dz=(double)lua_tonumber(L,7);
	double r=(double)lua_tonumber(L,8);
	const char * stl=(const char *)lua_tostring(L,9);
	double shift=(double)lua_tonumber(L,10);
	double ap=(double)lua_tonumber(L,11);

	mgl_drop(gr, x, y, z, dx, dy, dz, r, stl, shift, ap);

	return 0;
}

// void mgl_drop_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * r, const char * stl, double * shift, double * ap, int arg12)
static int _bind_mgl_drop_(lua_State *L) {
	if (!_lg_typecheck_mgl_drop_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_drop_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * r, const char * stl, double * shift, double * ap, int arg12) function, expected prototype:\nvoid mgl_drop_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * r, const char * stl, double * shift, double * ap, int arg12)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double x2=(double)lua_tonumber(L,5);
	double y2=(double)lua_tonumber(L,6);
	double z2=(double)lua_tonumber(L,7);
	double r=(double)lua_tonumber(L,8);
	const char * stl=(const char *)lua_tostring(L,9);
	double shift=(double)lua_tonumber(L,10);
	double ap=(double)lua_tonumber(L,11);
	int _arg12=(int)lua_tointeger(L,12);

	mgl_drop_(gr, &x1, &y1, &z1, &x2, &y2, &z2, &r, stl, &shift, &ap, _arg12);

	return 0;
}

// void mgl_cone(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2, double r1, double r2, const char * stl)
static int _bind_mgl_cone(lua_State *L) {
	if (!_lg_typecheck_mgl_cone(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cone(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2, double r1, double r2, const char * stl) function, expected prototype:\nvoid mgl_cone(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2, double r1, double r2, const char * stl)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double x2=(double)lua_tonumber(L,5);
	double y2=(double)lua_tonumber(L,6);
	double z2=(double)lua_tonumber(L,7);
	double r1=(double)lua_tonumber(L,8);
	double r2=(double)lua_tonumber(L,9);
	const char * stl=(const char *)lua_tostring(L,10);

	mgl_cone(gr, x1, y1, z1, x2, y2, z2, r1, r2, stl);

	return 0;
}

// void mgl_cone_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * r1, double * r2, const char * stl, int arg11)
static int _bind_mgl_cone_(lua_State *L) {
	if (!_lg_typecheck_mgl_cone_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cone_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * r1, double * r2, const char * stl, int arg11) function, expected prototype:\nvoid mgl_cone_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * r1, double * r2, const char * stl, int arg11)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double x2=(double)lua_tonumber(L,5);
	double y2=(double)lua_tonumber(L,6);
	double z2=(double)lua_tonumber(L,7);
	double r1=(double)lua_tonumber(L,8);
	double r2=(double)lua_tonumber(L,9);
	const char * stl=(const char *)lua_tostring(L,10);
	int _arg11=(int)lua_tointeger(L,11);

	mgl_cone_(gr, &x1, &y1, &z1, &x2, &y2, &z2, &r1, &r2, stl, _arg11);

	return 0;
}

// void mgl_ellipse(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2, double r, const char * stl)
static int _bind_mgl_ellipse(lua_State *L) {
	if (!_lg_typecheck_mgl_ellipse(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_ellipse(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2, double r, const char * stl) function, expected prototype:\nvoid mgl_ellipse(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2, double r, const char * stl)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double x2=(double)lua_tonumber(L,5);
	double y2=(double)lua_tonumber(L,6);
	double z2=(double)lua_tonumber(L,7);
	double r=(double)lua_tonumber(L,8);
	const char * stl=(const char *)lua_tostring(L,9);

	mgl_ellipse(gr, x1, y1, z1, x2, y2, z2, r, stl);

	return 0;
}

// void mgl_ellipse_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * r, const char * stl, int arg10)
static int _bind_mgl_ellipse_(lua_State *L) {
	if (!_lg_typecheck_mgl_ellipse_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_ellipse_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * r, const char * stl, int arg10) function, expected prototype:\nvoid mgl_ellipse_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * r, const char * stl, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double x2=(double)lua_tonumber(L,5);
	double y2=(double)lua_tonumber(L,6);
	double z2=(double)lua_tonumber(L,7);
	double r=(double)lua_tonumber(L,8);
	const char * stl=(const char *)lua_tostring(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_ellipse_(gr, &x1, &y1, &z1, &x2, &y2, &z2, &r, stl, _arg10);

	return 0;
}

// void mgl_rhomb(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2, double r, const char * stl)
static int _bind_mgl_rhomb(lua_State *L) {
	if (!_lg_typecheck_mgl_rhomb(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_rhomb(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2, double r, const char * stl) function, expected prototype:\nvoid mgl_rhomb(mglBase * gr, double x1, double y1, double z1, double x2, double y2, double z2, double r, const char * stl)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double x2=(double)lua_tonumber(L,5);
	double y2=(double)lua_tonumber(L,6);
	double z2=(double)lua_tonumber(L,7);
	double r=(double)lua_tonumber(L,8);
	const char * stl=(const char *)lua_tostring(L,9);

	mgl_rhomb(gr, x1, y1, z1, x2, y2, z2, r, stl);

	return 0;
}

// void mgl_rhomb_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * r, const char * stl, int arg10)
static int _bind_mgl_rhomb_(lua_State *L) {
	if (!_lg_typecheck_mgl_rhomb_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_rhomb_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * r, const char * stl, int arg10) function, expected prototype:\nvoid mgl_rhomb_(uintptr_t * gr, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2, double * r, const char * stl, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x1=(double)lua_tonumber(L,2);
	double y1=(double)lua_tonumber(L,3);
	double z1=(double)lua_tonumber(L,4);
	double x2=(double)lua_tonumber(L,5);
	double y2=(double)lua_tonumber(L,6);
	double z2=(double)lua_tonumber(L,7);
	double r=(double)lua_tonumber(L,8);
	const char * stl=(const char *)lua_tostring(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_rhomb_(gr, &x1, &y1, &z1, &x2, &y2, &z2, &r, stl, _arg10);

	return 0;
}

// void mgl_cones_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt)
static int _bind_mgl_cones_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_cones_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cones_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_cones_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_cones_xyz(graph, x, y, z, pen, opt);

	return 0;
}

// void mgl_cones_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8)
static int _bind_mgl_cones_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_cones_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cones_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_cones_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * pen, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * pen=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_cones_xyz_(graph, x, y, z, pen, opt, _arg7, _arg8);

	return 0;
}

// void mgl_cones_xz(mglBase * graph, const mglDataA * x, const mglDataA * z, const char * pen, const char * opt)
static int _bind_mgl_cones_xz(lua_State *L) {
	if (!_lg_typecheck_mgl_cones_xz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cones_xz(mglBase * graph, const mglDataA * x, const mglDataA * z, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_cones_xz(mglBase * graph, const mglDataA * x, const mglDataA * z, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* z=(Luna< mglDataA >::check(L,3));
	const char * pen=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_cones_xz(graph, x, z, pen, opt);

	return 0;
}

// void mgl_cones(mglBase * graph, const mglDataA * z, const char * pen, const char * opt)
static int _bind_mgl_cones(lua_State *L) {
	if (!_lg_typecheck_mgl_cones(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cones(mglBase * graph, const mglDataA * z, const char * pen, const char * opt) function, expected prototype:\nvoid mgl_cones(mglBase * graph, const mglDataA * z, const char * pen, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_cones(graph, z, pen, opt);

	return 0;
}

// void mgl_cones_(uintptr_t * graph, uintptr_t * z, const char * pen, const char * opt, int arg5, int arg6)
static int _bind_mgl_cones_(lua_State *L) {
	if (!_lg_typecheck_mgl_cones_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cones_(uintptr_t * graph, uintptr_t * z, const char * pen, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_cones_(uintptr_t * graph, uintptr_t * z, const char * pen, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	const char * pen=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_cones_(graph, z, pen, opt, _arg5, _arg6);

	return 0;
}

// void mgl_dew_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)
static int _bind_mgl_dew_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_dew_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dew_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_dew_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* ax=(Luna< mglDataA >::check(L,4));
	const mglDataA* ay=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_dew_xy(gr, x, y, ax, ay, sch, opt);

	return 0;
}

// void mgl_dew_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_dew_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_dew_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dew_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_dew_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,4));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_dew_xy_(gr, x, y, ax, ay, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_dew_2d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * optl)
static int _bind_mgl_dew_2d(lua_State *L) {
	if (!_lg_typecheck_mgl_dew_2d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dew_2d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * optl) function, expected prototype:\nvoid mgl_dew_2d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * optl)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* ax=(Luna< mglDataA >::check(L,2));
	const mglDataA* ay=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * optl=(const char *)lua_tostring(L,5);

	mgl_dew_2d(gr, ax, ay, sch, optl);

	return 0;
}

// void mgl_dew_2d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg6, int l)
static int _bind_mgl_dew_2d_(lua_State *L) {
	if (!_lg_typecheck_mgl_dew_2d_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dew_2d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg6, int l) function, expected prototype:\nvoid mgl_dew_2d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg6, int l)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,2));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int l=(int)lua_tointeger(L,7);

	mgl_dew_2d_(gr, ax, ay, sch, opt, _arg6, l);

	return 0;
}

// void mgl_puts(mglBase * graph, double x, double y, double z, const char * text, const char * font, double size)
static int _bind_mgl_puts(lua_State *L) {
	if (!_lg_typecheck_mgl_puts(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_puts(mglBase * graph, double x, double y, double z, const char * text, const char * font, double size) function, expected prototype:\nvoid mgl_puts(mglBase * graph, double x, double y, double z, const char * text, const char * font, double size)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	const char * text=(const char *)lua_tostring(L,5);
	const char * font=(const char *)lua_tostring(L,6);
	double size=(double)lua_tonumber(L,7);

	mgl_puts(graph, x, y, z, text, font, size);

	return 0;
}

// void mgl_puts_(uintptr_t * graph, double * x, double * y, double * z, const char * text, const char * font, double * size, int arg8, int arg9)
static int _bind_mgl_puts_(lua_State *L) {
	if (!_lg_typecheck_mgl_puts_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_puts_(uintptr_t * graph, double * x, double * y, double * z, const char * text, const char * font, double * size, int arg8, int arg9) function, expected prototype:\nvoid mgl_puts_(uintptr_t * graph, double * x, double * y, double * z, const char * text, const char * font, double * size, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	const char * text=(const char *)lua_tostring(L,5);
	const char * font=(const char *)lua_tostring(L,6);
	double size=(double)lua_tonumber(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_puts_(graph, &x, &y, &z, text, font, &size, _arg8, _arg9);

	return 0;
}

// void mgl_puts_dir(mglBase * graph, double x, double y, double z, double dx, double dy, double dz, const char * text, const char * font, double size)
static int _bind_mgl_puts_dir(lua_State *L) {
	if (!_lg_typecheck_mgl_puts_dir(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_puts_dir(mglBase * graph, double x, double y, double z, double dx, double dy, double dz, const char * text, const char * font, double size) function, expected prototype:\nvoid mgl_puts_dir(mglBase * graph, double x, double y, double z, double dx, double dy, double dz, const char * text, const char * font, double size)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	double dx=(double)lua_tonumber(L,5);
	double dy=(double)lua_tonumber(L,6);
	double dz=(double)lua_tonumber(L,7);
	const char * text=(const char *)lua_tostring(L,8);
	const char * font=(const char *)lua_tostring(L,9);
	double size=(double)lua_tonumber(L,10);

	mgl_puts_dir(graph, x, y, z, dx, dy, dz, text, font, size);

	return 0;
}

// void mgl_puts_dir_(uintptr_t * graph, double * x, double * y, double * z, double * dx, double * dy, double * dz, const char * text, const char * font, double * size, int arg11, int arg12)
static int _bind_mgl_puts_dir_(lua_State *L) {
	if (!_lg_typecheck_mgl_puts_dir_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_puts_dir_(uintptr_t * graph, double * x, double * y, double * z, double * dx, double * dy, double * dz, const char * text, const char * font, double * size, int arg11, int arg12) function, expected prototype:\nvoid mgl_puts_dir_(uintptr_t * graph, double * x, double * y, double * z, double * dx, double * dy, double * dz, const char * text, const char * font, double * size, int arg11, int arg12)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	double z=(double)lua_tonumber(L,4);
	double dx=(double)lua_tonumber(L,5);
	double dy=(double)lua_tonumber(L,6);
	double dz=(double)lua_tonumber(L,7);
	const char * text=(const char *)lua_tostring(L,8);
	const char * font=(const char *)lua_tostring(L,9);
	double size=(double)lua_tonumber(L,10);
	int _arg11=(int)lua_tointeger(L,11);
	int _arg12=(int)lua_tointeger(L,12);

	mgl_puts_dir_(graph, &x, &y, &z, &dx, &dy, &dz, text, font, &size, _arg11, _arg12);

	return 0;
}

// void mgl_textmark_xyzr(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * text, const char * fnt, const char * opt)
static int _bind_mgl_textmark_xyzr(lua_State *L) {
	if (!_lg_typecheck_mgl_textmark_xyzr(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_textmark_xyzr(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * text, const char * fnt, const char * opt) function, expected prototype:\nvoid mgl_textmark_xyzr(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * text, const char * fnt, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* r=(Luna< mglDataA >::check(L,5));
	const char * text=(const char *)lua_tostring(L,6);
	const char * fnt=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_textmark_xyzr(graph, x, y, z, r, text, fnt, opt);

	return 0;
}

// void mgl_textmark_xyzr_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * r, const char * text, const char * fnt, const char * opt, int arg9, int arg10, int arg11)
static int _bind_mgl_textmark_xyzr_(lua_State *L) {
	if (!_lg_typecheck_mgl_textmark_xyzr_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_textmark_xyzr_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * r, const char * text, const char * fnt, const char * opt, int arg9, int arg10, int arg11) function, expected prototype:\nvoid mgl_textmark_xyzr_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * r, const char * text, const char * fnt, const char * opt, int arg9, int arg10, int arg11)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* r=(Luna< uintptr_t >::check(L,5));
	const char * text=(const char *)lua_tostring(L,6);
	const char * fnt=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);
	int _arg11=(int)lua_tointeger(L,11);

	mgl_textmark_xyzr_(graph, x, y, z, r, text, fnt, opt, _arg9, _arg10, _arg11);

	return 0;
}

// void mgl_textmark_xyr(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * r, const char * text, const char * fnt, const char * opt)
static int _bind_mgl_textmark_xyr(lua_State *L) {
	if (!_lg_typecheck_mgl_textmark_xyr(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_textmark_xyr(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * r, const char * text, const char * fnt, const char * opt) function, expected prototype:\nvoid mgl_textmark_xyr(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * r, const char * text, const char * fnt, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* r=(Luna< mglDataA >::check(L,4));
	const char * text=(const char *)lua_tostring(L,5);
	const char * fnt=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_textmark_xyr(graph, x, y, r, text, fnt, opt);

	return 0;
}

// void mgl_textmark_xyr_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * r, const char * text, const char * fnt, const char * opt, int arg8, int arg9, int arg10)
static int _bind_mgl_textmark_xyr_(lua_State *L) {
	if (!_lg_typecheck_mgl_textmark_xyr_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_textmark_xyr_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * r, const char * text, const char * fnt, const char * opt, int arg8, int arg9, int arg10) function, expected prototype:\nvoid mgl_textmark_xyr_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * r, const char * text, const char * fnt, const char * opt, int arg8, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* r=(Luna< uintptr_t >::check(L,4));
	const char * text=(const char *)lua_tostring(L,5);
	const char * fnt=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_textmark_xyr_(graph, x, y, r, text, fnt, opt, _arg8, _arg9, _arg10);

	return 0;
}

// void mgl_textmark_yr(mglBase * graph, const mglDataA * y, const mglDataA * r, const char * text, const char * fnt, const char * opt)
static int _bind_mgl_textmark_yr(lua_State *L) {
	if (!_lg_typecheck_mgl_textmark_yr(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_textmark_yr(mglBase * graph, const mglDataA * y, const mglDataA * r, const char * text, const char * fnt, const char * opt) function, expected prototype:\nvoid mgl_textmark_yr(mglBase * graph, const mglDataA * y, const mglDataA * r, const char * text, const char * fnt, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const mglDataA* r=(Luna< mglDataA >::check(L,3));
	const char * text=(const char *)lua_tostring(L,4);
	const char * fnt=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_textmark_yr(graph, y, r, text, fnt, opt);

	return 0;
}

// void mgl_textmark_yr_(uintptr_t * graph, uintptr_t * y, uintptr_t * r, const char * text, const char * fnt, const char * opt, int arg7, int arg8, int arg9)
static int _bind_mgl_textmark_yr_(lua_State *L) {
	if (!_lg_typecheck_mgl_textmark_yr_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_textmark_yr_(uintptr_t * graph, uintptr_t * y, uintptr_t * r, const char * text, const char * fnt, const char * opt, int arg7, int arg8, int arg9) function, expected prototype:\nvoid mgl_textmark_yr_(uintptr_t * graph, uintptr_t * y, uintptr_t * r, const char * text, const char * fnt, const char * opt, int arg7, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	uintptr_t* r=(Luna< uintptr_t >::check(L,3));
	const char * text=(const char *)lua_tostring(L,4);
	const char * fnt=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_textmark_yr_(graph, y, r, text, fnt, opt, _arg7, _arg8, _arg9);

	return 0;
}

// void mgl_textmark(mglBase * graph, const mglDataA * y, const char * text, const char * fnt, const char * opt)
static int _bind_mgl_textmark(lua_State *L) {
	if (!_lg_typecheck_mgl_textmark(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_textmark(mglBase * graph, const mglDataA * y, const char * text, const char * fnt, const char * opt) function, expected prototype:\nvoid mgl_textmark(mglBase * graph, const mglDataA * y, const char * text, const char * fnt, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* y=(Luna< mglDataA >::check(L,2));
	const char * text=(const char *)lua_tostring(L,3);
	const char * fnt=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_textmark(graph, y, text, fnt, opt);

	return 0;
}

// void mgl_textmark_(uintptr_t * graph, uintptr_t * y, const char * text, const char * fnt, const char * opt, int arg6, int arg7, int arg8)
static int _bind_mgl_textmark_(lua_State *L) {
	if (!_lg_typecheck_mgl_textmark_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_textmark_(uintptr_t * graph, uintptr_t * y, const char * text, const char * fnt, const char * opt, int arg6, int arg7, int arg8) function, expected prototype:\nvoid mgl_textmark_(uintptr_t * graph, uintptr_t * y, const char * text, const char * fnt, const char * opt, int arg6, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* y=(Luna< uintptr_t >::check(L,2));
	const char * text=(const char *)lua_tostring(L,3);
	const char * fnt=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_textmark_(graph, y, text, fnt, opt, _arg6, _arg7, _arg8);

	return 0;
}

// void mgl_table(mglBase * gr, double x, double y, const mglDataA * val, const char * text, const char * fnt, const char * opt)
static int _bind_mgl_table(lua_State *L) {
	if (!_lg_typecheck_mgl_table(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_table(mglBase * gr, double x, double y, const mglDataA * val, const char * text, const char * fnt, const char * opt) function, expected prototype:\nvoid mgl_table(mglBase * gr, double x, double y, const mglDataA * val, const char * text, const char * fnt, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	const mglDataA* val=(Luna< mglDataA >::check(L,4));
	const char * text=(const char *)lua_tostring(L,5);
	const char * fnt=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_table(gr, x, y, val, text, fnt, opt);

	return 0;
}

// void mgl_table_(uintptr_t * gr, double * x, double * y, uintptr_t * val, const char * text, const char * fnt, const char * opt, int arg8, int arg9, int arg10)
static int _bind_mgl_table_(lua_State *L) {
	if (!_lg_typecheck_mgl_table_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_table_(uintptr_t * gr, double * x, double * y, uintptr_t * val, const char * text, const char * fnt, const char * opt, int arg8, int arg9, int arg10) function, expected prototype:\nvoid mgl_table_(uintptr_t * gr, double * x, double * y, uintptr_t * val, const char * text, const char * fnt, const char * opt, int arg8, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x=(double)lua_tonumber(L,2);
	double y=(double)lua_tonumber(L,3);
	uintptr_t* val=(Luna< uintptr_t >::check(L,4));
	const char * text=(const char *)lua_tostring(L,5);
	const char * fnt=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_table_(gr, &x, &y, val, text, fnt, opt, _arg8, _arg9, _arg10);

	return 0;
}

// void mgl_fsurf(mglBase * graph, const char * fz, const char * stl, const char * opt)
static int _bind_mgl_fsurf(lua_State *L) {
	if (!_lg_typecheck_mgl_fsurf(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_fsurf(mglBase * graph, const char * fz, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_fsurf(mglBase * graph, const char * fz, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const char * fz=(const char *)lua_tostring(L,2);
	const char * stl=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_fsurf(graph, fz, stl, opt);

	return 0;
}

// void mgl_fsurf_(uintptr_t * graph, const char * fz, const char * stl, const char * opt, int arg5, int arg6, int arg7)
static int _bind_mgl_fsurf_(lua_State *L) {
	if (!_lg_typecheck_mgl_fsurf_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_fsurf_(uintptr_t * graph, const char * fz, const char * stl, const char * opt, int arg5, int arg6, int arg7) function, expected prototype:\nvoid mgl_fsurf_(uintptr_t * graph, const char * fz, const char * stl, const char * opt, int arg5, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	const char * fz=(const char *)lua_tostring(L,2);
	const char * stl=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_fsurf_(graph, fz, stl, opt, _arg5, _arg6, _arg7);

	return 0;
}

// void mgl_fsurf_xyz(mglBase * graph, const char * fx, const char * fy, const char * fz, const char * stl, const char * opt)
static int _bind_mgl_fsurf_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_fsurf_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_fsurf_xyz(mglBase * graph, const char * fx, const char * fy, const char * fz, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_fsurf_xyz(mglBase * graph, const char * fx, const char * fy, const char * fz, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const char * fx=(const char *)lua_tostring(L,2);
	const char * fy=(const char *)lua_tostring(L,3);
	const char * fz=(const char *)lua_tostring(L,4);
	const char * stl=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_fsurf_xyz(graph, fx, fy, fz, stl, opt);

	return 0;
}

// void mgl_fsurf_xyz_(uintptr_t * graph, const char * fx, const char * fy, const char * fz, const char * stl, const char * opt, int arg7, int arg8, int arg9, int arg10, int arg11)
static int _bind_mgl_fsurf_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_fsurf_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_fsurf_xyz_(uintptr_t * graph, const char * fx, const char * fy, const char * fz, const char * stl, const char * opt, int arg7, int arg8, int arg9, int arg10, int arg11) function, expected prototype:\nvoid mgl_fsurf_xyz_(uintptr_t * graph, const char * fx, const char * fy, const char * fz, const char * stl, const char * opt, int arg7, int arg8, int arg9, int arg10, int arg11)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	const char * fx=(const char *)lua_tostring(L,2);
	const char * fy=(const char *)lua_tostring(L,3);
	const char * fz=(const char *)lua_tostring(L,4);
	const char * stl=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);
	int _arg11=(int)lua_tointeger(L,11);

	mgl_fsurf_xyz_(graph, fx, fy, fz, stl, opt, _arg7, _arg8, _arg9, _arg10, _arg11);

	return 0;
}

// void mgl_grid_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * stl, const char * opt)
static int _bind_mgl_grid_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_grid_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_grid_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_grid_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * stl=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_grid_xy(graph, x, y, z, stl, opt);

	return 0;
}

// void mgl_grid_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * stl, const char * opt, int arg7, int arg8)
static int _bind_mgl_grid_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_grid_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_grid_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * stl, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_grid_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * stl, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * stl=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_grid_xy_(graph, x, y, z, stl, opt, _arg7, _arg8);

	return 0;
}

// void mgl_grid(mglBase * graph, const mglDataA * a, const char * stl, const char * opt)
static int _bind_mgl_grid(lua_State *L) {
	if (!_lg_typecheck_mgl_grid(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_grid(mglBase * graph, const mglDataA * a, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_grid(mglBase * graph, const mglDataA * a, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_grid(graph, a, stl, opt);

	return 0;
}

// void mgl_grid_(uintptr_t * graph, uintptr_t * a, const char * stl, const char * opt, int arg5, int arg6)
static int _bind_mgl_grid_(lua_State *L) {
	if (!_lg_typecheck_mgl_grid_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_grid_(uintptr_t * graph, uintptr_t * a, const char * stl, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_grid_(uintptr_t * graph, uintptr_t * a, const char * stl, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_grid_(graph, a, stl, opt, _arg5, _arg6);

	return 0;
}

// void mgl_mesh_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_mesh_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_mesh_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mesh_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_mesh_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_mesh_xy(graph, x, y, z, sch, opt);

	return 0;
}

// void mgl_mesh_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_mesh_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_mesh_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mesh_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_mesh_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_mesh_xy_(graph, x, y, z, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_mesh(mglBase * graph, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_mesh(lua_State *L) {
	if (!_lg_typecheck_mgl_mesh(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mesh(mglBase * graph, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_mesh(mglBase * graph, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_mesh(graph, z, sch, opt);

	return 0;
}

// void mgl_mesh_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)
static int _bind_mgl_mesh_(lua_State *L) {
	if (!_lg_typecheck_mgl_mesh_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_mesh_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_mesh_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_mesh_(graph, z, sch, opt, _arg5, _arg6);

	return 0;
}

// void mgl_fall_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_fall_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_fall_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_fall_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_fall_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_fall_xy(graph, x, y, z, sch, opt);

	return 0;
}

// void mgl_fall_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_fall_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_fall_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_fall_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_fall_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_fall_xy_(graph, x, y, z, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_fall(mglBase * graph, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_fall(lua_State *L) {
	if (!_lg_typecheck_mgl_fall(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_fall(mglBase * graph, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_fall(mglBase * graph, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_fall(graph, z, sch, opt);

	return 0;
}

// void mgl_fall_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)
static int _bind_mgl_fall_(lua_State *L) {
	if (!_lg_typecheck_mgl_fall_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_fall_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_fall_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_fall_(graph, z, sch, opt, _arg5, _arg6);

	return 0;
}

// void mgl_belt_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_belt_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_belt_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_belt_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_belt_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_belt_xy(graph, x, y, z, sch, opt);

	return 0;
}

// void mgl_belt_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_belt_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_belt_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_belt_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_belt_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_belt_xy_(graph, x, y, z, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_belt(mglBase * graph, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_belt(lua_State *L) {
	if (!_lg_typecheck_mgl_belt(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_belt(mglBase * graph, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_belt(mglBase * graph, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_belt(graph, z, sch, opt);

	return 0;
}

// void mgl_belt_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)
static int _bind_mgl_belt_(lua_State *L) {
	if (!_lg_typecheck_mgl_belt_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_belt_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_belt_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_belt_(graph, z, sch, opt, _arg5, _arg6);

	return 0;
}

// void mgl_surf_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_surf_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_surf_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_surf_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_surf_xy(graph, x, y, z, sch, opt);

	return 0;
}

// void mgl_surf_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_surf_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_surf_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_surf_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_surf_xy_(graph, x, y, z, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_surf(mglBase * graph, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_surf(lua_State *L) {
	if (!_lg_typecheck_mgl_surf(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf(mglBase * graph, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_surf(mglBase * graph, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_surf(graph, z, sch, opt);

	return 0;
}

// void mgl_surf_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)
static int _bind_mgl_surf_(lua_State *L) {
	if (!_lg_typecheck_mgl_surf_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_surf_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_surf_(graph, z, sch, opt, _arg5, _arg6);

	return 0;
}

// void mgl_dens_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_dens_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_dens_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dens_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_dens_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_dens_xy(graph, x, y, z, sch, opt);

	return 0;
}

// void mgl_dens_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_dens_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_dens_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dens_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_dens_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_dens_xy_(graph, x, y, z, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_dens(mglBase * graph, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_dens(lua_State *L) {
	if (!_lg_typecheck_mgl_dens(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dens(mglBase * graph, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_dens(mglBase * graph, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_dens(graph, z, sch, opt);

	return 0;
}

// void mgl_dens_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)
static int _bind_mgl_dens_(lua_State *L) {
	if (!_lg_typecheck_mgl_dens_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_dens_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_dens_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_dens_(graph, z, sch, opt, _arg5, _arg6);

	return 0;
}

// void mgl_boxs_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_boxs_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_boxs_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_boxs_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_boxs_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_boxs_xy(graph, x, y, z, sch, opt);

	return 0;
}

// void mgl_boxs_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_boxs_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_boxs_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_boxs_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_boxs_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_boxs_xy_(graph, x, y, z, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_boxs(mglBase * graph, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_boxs(lua_State *L) {
	if (!_lg_typecheck_mgl_boxs(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_boxs(mglBase * graph, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_boxs(mglBase * graph, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_boxs(graph, z, sch, opt);

	return 0;
}

// void mgl_boxs_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)
static int _bind_mgl_boxs_(lua_State *L) {
	if (!_lg_typecheck_mgl_boxs_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_boxs_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_boxs_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_boxs_(graph, z, sch, opt, _arg5, _arg6);

	return 0;
}

// void mgl_tile_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_tile_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_tile_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tile_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_tile_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_tile_xy(graph, x, y, z, sch, opt);

	return 0;
}

// void mgl_tile_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * a, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_tile_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_tile_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tile_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * a, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_tile_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * a, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* a=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_tile_xy_(gr, x, y, a, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_tile(mglBase * graph, const mglDataA * z, const char * sch, const char * opt)
static int _bind_mgl_tile(lua_State *L) {
	if (!_lg_typecheck_mgl_tile(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tile(mglBase * graph, const mglDataA * z, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_tile(mglBase * graph, const mglDataA * z, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_tile(graph, z, sch, opt);

	return 0;
}

// void mgl_tile_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)
static int _bind_mgl_tile_(lua_State *L) {
	if (!_lg_typecheck_mgl_tile_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tile_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_tile_(uintptr_t * graph, uintptr_t * z, const char * sch, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_tile_(graph, z, sch, opt, _arg5, _arg6);

	return 0;
}

// void mgl_tiles_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * sch, const char * opt)
static int _bind_mgl_tiles_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_tiles_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tiles_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_tiles_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * r, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* r=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_tiles_xy(graph, x, y, z, r, sch, opt);

	return 0;
}

// void mgl_tiles_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_tiles_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_tiles_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tiles_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_tiles_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* c=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_tiles_xy_(graph, x, y, z, c, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_tiles(mglBase * graph, const mglDataA * z, const mglDataA * r, const char * sch, const char * opt)
static int _bind_mgl_tiles(lua_State *L) {
	if (!_lg_typecheck_mgl_tiles(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tiles(mglBase * graph, const mglDataA * z, const mglDataA * r, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_tiles(mglBase * graph, const mglDataA * z, const mglDataA * r, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const mglDataA* r=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_tiles(graph, z, r, sch, opt);

	return 0;
}

// void mgl_tiles_(uintptr_t * graph, uintptr_t * z, uintptr_t * r, const char * sch, const char * opt, int arg6, int arg7)
static int _bind_mgl_tiles_(lua_State *L) {
	if (!_lg_typecheck_mgl_tiles_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_tiles_(uintptr_t * graph, uintptr_t * z, uintptr_t * r, const char * sch, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_tiles_(uintptr_t * graph, uintptr_t * z, uintptr_t * r, const char * sch, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	uintptr_t* r=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_tiles_(graph, z, r, sch, opt, _arg6, _arg7);

	return 0;
}

// void mgl_surfc_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)
static int _bind_mgl_surfc_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_surfc_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surfc_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_surfc_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* c=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_surfc_xy(graph, x, y, z, c, sch, opt);

	return 0;
}

// void mgl_surfc_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_surfc_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_surfc_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surfc_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_surfc_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* c=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_surfc_xy_(graph, x, y, z, c, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_surfc(mglBase * graph, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)
static int _bind_mgl_surfc(lua_State *L) {
	if (!_lg_typecheck_mgl_surfc(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surfc(mglBase * graph, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_surfc(mglBase * graph, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const mglDataA* c=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_surfc(graph, z, c, sch, opt);

	return 0;
}

// void mgl_surfc_(uintptr_t * graph, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg6, int arg7)
static int _bind_mgl_surfc_(lua_State *L) {
	if (!_lg_typecheck_mgl_surfc_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surfc_(uintptr_t * graph, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_surfc_(uintptr_t * graph, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	uintptr_t* c=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_surfc_(graph, z, c, sch, opt, _arg6, _arg7);

	return 0;
}

// void mgl_surfa_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)
static int _bind_mgl_surfa_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_surfa_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surfa_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_surfa_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* c=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_surfa_xy(graph, x, y, z, c, sch, opt);

	return 0;
}

// void mgl_surfa_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_surfa_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_surfa_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surfa_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_surfa_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* c=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_surfa_xy_(graph, x, y, z, c, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_surfa(mglBase * graph, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)
static int _bind_mgl_surfa(lua_State *L) {
	if (!_lg_typecheck_mgl_surfa(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surfa(mglBase * graph, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_surfa(mglBase * graph, const mglDataA * z, const mglDataA * c, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* z=(Luna< mglDataA >::check(L,2));
	const mglDataA* c=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_surfa(graph, z, c, sch, opt);

	return 0;
}

// void mgl_surfa_(uintptr_t * graph, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg6, int arg7)
static int _bind_mgl_surfa_(lua_State *L) {
	if (!_lg_typecheck_mgl_surfa_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surfa_(uintptr_t * graph, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_surfa_(uintptr_t * graph, uintptr_t * z, uintptr_t * c, const char * sch, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* z=(Luna< uintptr_t >::check(L,2));
	uintptr_t* c=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_surfa_(graph, z, c, sch, opt, _arg6, _arg7);

	return 0;
}

// void mgl_stfa_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * re, const mglDataA * im, int dn, const char * sch, const char * opt)
static int _bind_mgl_stfa_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_stfa_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_stfa_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * re, const mglDataA * im, int dn, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_stfa_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * re, const mglDataA * im, int dn, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* re=(Luna< mglDataA >::check(L,4));
	const mglDataA* im=(Luna< mglDataA >::check(L,5));
	int dn=(int)lua_tointeger(L,6);
	const char * sch=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_stfa_xy(graph, x, y, re, im, dn, sch, opt);

	return 0;
}

// void mgl_stfa_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * re, uintptr_t * im, int * dn, const char * sch, const char * opt, int arg9, int arg10)
static int _bind_mgl_stfa_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_stfa_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_stfa_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * re, uintptr_t * im, int * dn, const char * sch, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_stfa_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * re, uintptr_t * im, int * dn, const char * sch, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* re=(Luna< uintptr_t >::check(L,4));
	uintptr_t* im=(Luna< uintptr_t >::check(L,5));
	int dn=(int)lua_tointeger(L,6);
	const char * sch=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_stfa_xy_(graph, x, y, re, im, &dn, sch, opt, _arg9, _arg10);

	return 0;
}

// void mgl_stfa(mglBase * graph, const mglDataA * re, const mglDataA * im, int dn, const char * sch, const char * opt)
static int _bind_mgl_stfa(lua_State *L) {
	if (!_lg_typecheck_mgl_stfa(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_stfa(mglBase * graph, const mglDataA * re, const mglDataA * im, int dn, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_stfa(mglBase * graph, const mglDataA * re, const mglDataA * im, int dn, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* re=(Luna< mglDataA >::check(L,2));
	const mglDataA* im=(Luna< mglDataA >::check(L,3));
	int dn=(int)lua_tointeger(L,4);
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_stfa(graph, re, im, dn, sch, opt);

	return 0;
}

// void mgl_stfa_(uintptr_t * graph, uintptr_t * re, uintptr_t * im, int * dn, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_stfa_(lua_State *L) {
	if (!_lg_typecheck_mgl_stfa_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_stfa_(uintptr_t * graph, uintptr_t * re, uintptr_t * im, int * dn, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_stfa_(uintptr_t * graph, uintptr_t * re, uintptr_t * im, int * dn, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* re=(Luna< uintptr_t >::check(L,2));
	uintptr_t* im=(Luna< uintptr_t >::check(L,3));
	int dn=(int)lua_tointeger(L,4);
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_stfa_(graph, re, im, &dn, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_map_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * a, const mglDataA * b, const char * sch, const char * opt)
static int _bind_mgl_map_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_map_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_map_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * a, const mglDataA * b, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_map_xy(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * a, const mglDataA * b, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* a=(Luna< mglDataA >::check(L,4));
	const mglDataA* b=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_map_xy(graph, x, y, a, b, sch, opt);

	return 0;
}

// void mgl_map_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * a, uintptr_t * b, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_map_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_map_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_map_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * a, uintptr_t * b, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_map_xy_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * a, uintptr_t * b, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* a=(Luna< uintptr_t >::check(L,4));
	uintptr_t* b=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_map_xy_(graph, x, y, a, b, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_map(mglBase * graph, const mglDataA * a, const mglDataA * b, const char * sch, const char * opt)
static int _bind_mgl_map(lua_State *L) {
	if (!_lg_typecheck_mgl_map(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_map(mglBase * graph, const mglDataA * a, const mglDataA * b, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_map(mglBase * graph, const mglDataA * a, const mglDataA * b, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const mglDataA* b=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_map(graph, a, b, sch, opt);

	return 0;
}

// void mgl_map_(uintptr_t * graph, uintptr_t * a, uintptr_t * b, const char * sch, const char * opt, int arg6, int arg7)
static int _bind_mgl_map_(lua_State *L) {
	if (!_lg_typecheck_mgl_map_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_map_(uintptr_t * graph, uintptr_t * a, uintptr_t * b, const char * sch, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_map_(uintptr_t * graph, uintptr_t * a, uintptr_t * b, const char * sch, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	uintptr_t* b=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_map_(graph, a, b, sch, opt, _arg6, _arg7);

	return 0;
}

// double mgl_norm(const mglPoint & p)
static int _bind_mgl_norm(lua_State *L) {
	if (!_lg_typecheck_mgl_norm(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in double mgl_norm(const mglPoint & p) function, expected prototype:\ndouble mgl_norm(const mglPoint & p)\nClass arguments details:\narg 1 ID = 56902440\n");
	}

	const mglPoint* p_ptr=(Luna< mglPoint >::check(L,1));
	if( !p_ptr ) {
		luaL_error(L, "Dereferencing NULL pointer for arg p in mgl_norm function");
	}
	const mglPoint & p=*p_ptr;

	double lret = mgl_norm(p);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_traj_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)
static int _bind_mgl_traj_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_traj_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_traj_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_traj_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* ax=(Luna< mglDataA >::check(L,4));
	const mglDataA* ay=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_traj_xy(gr, x, y, ax, ay, sch, opt);

	return 0;
}

// void mgl_traj_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_traj_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_traj_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_traj_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_traj_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,4));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_traj_xy_(gr, x, y, ax, ay, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_traj_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt)
static int _bind_mgl_traj_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_traj_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_traj_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_traj_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 7 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* ax=(Luna< mglDataA >::check(L,5));
	const mglDataA* ay=(Luna< mglDataA >::check(L,6));
	const mglDataA* az=(Luna< mglDataA >::check(L,7));
	const char * sch=(const char *)lua_tostring(L,8);
	const char * opt=(const char *)lua_tostring(L,9);

	mgl_traj_xyz(gr, x, y, z, ax, ay, az, sch, opt);

	return 0;
}

// void mgl_traj_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg10, int arg11)
static int _bind_mgl_traj_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_traj_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_traj_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg10, int arg11) function, expected prototype:\nvoid mgl_traj_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg10, int arg11)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,5));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,6));
	uintptr_t* az=(Luna< uintptr_t >::check(L,7));
	const char * sch=(const char *)lua_tostring(L,8);
	const char * opt=(const char *)lua_tostring(L,9);
	int _arg10=(int)lua_tointeger(L,10);
	int _arg11=(int)lua_tointeger(L,11);

	mgl_traj_xyz_(gr, x, y, z, ax, ay, az, sch, opt, _arg10, _arg11);

	return 0;
}

// void mgl_vect_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)
static int _bind_mgl_vect_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_vect_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_vect_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_vect_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* ax=(Luna< mglDataA >::check(L,4));
	const mglDataA* ay=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_vect_xy(gr, x, y, ax, ay, sch, opt);

	return 0;
}

// void mgl_vect_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_vect_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_vect_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_vect_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_vect_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,4));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_vect_xy_(gr, x, y, ax, ay, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_vect_2d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)
static int _bind_mgl_vect_2d(lua_State *L) {
	if (!_lg_typecheck_mgl_vect_2d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_vect_2d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_vect_2d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* ax=(Luna< mglDataA >::check(L,2));
	const mglDataA* ay=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_vect_2d(gr, ax, ay, sch, opt);

	return 0;
}

// void mgl_vect_2d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg6, int arg7)
static int _bind_mgl_vect_2d_(lua_State *L) {
	if (!_lg_typecheck_mgl_vect_2d_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_vect_2d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_vect_2d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,2));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_vect_2d_(gr, ax, ay, sch, opt, _arg6, _arg7);

	return 0;
}

// void mgl_vect_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt)
static int _bind_mgl_vect_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_vect_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_vect_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_vect_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 7 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* ax=(Luna< mglDataA >::check(L,5));
	const mglDataA* ay=(Luna< mglDataA >::check(L,6));
	const mglDataA* az=(Luna< mglDataA >::check(L,7));
	const char * sch=(const char *)lua_tostring(L,8);
	const char * opt=(const char *)lua_tostring(L,9);

	mgl_vect_xyz(gr, x, y, z, ax, ay, az, sch, opt);

	return 0;
}

// void mgl_vect_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg10, int arg11)
static int _bind_mgl_vect_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_vect_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_vect_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg10, int arg11) function, expected prototype:\nvoid mgl_vect_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg10, int arg11)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,5));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,6));
	uintptr_t* az=(Luna< uintptr_t >::check(L,7));
	const char * sch=(const char *)lua_tostring(L,8);
	const char * opt=(const char *)lua_tostring(L,9);
	int _arg10=(int)lua_tointeger(L,10);
	int _arg11=(int)lua_tointeger(L,11);

	mgl_vect_xyz_(gr, x, y, z, ax, ay, az, sch, opt, _arg10, _arg11);

	return 0;
}

// void mgl_vect_3d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt)
static int _bind_mgl_vect_3d(lua_State *L) {
	if (!_lg_typecheck_mgl_vect_3d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_vect_3d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_vect_3d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* ax=(Luna< mglDataA >::check(L,2));
	const mglDataA* ay=(Luna< mglDataA >::check(L,3));
	const mglDataA* az=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_vect_3d(gr, ax, ay, az, sch, opt);

	return 0;
}

// void mgl_vect_3d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_vect_3d_(lua_State *L) {
	if (!_lg_typecheck_mgl_vect_3d_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_vect_3d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_vect_3d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,2));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,3));
	uintptr_t* az=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_vect_3d_(gr, ax, ay, az, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_flow_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)
static int _bind_mgl_flow_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_flow_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flow_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_flow_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* ax=(Luna< mglDataA >::check(L,4));
	const mglDataA* ay=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_flow_xy(gr, x, y, ax, ay, sch, opt);

	return 0;
}

// void mgl_flow_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_flow_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_flow_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flow_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_flow_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,4));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_flow_xy_(gr, x, y, ax, ay, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_flow_2d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)
static int _bind_mgl_flow_2d(lua_State *L) {
	if (!_lg_typecheck_mgl_flow_2d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flow_2d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_flow_2d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* ax=(Luna< mglDataA >::check(L,2));
	const mglDataA* ay=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_flow_2d(gr, ax, ay, sch, opt);

	return 0;
}

// void mgl_flow_2d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg6, int arg7)
static int _bind_mgl_flow_2d_(lua_State *L) {
	if (!_lg_typecheck_mgl_flow_2d_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flow_2d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_flow_2d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,2));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_flow_2d_(gr, ax, ay, sch, opt, _arg6, _arg7);

	return 0;
}

// void mgl_flow_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt)
static int _bind_mgl_flow_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_flow_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flow_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_flow_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 7 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* ax=(Luna< mglDataA >::check(L,5));
	const mglDataA* ay=(Luna< mglDataA >::check(L,6));
	const mglDataA* az=(Luna< mglDataA >::check(L,7));
	const char * sch=(const char *)lua_tostring(L,8);
	const char * opt=(const char *)lua_tostring(L,9);

	mgl_flow_xyz(gr, x, y, z, ax, ay, az, sch, opt);

	return 0;
}

// void mgl_flow_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg10, int arg11)
static int _bind_mgl_flow_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_flow_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flow_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg10, int arg11) function, expected prototype:\nvoid mgl_flow_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg10, int arg11)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,5));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,6));
	uintptr_t* az=(Luna< uintptr_t >::check(L,7));
	const char * sch=(const char *)lua_tostring(L,8);
	const char * opt=(const char *)lua_tostring(L,9);
	int _arg10=(int)lua_tointeger(L,10);
	int _arg11=(int)lua_tointeger(L,11);

	mgl_flow_xyz_(gr, x, y, z, ax, ay, az, sch, opt, _arg10, _arg11);

	return 0;
}

// void mgl_flow_3d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt)
static int _bind_mgl_flow_3d(lua_State *L) {
	if (!_lg_typecheck_mgl_flow_3d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flow_3d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_flow_3d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* ax=(Luna< mglDataA >::check(L,2));
	const mglDataA* ay=(Luna< mglDataA >::check(L,3));
	const mglDataA* az=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_flow_3d(gr, ax, ay, az, sch, opt);

	return 0;
}

// void mgl_flow_3d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_flow_3d_(lua_State *L) {
	if (!_lg_typecheck_mgl_flow_3d_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flow_3d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_flow_3d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,2));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,3));
	uintptr_t* az=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_flow_3d_(gr, ax, ay, az, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_flowp_xy(mglBase * gr, double x0, double y0, double z0, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)
static int _bind_mgl_flowp_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_flowp_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flowp_xy(mglBase * gr, double x0, double y0, double z0, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_flowp_xy(mglBase * gr, double x0, double y0, double z0, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 7 ID = 45413231\narg 8 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	const mglDataA* x=(Luna< mglDataA >::check(L,5));
	const mglDataA* y=(Luna< mglDataA >::check(L,6));
	const mglDataA* ax=(Luna< mglDataA >::check(L,7));
	const mglDataA* ay=(Luna< mglDataA >::check(L,8));
	const char * sch=(const char *)lua_tostring(L,9);
	const char * opt=(const char *)lua_tostring(L,10);

	mgl_flowp_xy(gr, x0, y0, z0, x, y, ax, ay, sch, opt);

	return 0;
}

// void mgl_flowp_xy_(uintptr_t * gr, double * x0, double * y0, double * z0, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg11, int arg12)
static int _bind_mgl_flowp_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_flowp_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flowp_xy_(uintptr_t * gr, double * x0, double * y0, double * z0, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg11, int arg12) function, expected prototype:\nvoid mgl_flowp_xy_(uintptr_t * gr, double * x0, double * y0, double * z0, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg11, int arg12)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	uintptr_t* x=(Luna< uintptr_t >::check(L,5));
	uintptr_t* y=(Luna< uintptr_t >::check(L,6));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,7));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,8));
	const char * sch=(const char *)lua_tostring(L,9);
	const char * opt=(const char *)lua_tostring(L,10);
	int _arg11=(int)lua_tointeger(L,11);
	int _arg12=(int)lua_tointeger(L,12);

	mgl_flowp_xy_(gr, &x0, &y0, &z0, x, y, ax, ay, sch, opt, _arg11, _arg12);

	return 0;
}

// void mgl_flowp_2d(mglBase * gr, double x0, double y0, double z0, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)
static int _bind_mgl_flowp_2d(lua_State *L) {
	if (!_lg_typecheck_mgl_flowp_2d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flowp_2d(mglBase * gr, double x0, double y0, double z0, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_flowp_2d(mglBase * gr, double x0, double y0, double z0, const mglDataA * ax, const mglDataA * ay, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	const mglDataA* ax=(Luna< mglDataA >::check(L,5));
	const mglDataA* ay=(Luna< mglDataA >::check(L,6));
	const char * sch=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_flowp_2d(gr, x0, y0, z0, ax, ay, sch, opt);

	return 0;
}

// void mgl_flowp_2d_(uintptr_t * gr, double * x0, double * y0, double * z0, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg9, int arg10)
static int _bind_mgl_flowp_2d_(lua_State *L) {
	if (!_lg_typecheck_mgl_flowp_2d_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flowp_2d_(uintptr_t * gr, double * x0, double * y0, double * z0, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_flowp_2d_(uintptr_t * gr, double * x0, double * y0, double * z0, uintptr_t * ax, uintptr_t * ay, const char * sch, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	uintptr_t* ax=(Luna< uintptr_t >::check(L,5));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,6));
	const char * sch=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_flowp_2d_(gr, &x0, &y0, &z0, ax, ay, sch, opt, _arg9, _arg10);

	return 0;
}

// void mgl_flowp_xyz(mglBase * gr, double x0, double y0, double z0, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt)
static int _bind_mgl_flowp_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_flowp_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flowp_xyz(mglBase * gr, double x0, double y0, double z0, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_flowp_xyz(mglBase * gr, double x0, double y0, double z0, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 7 ID = 45413231\narg 8 ID = 45413231\narg 9 ID = 45413231\narg 10 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	const mglDataA* x=(Luna< mglDataA >::check(L,5));
	const mglDataA* y=(Luna< mglDataA >::check(L,6));
	const mglDataA* z=(Luna< mglDataA >::check(L,7));
	const mglDataA* ax=(Luna< mglDataA >::check(L,8));
	const mglDataA* ay=(Luna< mglDataA >::check(L,9));
	const mglDataA* az=(Luna< mglDataA >::check(L,10));
	const char * sch=(const char *)lua_tostring(L,11);
	const char * opt=(const char *)lua_tostring(L,12);

	mgl_flowp_xyz(gr, x0, y0, z0, x, y, z, ax, ay, az, sch, opt);

	return 0;
}

// void mgl_flowp_xyz_(uintptr_t * gr, double * x0, double * y0, double * z0, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg13, int arg14)
static int _bind_mgl_flowp_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_flowp_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flowp_xyz_(uintptr_t * gr, double * x0, double * y0, double * z0, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg13, int arg14) function, expected prototype:\nvoid mgl_flowp_xyz_(uintptr_t * gr, double * x0, double * y0, double * z0, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg13, int arg14)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	uintptr_t* x=(Luna< uintptr_t >::check(L,5));
	uintptr_t* y=(Luna< uintptr_t >::check(L,6));
	uintptr_t* z=(Luna< uintptr_t >::check(L,7));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,8));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,9));
	uintptr_t* az=(Luna< uintptr_t >::check(L,10));
	const char * sch=(const char *)lua_tostring(L,11);
	const char * opt=(const char *)lua_tostring(L,12);
	int _arg13=(int)lua_tointeger(L,13);
	int _arg14=(int)lua_tointeger(L,14);

	mgl_flowp_xyz_(gr, &x0, &y0, &z0, x, y, z, ax, ay, az, sch, opt, _arg13, _arg14);

	return 0;
}

// void mgl_flowp_3d(mglBase * gr, double x0, double y0, double z0, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt)
static int _bind_mgl_flowp_3d(lua_State *L) {
	if (!_lg_typecheck_mgl_flowp_3d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flowp_3d(mglBase * gr, double x0, double y0, double z0, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_flowp_3d(mglBase * gr, double x0, double y0, double z0, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 7 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	const mglDataA* ax=(Luna< mglDataA >::check(L,5));
	const mglDataA* ay=(Luna< mglDataA >::check(L,6));
	const mglDataA* az=(Luna< mglDataA >::check(L,7));
	const char * sch=(const char *)lua_tostring(L,8);
	const char * opt=(const char *)lua_tostring(L,9);

	mgl_flowp_3d(gr, x0, y0, z0, ax, ay, az, sch, opt);

	return 0;
}

// void mgl_flowp_3d_(uintptr_t * gr, double * x0, double * y0, double * z0, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg10, int arg11)
static int _bind_mgl_flowp_3d_(lua_State *L) {
	if (!_lg_typecheck_mgl_flowp_3d_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_flowp_3d_(uintptr_t * gr, double * x0, double * y0, double * z0, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg10, int arg11) function, expected prototype:\nvoid mgl_flowp_3d_(uintptr_t * gr, double * x0, double * y0, double * z0, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, const char * opt, int arg10, int arg11)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double x0=(double)lua_tonumber(L,2);
	double y0=(double)lua_tonumber(L,3);
	double z0=(double)lua_tonumber(L,4);
	uintptr_t* ax=(Luna< uintptr_t >::check(L,5));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,6));
	uintptr_t* az=(Luna< uintptr_t >::check(L,7));
	const char * sch=(const char *)lua_tostring(L,8);
	const char * opt=(const char *)lua_tostring(L,9);
	int _arg10=(int)lua_tointeger(L,10);
	int _arg11=(int)lua_tointeger(L,11);

	mgl_flowp_3d_(gr, &x0, &y0, &z0, ax, ay, az, sch, opt, _arg10, _arg11);

	return 0;
}

// void mgl_pipe_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, double r0, const char * opt)
static int _bind_mgl_pipe_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_pipe_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_pipe_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, double r0, const char * opt) function, expected prototype:\nvoid mgl_pipe_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ax, const mglDataA * ay, const char * sch, double r0, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* ax=(Luna< mglDataA >::check(L,4));
	const mglDataA* ay=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	double r0=(double)lua_tonumber(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_pipe_xy(gr, x, y, ax, ay, sch, r0, opt);

	return 0;
}

// void mgl_pipe_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, double * r0, const char * opt, int arg9, int arg10)
static int _bind_mgl_pipe_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_pipe_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_pipe_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, double * r0, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_pipe_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ax, uintptr_t * ay, const char * sch, double * r0, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,4));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	double r0=(double)lua_tonumber(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_pipe_xy_(gr, x, y, ax, ay, sch, &r0, opt, _arg9, _arg10);

	return 0;
}

// void mgl_pipe_2d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const char * sch, double r0, const char * opt)
static int _bind_mgl_pipe_2d(lua_State *L) {
	if (!_lg_typecheck_mgl_pipe_2d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_pipe_2d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const char * sch, double r0, const char * opt) function, expected prototype:\nvoid mgl_pipe_2d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const char * sch, double r0, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* ax=(Luna< mglDataA >::check(L,2));
	const mglDataA* ay=(Luna< mglDataA >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	double r0=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_pipe_2d(gr, ax, ay, sch, r0, opt);

	return 0;
}

// void mgl_pipe_2d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, const char * sch, double * r0, const char * opt, int arg7, int arg8)
static int _bind_mgl_pipe_2d_(lua_State *L) {
	if (!_lg_typecheck_mgl_pipe_2d_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_pipe_2d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, const char * sch, double * r0, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_pipe_2d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, const char * sch, double * r0, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,2));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,3));
	const char * sch=(const char *)lua_tostring(L,4);
	double r0=(double)lua_tonumber(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_pipe_2d_(gr, ax, ay, sch, &r0, opt, _arg7, _arg8);

	return 0;
}

// void mgl_pipe_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, double r0, const char * opt)
static int _bind_mgl_pipe_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_pipe_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_pipe_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, double r0, const char * opt) function, expected prototype:\nvoid mgl_pipe_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, double r0, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 7 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* ax=(Luna< mglDataA >::check(L,5));
	const mglDataA* ay=(Luna< mglDataA >::check(L,6));
	const mglDataA* az=(Luna< mglDataA >::check(L,7));
	const char * sch=(const char *)lua_tostring(L,8);
	double r0=(double)lua_tonumber(L,9);
	const char * opt=(const char *)lua_tostring(L,10);

	mgl_pipe_xyz(gr, x, y, z, ax, ay, az, sch, r0, opt);

	return 0;
}

// void mgl_pipe_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, double * r0, const char * opt, int arg11, int arg12)
static int _bind_mgl_pipe_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_pipe_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_pipe_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, double * r0, const char * opt, int arg11, int arg12) function, expected prototype:\nvoid mgl_pipe_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, double * r0, const char * opt, int arg11, int arg12)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,5));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,6));
	uintptr_t* az=(Luna< uintptr_t >::check(L,7));
	const char * sch=(const char *)lua_tostring(L,8);
	double r0=(double)lua_tonumber(L,9);
	const char * opt=(const char *)lua_tostring(L,10);
	int _arg11=(int)lua_tointeger(L,11);
	int _arg12=(int)lua_tointeger(L,12);

	mgl_pipe_xyz_(gr, x, y, z, ax, ay, az, sch, &r0, opt, _arg11, _arg12);

	return 0;
}

// void mgl_pipe_3d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, double r0, const char * opt)
static int _bind_mgl_pipe_3d(lua_State *L) {
	if (!_lg_typecheck_mgl_pipe_3d(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_pipe_3d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, double r0, const char * opt) function, expected prototype:\nvoid mgl_pipe_3d(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, double r0, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* ax=(Luna< mglDataA >::check(L,2));
	const mglDataA* ay=(Luna< mglDataA >::check(L,3));
	const mglDataA* az=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	double r0=(double)lua_tonumber(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_pipe_3d(gr, ax, ay, az, sch, r0, opt);

	return 0;
}

// void mgl_pipe_3d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, double * r0, const char * opt, int arg8, int arg9)
static int _bind_mgl_pipe_3d_(lua_State *L) {
	if (!_lg_typecheck_mgl_pipe_3d_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_pipe_3d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, double * r0, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_pipe_3d_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, double * r0, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,2));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,3));
	uintptr_t* az=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	double r0=(double)lua_tonumber(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_pipe_3d_(gr, ax, ay, az, sch, &r0, opt, _arg8, _arg9);

	return 0;
}

// void mgl_grad_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ph, const char * sch, const char * opt)
static int _bind_mgl_grad_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_grad_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_grad_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ph, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_grad_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ph, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* ph=(Luna< mglDataA >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_grad_xyz(gr, x, y, z, ph, sch, opt);

	return 0;
}

// void mgl_grad_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ph, const char * sch, const char * opt, int arg8, int arg9)
static int _bind_mgl_grad_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_grad_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_grad_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ph, const char * sch, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_grad_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ph, const char * sch, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* ph=(Luna< uintptr_t >::check(L,5));
	const char * sch=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_grad_xyz_(gr, x, y, z, ph, sch, opt, _arg8, _arg9);

	return 0;
}

// void mgl_grad_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ph, const char * sch, const char * opt)
static int _bind_mgl_grad_xy(lua_State *L) {
	if (!_lg_typecheck_mgl_grad_xy(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_grad_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ph, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_grad_xy(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * ph, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* ph=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_grad_xy(gr, x, y, ph, sch, opt);

	return 0;
}

// void mgl_grad_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ph, const char * sch, const char * opt, int arg7, int arg8)
static int _bind_mgl_grad_xy_(lua_State *L) {
	if (!_lg_typecheck_mgl_grad_xy_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_grad_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ph, const char * sch, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_grad_xy_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * ph, const char * sch, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* ph=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_grad_xy_(gr, x, y, ph, sch, opt, _arg7, _arg8);

	return 0;
}

// void mgl_grad(mglBase * gr, const mglDataA * ph, const char * sch, const char * opt)
static int _bind_mgl_grad(lua_State *L) {
	if (!_lg_typecheck_mgl_grad(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_grad(mglBase * gr, const mglDataA * ph, const char * sch, const char * opt) function, expected prototype:\nvoid mgl_grad(mglBase * gr, const mglDataA * ph, const char * sch, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* ph=(Luna< mglDataA >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_grad(gr, ph, sch, opt);

	return 0;
}

// void mgl_grad_(uintptr_t * gr, uintptr_t * ph, const char * sch, const char * opt, int arg5, int arg6)
static int _bind_mgl_grad_(lua_State *L) {
	if (!_lg_typecheck_mgl_grad_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_grad_(uintptr_t * gr, uintptr_t * ph, const char * sch, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_grad_(uintptr_t * gr, uintptr_t * ph, const char * sch, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* ph=(Luna< uintptr_t >::check(L,2));
	const char * sch=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_grad_(gr, ph, sch, opt, _arg5, _arg6);

	return 0;
}

// void mgl_vect3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, double sVal, const char * opt)
static int _bind_mgl_vect3_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_vect3_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_vect3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, double sVal, const char * opt) function, expected prototype:\nvoid mgl_vect3_xyz(mglBase * gr, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 7 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* ax=(Luna< mglDataA >::check(L,5));
	const mglDataA* ay=(Luna< mglDataA >::check(L,6));
	const mglDataA* az=(Luna< mglDataA >::check(L,7));
	const char * sch=(const char *)lua_tostring(L,8);
	double sVal=(double)lua_tonumber(L,9);
	const char * opt=(const char *)lua_tostring(L,10);

	mgl_vect3_xyz(gr, x, y, z, ax, ay, az, sch, sVal, opt);

	return 0;
}

// void mgl_vect3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, double * sVal, const char * opt, int arg11, int arg12)
static int _bind_mgl_vect3_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_vect3_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_vect3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, double * sVal, const char * opt, int arg11, int arg12) function, expected prototype:\nvoid mgl_vect3_xyz_(uintptr_t * gr, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, double * sVal, const char * opt, int arg11, int arg12)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,5));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,6));
	uintptr_t* az=(Luna< uintptr_t >::check(L,7));
	const char * sch=(const char *)lua_tostring(L,8);
	double sVal=(double)lua_tonumber(L,9);
	const char * opt=(const char *)lua_tostring(L,10);
	int _arg11=(int)lua_tointeger(L,11);
	int _arg12=(int)lua_tointeger(L,12);

	mgl_vect3_xyz_(gr, x, y, z, ax, ay, az, sch, &sVal, opt, _arg11, _arg12);

	return 0;
}

// void mgl_vect3(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, double sVal, const char * opt)
static int _bind_mgl_vect3(lua_State *L) {
	if (!_lg_typecheck_mgl_vect3(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_vect3(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, double sVal, const char * opt) function, expected prototype:\nvoid mgl_vect3(mglBase * gr, const mglDataA * ax, const mglDataA * ay, const mglDataA * az, const char * sch, double sVal, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	const mglDataA* ax=(Luna< mglDataA >::check(L,2));
	const mglDataA* ay=(Luna< mglDataA >::check(L,3));
	const mglDataA* az=(Luna< mglDataA >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	double sVal=(double)lua_tonumber(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_vect3(gr, ax, ay, az, sch, sVal, opt);

	return 0;
}

// void mgl_vect3_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, double * sVal, const char * opt, int arg8, int arg9)
static int _bind_mgl_vect3_(lua_State *L) {
	if (!_lg_typecheck_mgl_vect3_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_vect3_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, double * sVal, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_vect3_(uintptr_t * gr, uintptr_t * ax, uintptr_t * ay, uintptr_t * az, const char * sch, double * sVal, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* ax=(Luna< uintptr_t >::check(L,2));
	uintptr_t* ay=(Luna< uintptr_t >::check(L,3));
	uintptr_t* az=(Luna< uintptr_t >::check(L,4));
	const char * sch=(const char *)lua_tostring(L,5);
	double sVal=(double)lua_tonumber(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_vect3_(gr, ax, ay, az, sch, &sVal, opt, _arg8, _arg9);

	return 0;
}

// void mgl_surf3_xyz_val(mglBase * graph, double Val, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, const char * opt)
static int _bind_mgl_surf3_xyz_val(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3_xyz_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3_xyz_val(mglBase * graph, double Val, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_surf3_xyz_val(mglBase * graph, double Val, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	double Val=(double)lua_tonumber(L,2);
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const mglDataA* a=(Luna< mglDataA >::check(L,6));
	const char * stl=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_surf3_xyz_val(graph, Val, x, y, z, a, stl, opt);

	return 0;
}

// void mgl_surf3_xyz_val_(uintptr_t * graph, double * Val, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * stl, const char * opt, int arg9, int arg10)
static int _bind_mgl_surf3_xyz_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3_xyz_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3_xyz_val_(uintptr_t * graph, double * Val, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * stl, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_surf3_xyz_val_(uintptr_t * graph, double * Val, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * stl, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	double Val=(double)lua_tonumber(L,2);
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	uintptr_t* a=(Luna< uintptr_t >::check(L,6));
	const char * stl=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_surf3_xyz_val_(graph, &Val, x, y, z, a, stl, opt, _arg9, _arg10);

	return 0;
}

// void mgl_surf3_val(mglBase * graph, double Val, const mglDataA * a, const char * stl, const char * opt)
static int _bind_mgl_surf3_val(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3_val(mglBase * graph, double Val, const mglDataA * a, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_surf3_val(mglBase * graph, double Val, const mglDataA * a, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	double Val=(double)lua_tonumber(L,2);
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_surf3_val(graph, Val, a, stl, opt);

	return 0;
}

// void mgl_surf3_val_(uintptr_t * graph, double * Val, uintptr_t * a, const char * stl, const char * opt, int arg6, int arg7)
static int _bind_mgl_surf3_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3_val_(uintptr_t * graph, double * Val, uintptr_t * a, const char * stl, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_surf3_val_(uintptr_t * graph, double * Val, uintptr_t * a, const char * stl, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	double Val=(double)lua_tonumber(L,2);
	uintptr_t* a=(Luna< uintptr_t >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_surf3_val_(graph, &Val, a, stl, opt, _arg6, _arg7);

	return 0;
}

// void mgl_surf3_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, const char * opt)
static int _bind_mgl_surf3_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_surf3_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	const char * stl=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_surf3_xyz(graph, x, y, z, a, stl, opt);

	return 0;
}

// void mgl_surf3_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * stl, const char * opt, int arg8, int arg9)
static int _bind_mgl_surf3_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * stl, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_surf3_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * stl, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* a=(Luna< uintptr_t >::check(L,5));
	const char * stl=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_surf3_xyz_(graph, x, y, z, a, stl, opt, _arg8, _arg9);

	return 0;
}

// void mgl_surf3(mglBase * graph, const mglDataA * a, const char * stl, const char * opt)
static int _bind_mgl_surf3(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3(mglBase * graph, const mglDataA * a, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_surf3(mglBase * graph, const mglDataA * a, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_surf3(graph, a, stl, opt);

	return 0;
}

// void mgl_surf3_(uintptr_t * graph, uintptr_t * a, const char * stl, const char * opt, int arg5, int arg6)
static int _bind_mgl_surf3_(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3_(uintptr_t * graph, uintptr_t * a, const char * stl, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_surf3_(uintptr_t * graph, uintptr_t * a, const char * stl, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_surf3_(graph, a, stl, opt, _arg5, _arg6);

	return 0;
}

// void mgl_surf3a_xyz_val(mglBase * graph, double Val, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)
static int _bind_mgl_surf3a_xyz_val(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3a_xyz_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3a_xyz_val(mglBase * graph, double Val, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_surf3a_xyz_val(mglBase * graph, double Val, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 7 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	double Val=(double)lua_tonumber(L,2);
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const mglDataA* a=(Luna< mglDataA >::check(L,6));
	const mglDataA* b=(Luna< mglDataA >::check(L,7));
	const char * stl=(const char *)lua_tostring(L,8);
	const char * opt=(const char *)lua_tostring(L,9);

	mgl_surf3a_xyz_val(graph, Val, x, y, z, a, b, stl, opt);

	return 0;
}

// void mgl_surf3a_xyz_val_(uintptr_t * graph, double * Val, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg10, int arg11)
static int _bind_mgl_surf3a_xyz_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3a_xyz_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3a_xyz_val_(uintptr_t * graph, double * Val, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg10, int arg11) function, expected prototype:\nvoid mgl_surf3a_xyz_val_(uintptr_t * graph, double * Val, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg10, int arg11)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	double Val=(double)lua_tonumber(L,2);
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	uintptr_t* a=(Luna< uintptr_t >::check(L,6));
	uintptr_t* b=(Luna< uintptr_t >::check(L,7));
	const char * stl=(const char *)lua_tostring(L,8);
	const char * opt=(const char *)lua_tostring(L,9);
	int _arg10=(int)lua_tointeger(L,10);
	int _arg11=(int)lua_tointeger(L,11);

	mgl_surf3a_xyz_val_(graph, &Val, x, y, z, a, b, stl, opt, _arg10, _arg11);

	return 0;
}

// void mgl_surf3a_val(mglBase * graph, double Val, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)
static int _bind_mgl_surf3a_val(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3a_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3a_val(mglBase * graph, double Val, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_surf3a_val(mglBase * graph, double Val, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	double Val=(double)lua_tonumber(L,2);
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const mglDataA* b=(Luna< mglDataA >::check(L,4));
	const char * stl=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_surf3a_val(graph, Val, a, b, stl, opt);

	return 0;
}

// void mgl_surf3a_val_(uintptr_t * graph, double * Val, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg7, int arg8)
static int _bind_mgl_surf3a_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3a_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3a_val_(uintptr_t * graph, double * Val, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_surf3a_val_(uintptr_t * graph, double * Val, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	double Val=(double)lua_tonumber(L,2);
	uintptr_t* a=(Luna< uintptr_t >::check(L,3));
	uintptr_t* b=(Luna< uintptr_t >::check(L,4));
	const char * stl=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_surf3a_val_(graph, &Val, a, b, stl, opt, _arg7, _arg8);

	return 0;
}

// void mgl_surf3a_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)
static int _bind_mgl_surf3a_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3a_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3a_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_surf3a_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	const mglDataA* b=(Luna< mglDataA >::check(L,6));
	const char * stl=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_surf3a_xyz(graph, x, y, z, a, b, stl, opt);

	return 0;
}

// void mgl_surf3a_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg9, int arg10)
static int _bind_mgl_surf3a_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3a_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3a_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_surf3a_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* a=(Luna< uintptr_t >::check(L,5));
	uintptr_t* b=(Luna< uintptr_t >::check(L,6));
	const char * stl=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_surf3a_xyz_(graph, x, y, z, a, b, stl, opt, _arg9, _arg10);

	return 0;
}

// void mgl_surf3a(mglBase * graph, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)
static int _bind_mgl_surf3a(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3a(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3a(mglBase * graph, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_surf3a(mglBase * graph, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const mglDataA* b=(Luna< mglDataA >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_surf3a(graph, a, b, stl, opt);

	return 0;
}

// void mgl_surf3a_(uintptr_t * graph, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg6, int arg7)
static int _bind_mgl_surf3a_(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3a_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3a_(uintptr_t * graph, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_surf3a_(uintptr_t * graph, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	uintptr_t* b=(Luna< uintptr_t >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_surf3a_(graph, a, b, stl, opt, _arg6, _arg7);

	return 0;
}

// void mgl_surf3c_xyz_val(mglBase * graph, double Val, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)
static int _bind_mgl_surf3c_xyz_val(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3c_xyz_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3c_xyz_val(mglBase * graph, double Val, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_surf3c_xyz_val(mglBase * graph, double Val, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\narg 7 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	double Val=(double)lua_tonumber(L,2);
	const mglDataA* x=(Luna< mglDataA >::check(L,3));
	const mglDataA* y=(Luna< mglDataA >::check(L,4));
	const mglDataA* z=(Luna< mglDataA >::check(L,5));
	const mglDataA* a=(Luna< mglDataA >::check(L,6));
	const mglDataA* b=(Luna< mglDataA >::check(L,7));
	const char * stl=(const char *)lua_tostring(L,8);
	const char * opt=(const char *)lua_tostring(L,9);

	mgl_surf3c_xyz_val(graph, Val, x, y, z, a, b, stl, opt);

	return 0;
}

// void mgl_surf3c_xyz_val_(uintptr_t * graph, double * Val, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg10, int arg11)
static int _bind_mgl_surf3c_xyz_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3c_xyz_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3c_xyz_val_(uintptr_t * graph, double * Val, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg10, int arg11) function, expected prototype:\nvoid mgl_surf3c_xyz_val_(uintptr_t * graph, double * Val, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg10, int arg11)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	double Val=(double)lua_tonumber(L,2);
	uintptr_t* x=(Luna< uintptr_t >::check(L,3));
	uintptr_t* y=(Luna< uintptr_t >::check(L,4));
	uintptr_t* z=(Luna< uintptr_t >::check(L,5));
	uintptr_t* a=(Luna< uintptr_t >::check(L,6));
	uintptr_t* b=(Luna< uintptr_t >::check(L,7));
	const char * stl=(const char *)lua_tostring(L,8);
	const char * opt=(const char *)lua_tostring(L,9);
	int _arg10=(int)lua_tointeger(L,10);
	int _arg11=(int)lua_tointeger(L,11);

	mgl_surf3c_xyz_val_(graph, &Val, x, y, z, a, b, stl, opt, _arg10, _arg11);

	return 0;
}

// void mgl_surf3c_val(mglBase * graph, double Val, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)
static int _bind_mgl_surf3c_val(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3c_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3c_val(mglBase * graph, double Val, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_surf3c_val(mglBase * graph, double Val, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 3 ID = 45413231\narg 4 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	double Val=(double)lua_tonumber(L,2);
	const mglDataA* a=(Luna< mglDataA >::check(L,3));
	const mglDataA* b=(Luna< mglDataA >::check(L,4));
	const char * stl=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);

	mgl_surf3c_val(graph, Val, a, b, stl, opt);

	return 0;
}

// void mgl_surf3c_val_(uintptr_t * graph, double * Val, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg7, int arg8)
static int _bind_mgl_surf3c_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3c_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3c_val_(uintptr_t * graph, double * Val, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg7, int arg8) function, expected prototype:\nvoid mgl_surf3c_val_(uintptr_t * graph, double * Val, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg7, int arg8)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	double Val=(double)lua_tonumber(L,2);
	uintptr_t* a=(Luna< uintptr_t >::check(L,3));
	uintptr_t* b=(Luna< uintptr_t >::check(L,4));
	const char * stl=(const char *)lua_tostring(L,5);
	const char * opt=(const char *)lua_tostring(L,6);
	int _arg7=(int)lua_tointeger(L,7);
	int _arg8=(int)lua_tointeger(L,8);

	mgl_surf3c_val_(graph, &Val, a, b, stl, opt, _arg7, _arg8);

	return 0;
}

// void mgl_surf3c_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)
static int _bind_mgl_surf3c_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3c_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3c_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_surf3c_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	const mglDataA* b=(Luna< mglDataA >::check(L,6));
	const char * stl=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);

	mgl_surf3c_xyz(graph, x, y, z, a, b, stl, opt);

	return 0;
}

// void mgl_surf3c_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg9, int arg10)
static int _bind_mgl_surf3c_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3c_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3c_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg9, int arg10) function, expected prototype:\nvoid mgl_surf3c_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg9, int arg10)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* a=(Luna< uintptr_t >::check(L,5));
	uintptr_t* b=(Luna< uintptr_t >::check(L,6));
	const char * stl=(const char *)lua_tostring(L,7);
	const char * opt=(const char *)lua_tostring(L,8);
	int _arg9=(int)lua_tointeger(L,9);
	int _arg10=(int)lua_tointeger(L,10);

	mgl_surf3c_xyz_(graph, x, y, z, a, b, stl, opt, _arg9, _arg10);

	return 0;
}

// void mgl_surf3c(mglBase * graph, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)
static int _bind_mgl_surf3c(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3c(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3c(mglBase * graph, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_surf3c(mglBase * graph, const mglDataA * a, const mglDataA * b, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const mglDataA* b=(Luna< mglDataA >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);

	mgl_surf3c(graph, a, b, stl, opt);

	return 0;
}

// void mgl_surf3c_(uintptr_t * graph, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg6, int arg7)
static int _bind_mgl_surf3c_(lua_State *L) {
	if (!_lg_typecheck_mgl_surf3c_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_surf3c_(uintptr_t * graph, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg6, int arg7) function, expected prototype:\nvoid mgl_surf3c_(uintptr_t * graph, uintptr_t * a, uintptr_t * b, const char * stl, const char * opt, int arg6, int arg7)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	uintptr_t* b=(Luna< uintptr_t >::check(L,3));
	const char * stl=(const char *)lua_tostring(L,4);
	const char * opt=(const char *)lua_tostring(L,5);
	int _arg6=(int)lua_tointeger(L,6);
	int _arg7=(int)lua_tointeger(L,7);

	mgl_surf3c_(graph, a, b, stl, opt, _arg6, _arg7);

	return 0;
}

// void mgl_cloud_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, const char * opt)
static int _bind_mgl_cloud_xyz(lua_State *L) {
	if (!_lg_typecheck_mgl_cloud_xyz(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cloud_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_cloud_xyz(mglBase * graph, const mglDataA * x, const mglDataA * y, const mglDataA * z, const mglDataA * a, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* x=(Luna< mglDataA >::check(L,2));
	const mglDataA* y=(Luna< mglDataA >::check(L,3));
	const mglDataA* z=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	const char * stl=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);

	mgl_cloud_xyz(graph, x, y, z, a, stl, opt);

	return 0;
}

// void mgl_cloud_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * stl, const char * opt, int arg8, int arg9)
static int _bind_mgl_cloud_xyz_(lua_State *L) {
	if (!_lg_typecheck_mgl_cloud_xyz_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cloud_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * stl, const char * opt, int arg8, int arg9) function, expected prototype:\nvoid mgl_cloud_xyz_(uintptr_t * graph, uintptr_t * x, uintptr_t * y, uintptr_t * z, uintptr_t * a, const char * stl, const char * opt, int arg8, int arg9)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* x=(Luna< uintptr_t >::check(L,2));
	uintptr_t* y=(Luna< uintptr_t >::check(L,3));
	uintptr_t* z=(Luna< uintptr_t >::check(L,4));
	uintptr_t* a=(Luna< uintptr_t >::check(L,5));
	const char * stl=(const char *)lua_tostring(L,6);
	const char * opt=(const char *)lua_tostring(L,7);
	int _arg8=(int)lua_tointeger(L,8);
	int _arg9=(int)lua_tointeger(L,9);

	mgl_cloud_xyz_(graph, x, y, z, a, stl, opt, _arg8, _arg9);

	return 0;
}

// void mgl_cloud(mglBase * graph, const mglDataA * a, const char * stl, const char * opt)
static int _bind_mgl_cloud(lua_State *L) {
	if (!_lg_typecheck_mgl_cloud(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cloud(mglBase * graph, const mglDataA * a, const char * stl, const char * opt) function, expected prototype:\nvoid mgl_cloud(mglBase * graph, const mglDataA * a, const char * stl, const char * opt)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* a=(Luna< mglDataA >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);

	mgl_cloud(graph, a, stl, opt);

	return 0;
}

// void mgl_cloud_(uintptr_t * graph, uintptr_t * a, const char * stl, const char * opt, int arg5, int arg6)
static int _bind_mgl_cloud_(lua_State *L) {
	if (!_lg_typecheck_mgl_cloud_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_cloud_(uintptr_t * graph, uintptr_t * a, const char * stl, const char * opt, int arg5, int arg6) function, expected prototype:\nvoid mgl_cloud_(uintptr_t * graph, uintptr_t * a, const char * stl, const char * opt, int arg5, int arg6)\nClass arguments details:\n");
	}

	uintptr_t* graph=(Luna< uintptr_t >::check(L,1));
	uintptr_t* a=(Luna< uintptr_t >::check(L,2));
	const char * stl=(const char *)lua_tostring(L,3);
	const char * opt=(const char *)lua_tostring(L,4);
	int _arg5=(int)lua_tointeger(L,5);
	int _arg6=(int)lua_tointeger(L,6);

	mgl_cloud_(graph, a, stl, opt, _arg5, _arg6);

	return 0;
}

// void mgl_beam_val(mglBase * graph, double Val, const mglDataA * tr, const mglDataA * g1, const mglDataA * g2, const mglDataA * a, double r, const char * stl, int norm)
static int _bind_mgl_beam_val(lua_State *L) {
	if (!_lg_typecheck_mgl_beam_val(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_beam_val(mglBase * graph, double Val, const mglDataA * tr, const mglDataA * g1, const mglDataA * g2, const mglDataA * a, double r, const char * stl, int norm) function, expected prototype:\nvoid mgl_beam_val(mglBase * graph, double Val, const mglDataA * tr, const mglDataA * g1, const mglDataA * g2, const mglDataA * a, double r, const char * stl, int norm)\nClass arguments details:\narg 1 ID = 88502113\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\narg 6 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	double Val=(double)lua_tonumber(L,2);
	const mglDataA* tr=(Luna< mglDataA >::check(L,3));
	const mglDataA* g1=(Luna< mglDataA >::check(L,4));
	const mglDataA* g2=(Luna< mglDataA >::check(L,5));
	const mglDataA* a=(Luna< mglDataA >::check(L,6));
	double r=(double)lua_tonumber(L,7);
	const char * stl=(const char *)lua_tostring(L,8);
	int norm=(int)lua_tointeger(L,9);

	mgl_beam_val(graph, Val, tr, g1, g2, a, r, stl, norm);

	return 0;
}

// void mgl_beam_val_(uintptr_t * gr, double * val, uintptr_t * tr, uintptr_t * g1, uintptr_t * g2, uintptr_t * a, double * r, const char * sch, int * norm, int l)
static int _bind_mgl_beam_val_(lua_State *L) {
	if (!_lg_typecheck_mgl_beam_val_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_beam_val_(uintptr_t * gr, double * val, uintptr_t * tr, uintptr_t * g1, uintptr_t * g2, uintptr_t * a, double * r, const char * sch, int * norm, int l) function, expected prototype:\nvoid mgl_beam_val_(uintptr_t * gr, double * val, uintptr_t * tr, uintptr_t * g1, uintptr_t * g2, uintptr_t * a, double * r, const char * sch, int * norm, int l)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	double val=(double)lua_tonumber(L,2);
	uintptr_t* tr=(Luna< uintptr_t >::check(L,3));
	uintptr_t* g1=(Luna< uintptr_t >::check(L,4));
	uintptr_t* g2=(Luna< uintptr_t >::check(L,5));
	uintptr_t* a=(Luna< uintptr_t >::check(L,6));
	double r=(double)lua_tonumber(L,7);
	const char * sch=(const char *)lua_tostring(L,8);
	int norm=(int)lua_tointeger(L,9);
	int l=(int)lua_tointeger(L,10);

	mgl_beam_val_(gr, &val, tr, g1, g2, a, &r, sch, &norm, l);

	return 0;
}

// void mgl_beam(mglBase * graph, const mglDataA * tr, const mglDataA * g1, const mglDataA * g2, const mglDataA * a, double r, const char * stl, int norm, int num)
static int _bind_mgl_beam(lua_State *L) {
	if (!_lg_typecheck_mgl_beam(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_beam(mglBase * graph, const mglDataA * tr, const mglDataA * g1, const mglDataA * g2, const mglDataA * a, double r, const char * stl, int norm, int num) function, expected prototype:\nvoid mgl_beam(mglBase * graph, const mglDataA * tr, const mglDataA * g1, const mglDataA * g2, const mglDataA * a, double r, const char * stl, int norm, int num)\nClass arguments details:\narg 1 ID = 88502113\narg 2 ID = 45413231\narg 3 ID = 45413231\narg 4 ID = 45413231\narg 5 ID = 45413231\n");
	}

	mglBase* graph=(Luna< mglBase >::check(L,1));
	const mglDataA* tr=(Luna< mglDataA >::check(L,2));
	const mglDataA* g1=(Luna< mglDataA >::check(L,3));
	const mglDataA* g2=(Luna< mglDataA >::check(L,4));
	const mglDataA* a=(Luna< mglDataA >::check(L,5));
	double r=(double)lua_tonumber(L,6);
	const char * stl=(const char *)lua_tostring(L,7);
	int norm=(int)lua_tointeger(L,8);
	int num=(int)lua_tointeger(L,9);

	mgl_beam(graph, tr, g1, g2, a, r, stl, norm, num);

	return 0;
}

// void mgl_beam_(uintptr_t * gr, uintptr_t * tr, uintptr_t * g1, uintptr_t * g2, uintptr_t * a, double * r, const char * sch, int * norm, int * num, int l)
static int _bind_mgl_beam_(lua_State *L) {
	if (!_lg_typecheck_mgl_beam_(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_beam_(uintptr_t * gr, uintptr_t * tr, uintptr_t * g1, uintptr_t * g2, uintptr_t * a, double * r, const char * sch, int * norm, int * num, int l) function, expected prototype:\nvoid mgl_beam_(uintptr_t * gr, uintptr_t * tr, uintptr_t * g1, uintptr_t * g2, uintptr_t * a, double * r, const char * sch, int * norm, int * num, int l)\nClass arguments details:\n");
	}

	uintptr_t* gr=(Luna< uintptr_t >::check(L,1));
	uintptr_t* tr=(Luna< uintptr_t >::check(L,2));
	uintptr_t* g1=(Luna< uintptr_t >::check(L,3));
	uintptr_t* g2=(Luna< uintptr_t >::check(L,4));
	uintptr_t* a=(Luna< uintptr_t >::check(L,5));
	double r=(double)lua_tonumber(L,6);
	const char * sch=(const char *)lua_tostring(L,7);
	int norm=(int)lua_tointeger(L,8);
	int num=(int)lua_tointeger(L,9);
	int l=(int)lua_tointeger(L,10);

	mgl_beam_(gr, tr, g1, g2, a, &r, sch, &norm, &num, l);

	return 0;
}

// int mgl_draw_graph(mglBase * gr, void * p)
static int _bind_mgl_draw_graph(lua_State *L) {
	if (!_lg_typecheck_mgl_draw_graph(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_draw_graph(mglBase * gr, void * p) function, expected prototype:\nint mgl_draw_graph(mglBase * gr, void * p)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	void* p=(Luna< void >::check(L,2));

	int lret = mgl_draw_graph(gr, p);
	lua_pushnumber(L,lret);

	return 1;
}

// int mgl_draw_class(mglBase * gr, void * p)
static int _bind_mgl_draw_class(lua_State *L) {
	if (!_lg_typecheck_mgl_draw_class(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in int mgl_draw_class(mglBase * gr, void * p) function, expected prototype:\nint mgl_draw_class(mglBase * gr, void * p)\nClass arguments details:\narg 1 ID = 88502113\n");
	}

	mglBase* gr=(Luna< mglBase >::check(L,1));
	void* p=(Luna< void >::check(L,2));

	int lret = mgl_draw_class(gr, p);
	lua_pushnumber(L,lret);

	return 1;
}

// void mgl_click_class(void * p)
static int _bind_mgl_click_class(lua_State *L) {
	if (!_lg_typecheck_mgl_click_class(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_click_class(void * p) function, expected prototype:\nvoid mgl_click_class(void * p)\nClass arguments details:\n");
	}

	void* p=(Luna< void >::check(L,1));

	mgl_click_class(p);

	return 0;
}

// void mgl_reload_class(void * p)
static int _bind_mgl_reload_class(lua_State *L) {
	if (!_lg_typecheck_mgl_reload_class(L)) {
		luna_printStack(L);
		luaL_error(L, "luna typecheck failed in void mgl_reload_class(void * p) function, expected prototype:\nvoid mgl_reload_class(void * p)\nClass arguments details:\n");
	}

	void* p=(Luna< void >::check(L,1));

	mgl_reload_class(p);

	return 0;
}


#ifdef __cplusplus
extern "C" {
#endif

void register_global_functions(lua_State* L) {
	luna_pushModule(L,"mathgl");
	lua_pushcfunction(L, _bind_mgl_ipowc); lua_setfield(L,-2,"mgl_ipowc");
	lua_pushcfunction(L, _bind_expi); lua_setfield(L,-2,"expi");
	lua_pushcfunction(L, _bind_mgl_difr_axial); lua_setfield(L,-2,"mgl_difr_axial");
	lua_pushcfunction(L, _bind_mgl_difr_grid); lua_setfield(L,-2,"mgl_difr_grid");
	lua_pushcfunction(L, _bind_mgl_gauss_rnd); lua_setfield(L,-2,"mgl_gauss_rnd");
	lua_pushcfunction(L, _bind_mgl_fft_freq); lua_setfield(L,-2,"mgl_fft_freq");
	lua_pushcfunction(L, _bind_mgl_strcls); lua_setfield(L,-2,"mgl_strcls");
	lua_pushcfunction(L, _bind_mgl_strpos); lua_setfield(L,-2,"mgl_strpos");
	lua_pushcfunction(L, _bind_mgl_chrpos); lua_setfield(L,-2,"mgl_chrpos");
	lua_pushcfunction(L, _bind_mgl_istrue); lua_setfield(L,-2,"mgl_istrue");
	lua_pushcfunction(L, _bind_mgl_d); lua_setfield(L,-2,"mgl_d");
	lua_pushcfunction(L, _bind_GetX); lua_setfield(L,-2,"GetX");
	lua_pushcfunction(L, _bind_GetY); lua_setfield(L,-2,"GetY");
	lua_pushcfunction(L, _bind_GetZ); lua_setfield(L,-2,"GetZ");
	lua_pushcfunction(L, _bind_mgl_have_color); lua_setfield(L,-2,"mgl_have_color");
	lua_pushcfunction(L, _bind_mgl_check_dim0); lua_setfield(L,-2,"mgl_check_dim0");
	lua_pushcfunction(L, _bind_mgl_check_dim1); lua_setfield(L,-2,"mgl_check_dim1");
	lua_pushcfunction(L, _bind_mgl_check_dim2); lua_setfield(L,-2,"mgl_check_dim2");
	lua_pushcfunction(L, _bind_mgl_check_dim3); lua_setfield(L,-2,"mgl_check_dim3");
	lua_pushcfunction(L, _bind_mgl_check_vec3); lua_setfield(L,-2,"mgl_check_vec3");
	lua_pushcfunction(L, _bind_mgl_check_trig); lua_setfield(L,-2,"mgl_check_trig");
	lua_pushcfunction(L, _bind_mgl_isboth); lua_setfield(L,-2,"mgl_isboth");
	lua_pushcfunction(L, _bind_mgl_get_warn); lua_setfield(L,-2,"mgl_get_warn");
	lua_pushcfunction(L, _bind_mgl_get_warn_); lua_setfield(L,-2,"mgl_get_warn_");
	lua_pushcfunction(L, _bind_mgl_set_warn); lua_setfield(L,-2,"mgl_set_warn");
	lua_pushcfunction(L, _bind_mgl_set_warn_); lua_setfield(L,-2,"mgl_set_warn_");
	lua_pushcfunction(L, _bind_mgl_get_mess); lua_setfield(L,-2,"mgl_get_mess");
	lua_pushcfunction(L, _bind_mgl_get_flag); lua_setfield(L,-2,"mgl_get_flag");
	lua_pushcfunction(L, _bind_mgl_set_flag); lua_setfield(L,-2,"mgl_set_flag");
	lua_pushcfunction(L, _bind_mgl_use_graph); lua_setfield(L,-2,"mgl_use_graph");
	lua_pushcfunction(L, _bind_mgl_use_graph_); lua_setfield(L,-2,"mgl_use_graph_");
	lua_pushcfunction(L, _bind_mgl_set_rdc_acc); lua_setfield(L,-2,"mgl_set_rdc_acc");
	lua_pushcfunction(L, _bind_mgl_set_rdc_acc_); lua_setfield(L,-2,"mgl_set_rdc_acc_");
	lua_pushcfunction(L, _bind_mgl_start_group); lua_setfield(L,-2,"mgl_start_group");
	lua_pushcfunction(L, _bind_mgl_start_group_); lua_setfield(L,-2,"mgl_start_group_");
	lua_pushcfunction(L, _bind_mgl_end_group); lua_setfield(L,-2,"mgl_end_group");
	lua_pushcfunction(L, _bind_mgl_end_group_); lua_setfield(L,-2,"mgl_end_group_");
	lua_pushcfunction(L, _bind_mgl_highlight); lua_setfield(L,-2,"mgl_highlight");
	lua_pushcfunction(L, _bind_mgl_highlight_); lua_setfield(L,-2,"mgl_highlight_");
	lua_pushcfunction(L, _bind_mgl_set_palette); lua_setfield(L,-2,"mgl_set_palette");
	lua_pushcfunction(L, _bind_mgl_set_palette_); lua_setfield(L,-2,"mgl_set_palette_");
	lua_pushcfunction(L, _bind_mgl_set_color); lua_setfield(L,-2,"mgl_set_color");
	lua_pushcfunction(L, _bind_mgl_set_color_); lua_setfield(L,-2,"mgl_set_color_");
	lua_pushcfunction(L, _bind_mgl_set_def_sch); lua_setfield(L,-2,"mgl_set_def_sch");
	lua_pushcfunction(L, _bind_mgl_set_def_sch_); lua_setfield(L,-2,"mgl_set_def_sch_");
	lua_pushcfunction(L, _bind_mgl_set_alpha_default); lua_setfield(L,-2,"mgl_set_alpha_default");
	lua_pushcfunction(L, _bind_mgl_set_alpha_default_); lua_setfield(L,-2,"mgl_set_alpha_default_");
	lua_pushcfunction(L, _bind_mgl_set_bar_width); lua_setfield(L,-2,"mgl_set_bar_width");
	lua_pushcfunction(L, _bind_mgl_set_bar_width_); lua_setfield(L,-2,"mgl_set_bar_width_");
	lua_pushcfunction(L, _bind_mgl_set_meshnum); lua_setfield(L,-2,"mgl_set_meshnum");
	lua_pushcfunction(L, _bind_mgl_set_meshnum_); lua_setfield(L,-2,"mgl_set_meshnum_");
	lua_pushcfunction(L, _bind_mgl_set_facenum); lua_setfield(L,-2,"mgl_set_facenum");
	lua_pushcfunction(L, _bind_mgl_set_facenum_); lua_setfield(L,-2,"mgl_set_facenum_");
	lua_pushcfunction(L, _bind_mgl_clear_unused); lua_setfield(L,-2,"mgl_clear_unused");
	lua_pushcfunction(L, _bind_mgl_clear_unused_); lua_setfield(L,-2,"mgl_clear_unused_");
	lua_pushcfunction(L, _bind_mgl_set_ambbr); lua_setfield(L,-2,"mgl_set_ambbr");
	lua_pushcfunction(L, _bind_mgl_set_ambbr_); lua_setfield(L,-2,"mgl_set_ambbr_");
	lua_pushcfunction(L, _bind_mgl_set_light_dif); lua_setfield(L,-2,"mgl_set_light_dif");
	lua_pushcfunction(L, _bind_mgl_set_light_dif_); lua_setfield(L,-2,"mgl_set_light_dif_");
	lua_pushcfunction(L, _bind_mgl_set_cut); lua_setfield(L,-2,"mgl_set_cut");
	lua_pushcfunction(L, _bind_mgl_set_cut_); lua_setfield(L,-2,"mgl_set_cut_");
	lua_pushcfunction(L, _bind_mgl_set_cut_box); lua_setfield(L,-2,"mgl_set_cut_box");
	lua_pushcfunction(L, _bind_mgl_set_cut_box_); lua_setfield(L,-2,"mgl_set_cut_box_");
	lua_pushcfunction(L, _bind_mgl_set_cutoff); lua_setfield(L,-2,"mgl_set_cutoff");
	lua_pushcfunction(L, _bind_mgl_set_cutoff_); lua_setfield(L,-2,"mgl_set_cutoff_");
	lua_pushcfunction(L, _bind_mgl_set_ranges); lua_setfield(L,-2,"mgl_set_ranges");
	lua_pushcfunction(L, _bind_mgl_set_ranges_); lua_setfield(L,-2,"mgl_set_ranges_");
	lua_pushcfunction(L, _bind_mgl_set_range_val); lua_setfield(L,-2,"mgl_set_range_val");
	lua_pushcfunction(L, _bind_mgl_set_range_val_); lua_setfield(L,-2,"mgl_set_range_val_");
	lua_pushcfunction(L, _bind_mgl_set_range_dat); lua_setfield(L,-2,"mgl_set_range_dat");
	lua_pushcfunction(L, _bind_mgl_set_range_dat_); lua_setfield(L,-2,"mgl_set_range_dat_");
	lua_pushcfunction(L, _bind_mgl_zoom_axis); lua_setfield(L,-2,"mgl_zoom_axis");
	lua_pushcfunction(L, _bind_mgl_zoom_axis_); lua_setfield(L,-2,"mgl_zoom_axis_");
	lua_pushcfunction(L, _bind_mgl_set_origin); lua_setfield(L,-2,"mgl_set_origin");
	lua_pushcfunction(L, _bind_mgl_set_origin_); lua_setfield(L,-2,"mgl_set_origin_");
	lua_pushcfunction(L, _bind_mgl_set_func); lua_setfield(L,-2,"mgl_set_func");
	lua_pushcfunction(L, _bind_mgl_set_func_); lua_setfield(L,-2,"mgl_set_func_");
	lua_pushcfunction(L, _bind_mgl_set_coor); lua_setfield(L,-2,"mgl_set_coor");
	lua_pushcfunction(L, _bind_mgl_set_coor_); lua_setfield(L,-2,"mgl_set_coor_");
	lua_pushcfunction(L, _bind_mgl_set_ternary); lua_setfield(L,-2,"mgl_set_ternary");
	lua_pushcfunction(L, _bind_mgl_set_ternary_); lua_setfield(L,-2,"mgl_set_ternary_");
	lua_pushcfunction(L, _bind_mgl_set_tick_rotate); lua_setfield(L,-2,"mgl_set_tick_rotate");
	lua_pushcfunction(L, _bind_mgl_set_tick_rotate_); lua_setfield(L,-2,"mgl_set_tick_rotate_");
	lua_pushcfunction(L, _bind_mgl_set_tick_skip); lua_setfield(L,-2,"mgl_set_tick_skip");
	lua_pushcfunction(L, _bind_mgl_set_tick_skip_); lua_setfield(L,-2,"mgl_set_tick_skip_");
	lua_pushcfunction(L, _bind_mgl_def_font); lua_setfield(L,-2,"mgl_def_font");
	lua_pushcfunction(L, _bind_mgl_def_font_); lua_setfield(L,-2,"mgl_def_font_");
	lua_pushcfunction(L, _bind_mgl_set_mark_size); lua_setfield(L,-2,"mgl_set_mark_size");
	lua_pushcfunction(L, _bind_mgl_set_mark_size_); lua_setfield(L,-2,"mgl_set_mark_size_");
	lua_pushcfunction(L, _bind_mgl_set_arrow_size); lua_setfield(L,-2,"mgl_set_arrow_size");
	lua_pushcfunction(L, _bind_mgl_set_arrow_size_); lua_setfield(L,-2,"mgl_set_arrow_size_");
	lua_pushcfunction(L, _bind_mgl_set_font_size); lua_setfield(L,-2,"mgl_set_font_size");
	lua_pushcfunction(L, _bind_mgl_set_font_size_); lua_setfield(L,-2,"mgl_set_font_size_");
	lua_pushcfunction(L, _bind_mgl_set_rotated_text); lua_setfield(L,-2,"mgl_set_rotated_text");
	lua_pushcfunction(L, _bind_mgl_set_rotated_text_); lua_setfield(L,-2,"mgl_set_rotated_text_");
	lua_pushcfunction(L, _bind_mgl_load_font); lua_setfield(L,-2,"mgl_load_font");
	lua_pushcfunction(L, _bind_mgl_load_font_); lua_setfield(L,-2,"mgl_load_font_");
	lua_pushcfunction(L, _bind_mgl_copy_font); lua_setfield(L,-2,"mgl_copy_font");
	lua_pushcfunction(L, _bind_mgl_copy_font_); lua_setfield(L,-2,"mgl_copy_font_");
	lua_pushcfunction(L, _bind_mgl_restore_font); lua_setfield(L,-2,"mgl_restore_font");
	lua_pushcfunction(L, _bind_mgl_restore_font_); lua_setfield(L,-2,"mgl_restore_font_");
	lua_pushcfunction(L, _bind_mgl_create_graph); lua_setfield(L,-2,"mgl_create_graph");
	lua_pushcfunction(L, _bind_mgl_create_graph_); lua_setfield(L,-2,"mgl_create_graph_");
	lua_pushcfunction(L, _bind_mgl_delete_graph); lua_setfield(L,-2,"mgl_delete_graph");
	lua_pushcfunction(L, _bind_mgl_delete_graph_); lua_setfield(L,-2,"mgl_delete_graph_");
	lua_pushcfunction(L, _bind_mgl_set_size); lua_setfield(L,-2,"mgl_set_size");
	lua_pushcfunction(L, _bind_mgl_set_size_); lua_setfield(L,-2,"mgl_set_size_");
	lua_pushcfunction(L, _bind_mgl_set_def_param); lua_setfield(L,-2,"mgl_set_def_param");
	lua_pushcfunction(L, _bind_mgl_set_def_param_); lua_setfield(L,-2,"mgl_set_def_param_");
	lua_pushcfunction(L, _bind_mgl_set_quality); lua_setfield(L,-2,"mgl_set_quality");
	lua_pushcfunction(L, _bind_mgl_set_quality_); lua_setfield(L,-2,"mgl_set_quality_");
	lua_pushcfunction(L, _bind_mgl_combine_gr); lua_setfield(L,-2,"mgl_combine_gr");
	lua_pushcfunction(L, _bind_mgl_combine_gr_); lua_setfield(L,-2,"mgl_combine_gr_");
	lua_pushcfunction(L, _bind_mgl_finish); lua_setfield(L,-2,"mgl_finish");
	lua_pushcfunction(L, _bind_mgl_finish_); lua_setfield(L,-2,"mgl_finish_");
	lua_pushcfunction(L, _bind_mgl_set_tick_len); lua_setfield(L,-2,"mgl_set_tick_len");
	lua_pushcfunction(L, _bind_mgl_set_tick_len_); lua_setfield(L,-2,"mgl_set_tick_len_");
	lua_pushcfunction(L, _bind_mgl_set_axis_stl); lua_setfield(L,-2,"mgl_set_axis_stl");
	lua_pushcfunction(L, _bind_mgl_set_axis_stl_); lua_setfield(L,-2,"mgl_set_axis_stl_");
	lua_pushcfunction(L, _bind_mgl_adjust_ticks); lua_setfield(L,-2,"mgl_adjust_ticks");
	lua_pushcfunction(L, _bind_mgl_adjust_ticks_); lua_setfield(L,-2,"mgl_adjust_ticks_");
	lua_pushcfunction(L, _bind_mgl_set_ticks); lua_setfield(L,-2,"mgl_set_ticks");
	lua_pushcfunction(L, _bind_mgl_set_ticks_); lua_setfield(L,-2,"mgl_set_ticks_");
	lua_pushcfunction(L, _bind_mgl_set_ticks_str); lua_setfield(L,-2,"mgl_set_ticks_str");
	lua_pushcfunction(L, _bind_mgl_set_ticks_str_); lua_setfield(L,-2,"mgl_set_ticks_str_");
	lua_pushcfunction(L, _bind_mgl_set_ticks_val); lua_setfield(L,-2,"mgl_set_ticks_val");
	lua_pushcfunction(L, _bind_mgl_set_ticks_val_); lua_setfield(L,-2,"mgl_set_ticks_val_");
	lua_pushcfunction(L, _bind_mgl_tune_ticks); lua_setfield(L,-2,"mgl_tune_ticks");
	lua_pushcfunction(L, _bind_mgl_tune_ticks_); lua_setfield(L,-2,"mgl_tune_ticks_");
	lua_pushcfunction(L, _bind_mgl_set_tick_templ); lua_setfield(L,-2,"mgl_set_tick_templ");
	lua_pushcfunction(L, _bind_mgl_set_tick_templ_); lua_setfield(L,-2,"mgl_set_tick_templ_");
	lua_pushcfunction(L, _bind_mgl_set_ticks_time); lua_setfield(L,-2,"mgl_set_ticks_time");
	lua_pushcfunction(L, _bind_mgl_set_ticks_time_); lua_setfield(L,-2,"mgl_set_ticks_time_");
	lua_pushcfunction(L, _bind_mgl_set_tick_shift); lua_setfield(L,-2,"mgl_set_tick_shift");
	lua_pushcfunction(L, _bind_mgl_set_tick_shift_); lua_setfield(L,-2,"mgl_set_tick_shift_");
	lua_pushcfunction(L, _bind_mgl_box); lua_setfield(L,-2,"mgl_box");
	lua_pushcfunction(L, _bind_mgl_box_); lua_setfield(L,-2,"mgl_box_");
	lua_pushcfunction(L, _bind_mgl_box_str); lua_setfield(L,-2,"mgl_box_str");
	lua_pushcfunction(L, _bind_mgl_box_str_); lua_setfield(L,-2,"mgl_box_str_");
	lua_pushcfunction(L, _bind_mgl_axis); lua_setfield(L,-2,"mgl_axis");
	lua_pushcfunction(L, _bind_mgl_axis_); lua_setfield(L,-2,"mgl_axis_");
	lua_pushcfunction(L, _bind_mgl_axis_grid); lua_setfield(L,-2,"mgl_axis_grid");
	lua_pushcfunction(L, _bind_mgl_axis_grid_); lua_setfield(L,-2,"mgl_axis_grid_");
	lua_pushcfunction(L, _bind_mgl_colorbar); lua_setfield(L,-2,"mgl_colorbar");
	lua_pushcfunction(L, _bind_mgl_colorbar_); lua_setfield(L,-2,"mgl_colorbar_");
	lua_pushcfunction(L, _bind_mgl_colorbar_ext); lua_setfield(L,-2,"mgl_colorbar_ext");
	lua_pushcfunction(L, _bind_mgl_colorbar_ext_); lua_setfield(L,-2,"mgl_colorbar_ext_");
	lua_pushcfunction(L, _bind_mgl_colorbar_val); lua_setfield(L,-2,"mgl_colorbar_val");
	lua_pushcfunction(L, _bind_mgl_colorbar_val_); lua_setfield(L,-2,"mgl_colorbar_val_");
	lua_pushcfunction(L, _bind_mgl_colorbar_val_ext); lua_setfield(L,-2,"mgl_colorbar_val_ext");
	lua_pushcfunction(L, _bind_mgl_colorbar_val_ext_); lua_setfield(L,-2,"mgl_colorbar_val_ext_");
	lua_pushcfunction(L, _bind_mgl_add_legend); lua_setfield(L,-2,"mgl_add_legend");
	lua_pushcfunction(L, _bind_mgl_add_legend_); lua_setfield(L,-2,"mgl_add_legend_");
	lua_pushcfunction(L, _bind_mgl_clear_legend); lua_setfield(L,-2,"mgl_clear_legend");
	lua_pushcfunction(L, _bind_mgl_clear_legend_); lua_setfield(L,-2,"mgl_clear_legend_");
	lua_pushcfunction(L, _bind_mgl_legend_pos); lua_setfield(L,-2,"mgl_legend_pos");
	lua_pushcfunction(L, _bind_mgl_legend_pos_); lua_setfield(L,-2,"mgl_legend_pos_");
	lua_pushcfunction(L, _bind_mgl_legend); lua_setfield(L,-2,"mgl_legend");
	lua_pushcfunction(L, _bind_mgl_legend_); lua_setfield(L,-2,"mgl_legend_");
	lua_pushcfunction(L, _bind_mgl_set_legend_marks); lua_setfield(L,-2,"mgl_set_legend_marks");
	lua_pushcfunction(L, _bind_mgl_set_legend_marks_); lua_setfield(L,-2,"mgl_set_legend_marks_");
	lua_pushcfunction(L, _bind_mgl_show_image); lua_setfield(L,-2,"mgl_show_image");
	lua_pushcfunction(L, _bind_mgl_show_image_); lua_setfield(L,-2,"mgl_show_image_");
	lua_pushcfunction(L, _bind_mgl_write_frame); lua_setfield(L,-2,"mgl_write_frame");
	lua_pushcfunction(L, _bind_mgl_write_frame_); lua_setfield(L,-2,"mgl_write_frame_");
	lua_pushcfunction(L, _bind_mgl_write_tga); lua_setfield(L,-2,"mgl_write_tga");
	lua_pushcfunction(L, _bind_mgl_write_tga_); lua_setfield(L,-2,"mgl_write_tga_");
	lua_pushcfunction(L, _bind_mgl_write_bmp); lua_setfield(L,-2,"mgl_write_bmp");
	lua_pushcfunction(L, _bind_mgl_write_bmp_); lua_setfield(L,-2,"mgl_write_bmp_");
	lua_pushcfunction(L, _bind_mgl_write_jpg); lua_setfield(L,-2,"mgl_write_jpg");
	lua_pushcfunction(L, _bind_mgl_write_jpg_); lua_setfield(L,-2,"mgl_write_jpg_");
	lua_pushcfunction(L, _bind_mgl_write_png); lua_setfield(L,-2,"mgl_write_png");
	lua_pushcfunction(L, _bind_mgl_write_png_); lua_setfield(L,-2,"mgl_write_png_");
	lua_pushcfunction(L, _bind_mgl_write_png_solid); lua_setfield(L,-2,"mgl_write_png_solid");
	lua_pushcfunction(L, _bind_mgl_write_png_solid_); lua_setfield(L,-2,"mgl_write_png_solid_");
	lua_pushcfunction(L, _bind_mgl_write_bps); lua_setfield(L,-2,"mgl_write_bps");
	lua_pushcfunction(L, _bind_mgl_write_bps_); lua_setfield(L,-2,"mgl_write_bps_");
	lua_pushcfunction(L, _bind_mgl_write_eps); lua_setfield(L,-2,"mgl_write_eps");
	lua_pushcfunction(L, _bind_mgl_write_eps_); lua_setfield(L,-2,"mgl_write_eps_");
	lua_pushcfunction(L, _bind_mgl_write_svg); lua_setfield(L,-2,"mgl_write_svg");
	lua_pushcfunction(L, _bind_mgl_write_svg_); lua_setfield(L,-2,"mgl_write_svg_");
	lua_pushcfunction(L, _bind_mgl_write_obj); lua_setfield(L,-2,"mgl_write_obj");
	lua_pushcfunction(L, _bind_mgl_write_obj_); lua_setfield(L,-2,"mgl_write_obj_");
	lua_pushcfunction(L, _bind_mgl_write_stl); lua_setfield(L,-2,"mgl_write_stl");
	lua_pushcfunction(L, _bind_mgl_write_stl_); lua_setfield(L,-2,"mgl_write_stl_");
	lua_pushcfunction(L, _bind_mgl_write_off); lua_setfield(L,-2,"mgl_write_off");
	lua_pushcfunction(L, _bind_mgl_write_off_); lua_setfield(L,-2,"mgl_write_off_");
	lua_pushcfunction(L, _bind_mgl_write_xyz); lua_setfield(L,-2,"mgl_write_xyz");
	lua_pushcfunction(L, _bind_mgl_write_xyz_); lua_setfield(L,-2,"mgl_write_xyz_");
	lua_pushcfunction(L, _bind_mgl_write_prc); lua_setfield(L,-2,"mgl_write_prc");
	lua_pushcfunction(L, _bind_mgl_write_prc_); lua_setfield(L,-2,"mgl_write_prc_");
	lua_pushcfunction(L, _bind_mgl_write_gif); lua_setfield(L,-2,"mgl_write_gif");
	lua_pushcfunction(L, _bind_mgl_write_gif_); lua_setfield(L,-2,"mgl_write_gif_");
	lua_pushcfunction(L, _bind_mgl_start_gif); lua_setfield(L,-2,"mgl_start_gif");
	lua_pushcfunction(L, _bind_mgl_start_gif_); lua_setfield(L,-2,"mgl_start_gif_");
	lua_pushcfunction(L, _bind_mgl_close_gif); lua_setfield(L,-2,"mgl_close_gif");
	lua_pushcfunction(L, _bind_mgl_close_gif_); lua_setfield(L,-2,"mgl_close_gif_");
	lua_pushcfunction(L, _bind_mgl_set_plotid); lua_setfield(L,-2,"mgl_set_plotid");
	lua_pushcfunction(L, _bind_mgl_set_plotid_); lua_setfield(L,-2,"mgl_set_plotid_");
	lua_pushcfunction(L, _bind_mgl_export_mgld); lua_setfield(L,-2,"mgl_export_mgld");
	lua_pushcfunction(L, _bind_mgl_export_mgld_); lua_setfield(L,-2,"mgl_export_mgld_");
	lua_pushcfunction(L, _bind_mgl_import_mgld); lua_setfield(L,-2,"mgl_import_mgld");
	lua_pushcfunction(L, _bind_mgl_import_mgld_); lua_setfield(L,-2,"mgl_import_mgld_");
	lua_pushcfunction(L, _bind_mgl_write_json); lua_setfield(L,-2,"mgl_write_json");
	lua_pushcfunction(L, _bind_mgl_write_json_); lua_setfield(L,-2,"mgl_write_json_");
	lua_pushcfunction(L, _bind_mgl_get_rgb); lua_setfield(L,-2,"mgl_get_rgb");
	lua_pushcfunction(L, _bind_mgl_get_rgb_); lua_setfield(L,-2,"mgl_get_rgb_");
	lua_pushcfunction(L, _bind_mgl_get_rgba); lua_setfield(L,-2,"mgl_get_rgba");
	lua_pushcfunction(L, _bind_mgl_get_rgba_); lua_setfield(L,-2,"mgl_get_rgba_");
	lua_pushcfunction(L, _bind_mgl_set_obj_id); lua_setfield(L,-2,"mgl_set_obj_id");
	lua_pushcfunction(L, _bind_mgl_set_obj_id_); lua_setfield(L,-2,"mgl_set_obj_id_");
	lua_pushcfunction(L, _bind_mgl_get_obj_id); lua_setfield(L,-2,"mgl_get_obj_id");
	lua_pushcfunction(L, _bind_mgl_get_obj_id_); lua_setfield(L,-2,"mgl_get_obj_id_");
	lua_pushcfunction(L, _bind_mgl_get_spl_id); lua_setfield(L,-2,"mgl_get_spl_id");
	lua_pushcfunction(L, _bind_mgl_get_spl_id_); lua_setfield(L,-2,"mgl_get_spl_id_");
	lua_pushcfunction(L, _bind_mgl_get_width); lua_setfield(L,-2,"mgl_get_width");
	lua_pushcfunction(L, _bind_mgl_get_width_); lua_setfield(L,-2,"mgl_get_width_");
	lua_pushcfunction(L, _bind_mgl_get_height); lua_setfield(L,-2,"mgl_get_height");
	lua_pushcfunction(L, _bind_mgl_get_height_); lua_setfield(L,-2,"mgl_get_height_");
	lua_pushcfunction(L, _bind_mgl_calc_xyz); lua_setfield(L,-2,"mgl_calc_xyz");
	lua_pushcfunction(L, _bind_mgl_calc_xyz_); lua_setfield(L,-2,"mgl_calc_xyz_");
	lua_pushcfunction(L, _bind_mgl_calc_scr); lua_setfield(L,-2,"mgl_calc_scr");
	lua_pushcfunction(L, _bind_mgl_calc_scr_); lua_setfield(L,-2,"mgl_calc_scr_");
	lua_pushcfunction(L, _bind_mgl_is_active); lua_setfield(L,-2,"mgl_is_active");
	lua_pushcfunction(L, _bind_mgl_is_active_); lua_setfield(L,-2,"mgl_is_active_");
	lua_pushcfunction(L, _bind_mgl_new_frame); lua_setfield(L,-2,"mgl_new_frame");
	lua_pushcfunction(L, _bind_mgl_new_frame_); lua_setfield(L,-2,"mgl_new_frame_");
	lua_pushcfunction(L, _bind_mgl_end_frame); lua_setfield(L,-2,"mgl_end_frame");
	lua_pushcfunction(L, _bind_mgl_end_frame_); lua_setfield(L,-2,"mgl_end_frame_");
	lua_pushcfunction(L, _bind_mgl_get_num_frame); lua_setfield(L,-2,"mgl_get_num_frame");
	lua_pushcfunction(L, _bind_mgl_get_num_frame_); lua_setfield(L,-2,"mgl_get_num_frame_");
	lua_pushcfunction(L, _bind_mgl_reset_frames); lua_setfield(L,-2,"mgl_reset_frames");
	lua_pushcfunction(L, _bind_mgl_reset_frames_); lua_setfield(L,-2,"mgl_reset_frames_");
	lua_pushcfunction(L, _bind_mgl_get_frame); lua_setfield(L,-2,"mgl_get_frame");
	lua_pushcfunction(L, _bind_mgl_get_frame_); lua_setfield(L,-2,"mgl_get_frame_");
	lua_pushcfunction(L, _bind_mgl_set_frame); lua_setfield(L,-2,"mgl_set_frame");
	lua_pushcfunction(L, _bind_mgl_set_frame_); lua_setfield(L,-2,"mgl_set_frame_");
	lua_pushcfunction(L, _bind_mgl_show_frame); lua_setfield(L,-2,"mgl_show_frame");
	lua_pushcfunction(L, _bind_mgl_show_frame_); lua_setfield(L,-2,"mgl_show_frame_");
	lua_pushcfunction(L, _bind_mgl_del_frame); lua_setfield(L,-2,"mgl_del_frame");
	lua_pushcfunction(L, _bind_mgl_del_frame_); lua_setfield(L,-2,"mgl_del_frame_");
	lua_pushcfunction(L, _bind_mgl_set_transp_type); lua_setfield(L,-2,"mgl_set_transp_type");
	lua_pushcfunction(L, _bind_mgl_set_transp_type_); lua_setfield(L,-2,"mgl_set_transp_type_");
	lua_pushcfunction(L, _bind_mgl_set_alpha); lua_setfield(L,-2,"mgl_set_alpha");
	lua_pushcfunction(L, _bind_mgl_set_alpha_); lua_setfield(L,-2,"mgl_set_alpha_");
	lua_pushcfunction(L, _bind_mgl_set_fog); lua_setfield(L,-2,"mgl_set_fog");
	lua_pushcfunction(L, _bind_mgl_set_fog_); lua_setfield(L,-2,"mgl_set_fog_");
	lua_pushcfunction(L, _bind_mgl_set_light); lua_setfield(L,-2,"mgl_set_light");
	lua_pushcfunction(L, _bind_mgl_set_light_); lua_setfield(L,-2,"mgl_set_light_");
	lua_pushcfunction(L, _bind_mgl_set_light_n); lua_setfield(L,-2,"mgl_set_light_n");
	lua_pushcfunction(L, _bind_mgl_set_light_n_); lua_setfield(L,-2,"mgl_set_light_n_");
	lua_pushcfunction(L, _bind_mgl_add_light); lua_setfield(L,-2,"mgl_add_light");
	lua_pushcfunction(L, _bind_mgl_add_light_); lua_setfield(L,-2,"mgl_add_light_");
	lua_pushcfunction(L, _bind_mgl_add_light_ext); lua_setfield(L,-2,"mgl_add_light_ext");
	lua_pushcfunction(L, _bind_mgl_add_light_ext_); lua_setfield(L,-2,"mgl_add_light_ext_");
	lua_pushcfunction(L, _bind_mgl_add_light_loc); lua_setfield(L,-2,"mgl_add_light_loc");
	lua_pushcfunction(L, _bind_mgl_add_light_loc_); lua_setfield(L,-2,"mgl_add_light_loc_");
	lua_pushcfunction(L, _bind_mgl_mat_pop); lua_setfield(L,-2,"mgl_mat_pop");
	lua_pushcfunction(L, _bind_mgl_mat_pop_); lua_setfield(L,-2,"mgl_mat_pop_");
	lua_pushcfunction(L, _bind_mgl_mat_push); lua_setfield(L,-2,"mgl_mat_push");
	lua_pushcfunction(L, _bind_mgl_mat_push_); lua_setfield(L,-2,"mgl_mat_push_");
	lua_pushcfunction(L, _bind_mgl_clf); lua_setfield(L,-2,"mgl_clf");
	lua_pushcfunction(L, _bind_mgl_clf_); lua_setfield(L,-2,"mgl_clf_");
	lua_pushcfunction(L, _bind_mgl_clf_rgb); lua_setfield(L,-2,"mgl_clf_rgb");
	lua_pushcfunction(L, _bind_mgl_clf_rgb_); lua_setfield(L,-2,"mgl_clf_rgb_");
	lua_pushcfunction(L, _bind_mgl_subplot); lua_setfield(L,-2,"mgl_subplot");
	lua_pushcfunction(L, _bind_mgl_subplot_); lua_setfield(L,-2,"mgl_subplot_");
	lua_pushcfunction(L, _bind_mgl_multiplot); lua_setfield(L,-2,"mgl_multiplot");
	lua_pushcfunction(L, _bind_mgl_multiplot_); lua_setfield(L,-2,"mgl_multiplot_");
	lua_pushcfunction(L, _bind_mgl_inplot); lua_setfield(L,-2,"mgl_inplot");
	lua_pushcfunction(L, _bind_mgl_inplot_); lua_setfield(L,-2,"mgl_inplot_");
	lua_pushcfunction(L, _bind_mgl_relplot); lua_setfield(L,-2,"mgl_relplot");
	lua_pushcfunction(L, _bind_mgl_relplot_); lua_setfield(L,-2,"mgl_relplot_");
	lua_pushcfunction(L, _bind_mgl_columnplot); lua_setfield(L,-2,"mgl_columnplot");
	lua_pushcfunction(L, _bind_mgl_columnplot_); lua_setfield(L,-2,"mgl_columnplot_");
	lua_pushcfunction(L, _bind_mgl_stickplot); lua_setfield(L,-2,"mgl_stickplot");
	lua_pushcfunction(L, _bind_mgl_stickplot_); lua_setfield(L,-2,"mgl_stickplot_");
	lua_pushcfunction(L, _bind_mgl_title); lua_setfield(L,-2,"mgl_title");
	lua_pushcfunction(L, _bind_mgl_title_); lua_setfield(L,-2,"mgl_title_");
	lua_pushcfunction(L, _bind_mgl_set_plotfactor); lua_setfield(L,-2,"mgl_set_plotfactor");
	lua_pushcfunction(L, _bind_mgl_set_plotfactor_); lua_setfield(L,-2,"mgl_set_plotfactor_");
	lua_pushcfunction(L, _bind_mgl_aspect); lua_setfield(L,-2,"mgl_aspect");
	lua_pushcfunction(L, _bind_mgl_aspect_); lua_setfield(L,-2,"mgl_aspect_");
	lua_pushcfunction(L, _bind_mgl_rotate); lua_setfield(L,-2,"mgl_rotate");
	lua_pushcfunction(L, _bind_mgl_rotate_); lua_setfield(L,-2,"mgl_rotate_");
	lua_pushcfunction(L, _bind_mgl_rotate_vector); lua_setfield(L,-2,"mgl_rotate_vector");
	lua_pushcfunction(L, _bind_mgl_rotate_vector_); lua_setfield(L,-2,"mgl_rotate_vector_");
	lua_pushcfunction(L, _bind_mgl_perspective); lua_setfield(L,-2,"mgl_perspective");
	lua_pushcfunction(L, _bind_mgl_perspective_); lua_setfield(L,-2,"mgl_perspective_");
	lua_pushcfunction(L, _bind_mgl_view); lua_setfield(L,-2,"mgl_view");
	lua_pushcfunction(L, _bind_mgl_view_); lua_setfield(L,-2,"mgl_view_");
	lua_pushcfunction(L, _bind_mgl_zoom); lua_setfield(L,-2,"mgl_zoom");
	lua_pushcfunction(L, _bind_mgl_zoom_); lua_setfield(L,-2,"mgl_zoom_");
	lua_pushcfunction(L, _bind_mgl_mpi_send); lua_setfield(L,-2,"mgl_mpi_send");
	lua_pushcfunction(L, _bind_mgl_mpi_send_); lua_setfield(L,-2,"mgl_mpi_send_");
	lua_pushcfunction(L, _bind_mgl_mpi_recv); lua_setfield(L,-2,"mgl_mpi_recv");
	lua_pushcfunction(L, _bind_mgl_mpi_recv_); lua_setfield(L,-2,"mgl_mpi_recv_");
	lua_pushcfunction(L, _bind_mgl_draw_thr); lua_setfield(L,-2,"mgl_draw_thr");
	lua_pushcfunction(L, _bind_mgl_wnd_set_delay); lua_setfield(L,-2,"mgl_wnd_set_delay");
	lua_pushcfunction(L, _bind_mgl_wnd_set_delay_); lua_setfield(L,-2,"mgl_wnd_set_delay_");
	lua_pushcfunction(L, _bind_mgl_setup_window); lua_setfield(L,-2,"mgl_setup_window");
	lua_pushcfunction(L, _bind_mgl_setup_window_); lua_setfield(L,-2,"mgl_setup_window_");
	lua_pushcfunction(L, _bind_mgl_wnd_toggle_alpha); lua_setfield(L,-2,"mgl_wnd_toggle_alpha");
	lua_pushcfunction(L, _bind_mgl_wnd_toggle_alpha_); lua_setfield(L,-2,"mgl_wnd_toggle_alpha_");
	lua_pushcfunction(L, _bind_mgl_wnd_toggle_light); lua_setfield(L,-2,"mgl_wnd_toggle_light");
	lua_pushcfunction(L, _bind_mgl_wnd_toggle_light_); lua_setfield(L,-2,"mgl_wnd_toggle_light_");
	lua_pushcfunction(L, _bind_mgl_wnd_toggle_zoom); lua_setfield(L,-2,"mgl_wnd_toggle_zoom");
	lua_pushcfunction(L, _bind_mgl_wnd_toggle_zoom_); lua_setfield(L,-2,"mgl_wnd_toggle_zoom_");
	lua_pushcfunction(L, _bind_mgl_wnd_toggle_rotate); lua_setfield(L,-2,"mgl_wnd_toggle_rotate");
	lua_pushcfunction(L, _bind_mgl_wnd_toggle_rotate_); lua_setfield(L,-2,"mgl_wnd_toggle_rotate_");
	lua_pushcfunction(L, _bind_mgl_wnd_toggle_no); lua_setfield(L,-2,"mgl_wnd_toggle_no");
	lua_pushcfunction(L, _bind_mgl_wnd_toggle_no_); lua_setfield(L,-2,"mgl_wnd_toggle_no_");
	lua_pushcfunction(L, _bind_mgl_wnd_update); lua_setfield(L,-2,"mgl_wnd_update");
	lua_pushcfunction(L, _bind_mgl_wnd_update_); lua_setfield(L,-2,"mgl_wnd_update_");
	lua_pushcfunction(L, _bind_mgl_wnd_reload); lua_setfield(L,-2,"mgl_wnd_reload");
	lua_pushcfunction(L, _bind_mgl_wnd_reload_); lua_setfield(L,-2,"mgl_wnd_reload_");
	lua_pushcfunction(L, _bind_mgl_wnd_adjust); lua_setfield(L,-2,"mgl_wnd_adjust");
	lua_pushcfunction(L, _bind_mgl_wnd_adjust_); lua_setfield(L,-2,"mgl_wnd_adjust_");
	lua_pushcfunction(L, _bind_mgl_wnd_next_frame); lua_setfield(L,-2,"mgl_wnd_next_frame");
	lua_pushcfunction(L, _bind_mgl_wnd_next_frame_); lua_setfield(L,-2,"mgl_wnd_next_frame_");
	lua_pushcfunction(L, _bind_mgl_wnd_prev_frame); lua_setfield(L,-2,"mgl_wnd_prev_frame");
	lua_pushcfunction(L, _bind_mgl_wnd_prev_frame_); lua_setfield(L,-2,"mgl_wnd_prev_frame_");
	lua_pushcfunction(L, _bind_mgl_wnd_animation); lua_setfield(L,-2,"mgl_wnd_animation");
	lua_pushcfunction(L, _bind_mgl_wnd_animation_); lua_setfield(L,-2,"mgl_wnd_animation_");
	lua_pushcfunction(L, _bind_mgl_get_last_mouse_pos); lua_setfield(L,-2,"mgl_get_last_mouse_pos");
	lua_pushcfunction(L, _bind_mgl_get_last_mouse_pos_); lua_setfield(L,-2,"mgl_get_last_mouse_pos_");
	lua_pushcfunction(L, _bind_mgl_create_parser); lua_setfield(L,-2,"mgl_create_parser");
	lua_pushcfunction(L, _bind_mgl_create_parser_); lua_setfield(L,-2,"mgl_create_parser_");
	lua_pushcfunction(L, _bind_mgl_use_parser); lua_setfield(L,-2,"mgl_use_parser");
	lua_pushcfunction(L, _bind_mgl_use_parser_); lua_setfield(L,-2,"mgl_use_parser_");
	lua_pushcfunction(L, _bind_mgl_delete_parser); lua_setfield(L,-2,"mgl_delete_parser");
	lua_pushcfunction(L, _bind_mgl_delete_parser_); lua_setfield(L,-2,"mgl_delete_parser_");
	lua_pushcfunction(L, _bind_mgl_parser_add_param); lua_setfield(L,-2,"mgl_parser_add_param");
	lua_pushcfunction(L, _bind_mgl_parser_add_param_); lua_setfield(L,-2,"mgl_parser_add_param_");
	lua_pushcfunction(L, _bind_mgl_parser_add_var); lua_setfield(L,-2,"mgl_parser_add_var");
	lua_pushcfunction(L, _bind_mgl_parser_add_var_); lua_setfield(L,-2,"mgl_parser_add_var_");
	lua_pushcfunction(L, _bind_mgl_parser_find_var); lua_setfield(L,-2,"mgl_parser_find_var");
	lua_pushcfunction(L, _bind_mgl_parser_find_var_); lua_setfield(L,-2,"mgl_parser_find_var_");
	lua_pushcfunction(L, _bind_mgl_parser_del_all); lua_setfield(L,-2,"mgl_parser_del_all");
	lua_pushcfunction(L, _bind_mgl_parser_del_all_); lua_setfield(L,-2,"mgl_parser_del_all_");
	lua_pushcfunction(L, _bind_mgl_parse_line); lua_setfield(L,-2,"mgl_parse_line");
	lua_pushcfunction(L, _bind_mgl_parse_line_); lua_setfield(L,-2,"mgl_parse_line_");
	lua_pushcfunction(L, _bind_mgl_parse_text); lua_setfield(L,-2,"mgl_parse_text");
	lua_pushcfunction(L, _bind_mgl_parse_text_); lua_setfield(L,-2,"mgl_parse_text_");
	lua_pushcfunction(L, _bind_mgl_parser_restore_once); lua_setfield(L,-2,"mgl_parser_restore_once");
	lua_pushcfunction(L, _bind_mgl_parser_restore_once_); lua_setfield(L,-2,"mgl_parser_restore_once_");
	lua_pushcfunction(L, _bind_mgl_parser_allow_setsize); lua_setfield(L,-2,"mgl_parser_allow_setsize");
	lua_pushcfunction(L, _bind_mgl_parser_allow_setsize_); lua_setfield(L,-2,"mgl_parser_allow_setsize_");
	lua_pushcfunction(L, _bind_mgl_parser_allow_file_io); lua_setfield(L,-2,"mgl_parser_allow_file_io");
	lua_pushcfunction(L, _bind_mgl_parser_allow_file_io_); lua_setfield(L,-2,"mgl_parser_allow_file_io_");
	lua_pushcfunction(L, _bind_mgl_parser_stop); lua_setfield(L,-2,"mgl_parser_stop");
	lua_pushcfunction(L, _bind_mgl_parser_stop_); lua_setfield(L,-2,"mgl_parser_stop_");
	lua_pushcfunction(L, _bind_mgl_parser_cmd_type); lua_setfield(L,-2,"mgl_parser_cmd_type");
	lua_pushcfunction(L, _bind_mgl_parser_cmd_type_); lua_setfield(L,-2,"mgl_parser_cmd_type_");
	lua_pushcfunction(L, _bind_mgl_parser_cmd_desc); lua_setfield(L,-2,"mgl_parser_cmd_desc");
	lua_pushcfunction(L, _bind_mgl_parser_cmd_frmt); lua_setfield(L,-2,"mgl_parser_cmd_frmt");
	lua_pushcfunction(L, _bind_mgl_parser_cmd_name); lua_setfield(L,-2,"mgl_parser_cmd_name");
	lua_pushcfunction(L, _bind_mgl_parser_cmd_num); lua_setfield(L,-2,"mgl_parser_cmd_num");
	lua_pushcfunction(L, _bind_mgl_parser_calc); lua_setfield(L,-2,"mgl_parser_calc");
	lua_pushcfunction(L, _bind_mgl_parser_calc_); lua_setfield(L,-2,"mgl_parser_calc_");
	lua_pushcfunction(L, _bind_mgl_create_expr); lua_setfield(L,-2,"mgl_create_expr");
	lua_pushcfunction(L, _bind_mgl_create_expr_); lua_setfield(L,-2,"mgl_create_expr_");
	lua_pushcfunction(L, _bind_mgl_delete_expr); lua_setfield(L,-2,"mgl_delete_expr");
	lua_pushcfunction(L, _bind_mgl_delete_expr_); lua_setfield(L,-2,"mgl_delete_expr_");
	lua_pushcfunction(L, _bind_mgl_expr_eval); lua_setfield(L,-2,"mgl_expr_eval");
	lua_pushcfunction(L, _bind_mgl_eval_expr_); lua_setfield(L,-2,"mgl_eval_expr_");
	lua_pushcfunction(L, _bind_mgl_expr_eval_v); lua_setfield(L,-2,"mgl_expr_eval_v");
	lua_pushcfunction(L, _bind_mgl_expr_diff); lua_setfield(L,-2,"mgl_expr_diff");
	lua_pushcfunction(L, _bind_mgl_diff_expr_); lua_setfield(L,-2,"mgl_diff_expr_");
	lua_pushcfunction(L, _bind_mgl_expr_diff_v); lua_setfield(L,-2,"mgl_expr_diff_v");
	lua_pushcfunction(L, _bind_mgl_text_xyz); lua_setfield(L,-2,"mgl_text_xyz");
	lua_pushcfunction(L, _bind_mgl_text_xyz_); lua_setfield(L,-2,"mgl_text_xyz_");
	lua_pushcfunction(L, _bind_mgl_text_xy); lua_setfield(L,-2,"mgl_text_xy");
	lua_pushcfunction(L, _bind_mgl_text_xy_); lua_setfield(L,-2,"mgl_text_xy_");
	lua_pushcfunction(L, _bind_mgl_text_y); lua_setfield(L,-2,"mgl_text_y");
	lua_pushcfunction(L, _bind_mgl_text_y_); lua_setfield(L,-2,"mgl_text_y_");
	lua_pushcfunction(L, _bind_mgl_cont_gen); lua_setfield(L,-2,"mgl_cont_gen");
	lua_pushcfunction(L, _bind_mgl_contf_gen); lua_setfield(L,-2,"mgl_contf_gen");
	lua_pushcfunction(L, _bind_mgl_cont_xy_val); lua_setfield(L,-2,"mgl_cont_xy_val");
	lua_pushcfunction(L, _bind_mgl_cont_xy_val_); lua_setfield(L,-2,"mgl_cont_xy_val_");
	lua_pushcfunction(L, _bind_mgl_cont_val); lua_setfield(L,-2,"mgl_cont_val");
	lua_pushcfunction(L, _bind_mgl_cont_val_); lua_setfield(L,-2,"mgl_cont_val_");
	lua_pushcfunction(L, _bind_mgl_cont_xy); lua_setfield(L,-2,"mgl_cont_xy");
	lua_pushcfunction(L, _bind_mgl_cont_xy_); lua_setfield(L,-2,"mgl_cont_xy_");
	lua_pushcfunction(L, _bind_mgl_cont); lua_setfield(L,-2,"mgl_cont");
	lua_pushcfunction(L, _bind_mgl_cont_); lua_setfield(L,-2,"mgl_cont_");
	lua_pushcfunction(L, _bind_mgl_contf_xy_val); lua_setfield(L,-2,"mgl_contf_xy_val");
	lua_pushcfunction(L, _bind_mgl_contf_xy_val_); lua_setfield(L,-2,"mgl_contf_xy_val_");
	lua_pushcfunction(L, _bind_mgl_contf_val); lua_setfield(L,-2,"mgl_contf_val");
	lua_pushcfunction(L, _bind_mgl_contf_val_); lua_setfield(L,-2,"mgl_contf_val_");
	lua_pushcfunction(L, _bind_mgl_contf_xy); lua_setfield(L,-2,"mgl_contf_xy");
	lua_pushcfunction(L, _bind_mgl_contf_xy_); lua_setfield(L,-2,"mgl_contf_xy_");
	lua_pushcfunction(L, _bind_mgl_contf); lua_setfield(L,-2,"mgl_contf");
	lua_pushcfunction(L, _bind_mgl_contf_); lua_setfield(L,-2,"mgl_contf_");
	lua_pushcfunction(L, _bind_mgl_contd_xy_val); lua_setfield(L,-2,"mgl_contd_xy_val");
	lua_pushcfunction(L, _bind_mgl_contd_xy_val_); lua_setfield(L,-2,"mgl_contd_xy_val_");
	lua_pushcfunction(L, _bind_mgl_contd_val); lua_setfield(L,-2,"mgl_contd_val");
	lua_pushcfunction(L, _bind_mgl_contd_val_); lua_setfield(L,-2,"mgl_contd_val_");
	lua_pushcfunction(L, _bind_mgl_contd_xy); lua_setfield(L,-2,"mgl_contd_xy");
	lua_pushcfunction(L, _bind_mgl_contd_xy_); lua_setfield(L,-2,"mgl_contd_xy_");
	lua_pushcfunction(L, _bind_mgl_contd); lua_setfield(L,-2,"mgl_contd");
	lua_pushcfunction(L, _bind_mgl_contd_); lua_setfield(L,-2,"mgl_contd_");
	lua_pushcfunction(L, _bind_mgl_contv_xy_val); lua_setfield(L,-2,"mgl_contv_xy_val");
	lua_pushcfunction(L, _bind_mgl_contv_xy_val_); lua_setfield(L,-2,"mgl_contv_xy_val_");
	lua_pushcfunction(L, _bind_mgl_contv_val); lua_setfield(L,-2,"mgl_contv_val");
	lua_pushcfunction(L, _bind_mgl_contv_val_); lua_setfield(L,-2,"mgl_contv_val_");
	lua_pushcfunction(L, _bind_mgl_contv_xy); lua_setfield(L,-2,"mgl_contv_xy");
	lua_pushcfunction(L, _bind_mgl_contv_xy_); lua_setfield(L,-2,"mgl_contv_xy_");
	lua_pushcfunction(L, _bind_mgl_contv); lua_setfield(L,-2,"mgl_contv");
	lua_pushcfunction(L, _bind_mgl_contv_); lua_setfield(L,-2,"mgl_contv_");
	lua_pushcfunction(L, _bind_mgl_axial_xy_val); lua_setfield(L,-2,"mgl_axial_xy_val");
	lua_pushcfunction(L, _bind_mgl_axial_xy_val_); lua_setfield(L,-2,"mgl_axial_xy_val_");
	lua_pushcfunction(L, _bind_mgl_axial_val); lua_setfield(L,-2,"mgl_axial_val");
	lua_pushcfunction(L, _bind_mgl_axial_val_); lua_setfield(L,-2,"mgl_axial_val_");
	lua_pushcfunction(L, _bind_mgl_axial_xy); lua_setfield(L,-2,"mgl_axial_xy");
	lua_pushcfunction(L, _bind_mgl_axial_xy_); lua_setfield(L,-2,"mgl_axial_xy_");
	lua_pushcfunction(L, _bind_mgl_axial); lua_setfield(L,-2,"mgl_axial");
	lua_pushcfunction(L, _bind_mgl_axial_); lua_setfield(L,-2,"mgl_axial_");
	lua_pushcfunction(L, _bind_mgl_torus); lua_setfield(L,-2,"mgl_torus");
	lua_pushcfunction(L, _bind_mgl_torus_); lua_setfield(L,-2,"mgl_torus_");
	lua_pushcfunction(L, _bind_mgl_grid3_xyz); lua_setfield(L,-2,"mgl_grid3_xyz");
	lua_pushcfunction(L, _bind_mgl_grid3_xyz_); lua_setfield(L,-2,"mgl_grid3_xyz_");
	lua_pushcfunction(L, _bind_mgl_grid3); lua_setfield(L,-2,"mgl_grid3");
	lua_pushcfunction(L, _bind_mgl_grid3_); lua_setfield(L,-2,"mgl_grid3_");
	lua_pushcfunction(L, _bind_mgl_dens3_xyz); lua_setfield(L,-2,"mgl_dens3_xyz");
	lua_pushcfunction(L, _bind_mgl_dens3_xyz_); lua_setfield(L,-2,"mgl_dens3_xyz_");
	lua_pushcfunction(L, _bind_mgl_dens3); lua_setfield(L,-2,"mgl_dens3");
	lua_pushcfunction(L, _bind_mgl_dens3_); lua_setfield(L,-2,"mgl_dens3_");
	lua_pushcfunction(L, _bind_mgl_cont3_xyz_val); lua_setfield(L,-2,"mgl_cont3_xyz_val");
	lua_pushcfunction(L, _bind_mgl_cont3_xyz_val_); lua_setfield(L,-2,"mgl_cont3_xyz_val_");
	lua_pushcfunction(L, _bind_mgl_cont3_val); lua_setfield(L,-2,"mgl_cont3_val");
	lua_pushcfunction(L, _bind_mgl_cont3_val_); lua_setfield(L,-2,"mgl_cont3_val_");
	lua_pushcfunction(L, _bind_mgl_cont3_xyz); lua_setfield(L,-2,"mgl_cont3_xyz");
	lua_pushcfunction(L, _bind_mgl_cont3_xyz_); lua_setfield(L,-2,"mgl_cont3_xyz_");
	lua_pushcfunction(L, _bind_mgl_cont3); lua_setfield(L,-2,"mgl_cont3");
	lua_pushcfunction(L, _bind_mgl_cont3_); lua_setfield(L,-2,"mgl_cont3_");
	lua_pushcfunction(L, _bind_mgl_contf3_xyz_val); lua_setfield(L,-2,"mgl_contf3_xyz_val");
	lua_pushcfunction(L, _bind_mgl_contf3_xyz_val_); lua_setfield(L,-2,"mgl_contf3_xyz_val_");
	lua_pushcfunction(L, _bind_mgl_contf3_val); lua_setfield(L,-2,"mgl_contf3_val");
	lua_pushcfunction(L, _bind_mgl_contf3_val_); lua_setfield(L,-2,"mgl_contf3_val_");
	lua_pushcfunction(L, _bind_mgl_contf3_xyz); lua_setfield(L,-2,"mgl_contf3_xyz");
	lua_pushcfunction(L, _bind_mgl_contf3_xyz_); lua_setfield(L,-2,"mgl_contf3_xyz_");
	lua_pushcfunction(L, _bind_mgl_contf3); lua_setfield(L,-2,"mgl_contf3");
	lua_pushcfunction(L, _bind_mgl_contf3_); lua_setfield(L,-2,"mgl_contf3_");
	lua_pushcfunction(L, _bind_mglLinear); lua_setfield(L,-2,"mglLinear");
	lua_pushcfunction(L, _bind_mglSpline3); lua_setfield(L,-2,"mglSpline3");
	lua_pushcfunction(L, _bind_mglTransformA); lua_setfield(L,-2,"mglTransformA");
	lua_pushcfunction(L, _bind_mglTransform); lua_setfield(L,-2,"mglTransform");
	lua_pushcfunction(L, _bind_mglFourier); lua_setfield(L,-2,"mglFourier");
	lua_pushcfunction(L, _bind_mglSTFA); lua_setfield(L,-2,"mglSTFA");
	lua_pushcfunction(L, _bind_mglPDE); lua_setfield(L,-2,"mglPDE");
	lua_pushcfunction(L, _bind_mglQO2d); lua_setfield(L,-2,"mglQO2d");
	lua_pushcfunction(L, _bind_mglRay); lua_setfield(L,-2,"mglRay");
	lua_pushcfunction(L, _bind_mglJacobian); lua_setfield(L,-2,"mglJacobian");
	lua_pushcfunction(L, _bind_mglTriangulation); lua_setfield(L,-2,"mglTriangulation");
	lua_pushcfunction(L, _bind_mgl_srnd); lua_setfield(L,-2,"mgl_srnd");
	lua_pushcfunction(L, _bind_mgl_rnd); lua_setfield(L,-2,"mgl_rnd");
	lua_pushcfunction(L, _bind_mgl_ipow); lua_setfield(L,-2,"mgl_ipow");
	lua_pushcfunction(L, _bind_mgl_create_data); lua_setfield(L,-2,"mgl_create_data");
	lua_pushcfunction(L, _bind_mgl_create_data_); lua_setfield(L,-2,"mgl_create_data_");
	lua_pushcfunction(L, _bind_mgl_create_data_size); lua_setfield(L,-2,"mgl_create_data_size");
	lua_pushcfunction(L, _bind_mgl_create_data_size_); lua_setfield(L,-2,"mgl_create_data_size_");
	lua_pushcfunction(L, _bind_mgl_create_data_file); lua_setfield(L,-2,"mgl_create_data_file");
	lua_pushcfunction(L, _bind_mgl_create_data_file_); lua_setfield(L,-2,"mgl_create_data_file_");
	lua_pushcfunction(L, _bind_mgl_delete_data); lua_setfield(L,-2,"mgl_delete_data");
	lua_pushcfunction(L, _bind_mgl_delete_data_); lua_setfield(L,-2,"mgl_delete_data_");
	lua_pushcfunction(L, _bind_mgl_data_info); lua_setfield(L,-2,"mgl_data_info");
	lua_pushcfunction(L, _bind_mgl_data_rearrange); lua_setfield(L,-2,"mgl_data_rearrange");
	lua_pushcfunction(L, _bind_mgl_data_rearrange_); lua_setfield(L,-2,"mgl_data_rearrange_");
	lua_pushcfunction(L, _bind_mgl_data_set_float); lua_setfield(L,-2,"mgl_data_set_float");
	lua_pushcfunction(L, _bind_mgl_data_set_float_); lua_setfield(L,-2,"mgl_data_set_float_");
	lua_pushcfunction(L, _bind_mgl_data_set_float1_); lua_setfield(L,-2,"mgl_data_set_float1_");
	lua_pushcfunction(L, _bind_mgl_data_set_double); lua_setfield(L,-2,"mgl_data_set_double");
	lua_pushcfunction(L, _bind_mgl_data_set_double_); lua_setfield(L,-2,"mgl_data_set_double_");
	lua_pushcfunction(L, _bind_mgl_data_set_double1_); lua_setfield(L,-2,"mgl_data_set_double1_");
	lua_pushcfunction(L, _bind_mgl_data_set_float2_); lua_setfield(L,-2,"mgl_data_set_float2_");
	lua_pushcfunction(L, _bind_mgl_data_set_double2_); lua_setfield(L,-2,"mgl_data_set_double2_");
	lua_pushcfunction(L, _bind_mgl_data_set_float3_); lua_setfield(L,-2,"mgl_data_set_float3_");
	lua_pushcfunction(L, _bind_mgl_data_set_double3_); lua_setfield(L,-2,"mgl_data_set_double3_");
	lua_pushcfunction(L, _bind_mgl_data_set); lua_setfield(L,-2,"mgl_data_set");
	lua_pushcfunction(L, _bind_mgl_data_set_); lua_setfield(L,-2,"mgl_data_set_");
	lua_pushcfunction(L, _bind_mgl_data_set_value); lua_setfield(L,-2,"mgl_data_set_value");
	lua_pushcfunction(L, _bind_mgl_data_set_value_); lua_setfield(L,-2,"mgl_data_set_value_");
	lua_pushcfunction(L, _bind_mgl_data_get_value); lua_setfield(L,-2,"mgl_data_get_value");
	lua_pushcfunction(L, _bind_mgl_data_get_value_); lua_setfield(L,-2,"mgl_data_get_value_");
	lua_pushcfunction(L, _bind_mgl_data_set_values); lua_setfield(L,-2,"mgl_data_set_values");
	lua_pushcfunction(L, _bind_mgl_data_set_values_); lua_setfield(L,-2,"mgl_data_set_values_");
	lua_pushcfunction(L, _bind_mgl_data_read_hdf); lua_setfield(L,-2,"mgl_data_read_hdf");
	lua_pushcfunction(L, _bind_mgl_data_read_hdf_); lua_setfield(L,-2,"mgl_data_read_hdf_");
	lua_pushcfunction(L, _bind_mgl_data_save_hdf); lua_setfield(L,-2,"mgl_data_save_hdf");
	lua_pushcfunction(L, _bind_mgl_data_save_hdf_); lua_setfield(L,-2,"mgl_data_save_hdf_");
	lua_pushcfunction(L, _bind_mgl_datas_hdf); lua_setfield(L,-2,"mgl_datas_hdf");
	lua_pushcfunction(L, _bind_mgl_data_read); lua_setfield(L,-2,"mgl_data_read");
	lua_pushcfunction(L, _bind_mgl_data_read_); lua_setfield(L,-2,"mgl_data_read_");
	lua_pushcfunction(L, _bind_mgl_data_read_mat); lua_setfield(L,-2,"mgl_data_read_mat");
	lua_pushcfunction(L, _bind_mgl_data_read_mat_); lua_setfield(L,-2,"mgl_data_read_mat_");
	lua_pushcfunction(L, _bind_mgl_data_read_dim); lua_setfield(L,-2,"mgl_data_read_dim");
	lua_pushcfunction(L, _bind_mgl_data_read_dim_); lua_setfield(L,-2,"mgl_data_read_dim_");
	lua_pushcfunction(L, _bind_mgl_data_read_range); lua_setfield(L,-2,"mgl_data_read_range");
	lua_pushcfunction(L, _bind_mgl_data_read_range_); lua_setfield(L,-2,"mgl_data_read_range_");
	lua_pushcfunction(L, _bind_mgl_data_read_all); lua_setfield(L,-2,"mgl_data_read_all");
	lua_pushcfunction(L, _bind_mgl_data_read_all_); lua_setfield(L,-2,"mgl_data_read_all_");
	lua_pushcfunction(L, _bind_mgl_data_save); lua_setfield(L,-2,"mgl_data_save");
	lua_pushcfunction(L, _bind_mgl_data_save_); lua_setfield(L,-2,"mgl_data_save_");
	lua_pushcfunction(L, _bind_mgl_data_export); lua_setfield(L,-2,"mgl_data_export");
	lua_pushcfunction(L, _bind_mgl_data_export_); lua_setfield(L,-2,"mgl_data_export_");
	lua_pushcfunction(L, _bind_mgl_data_import); lua_setfield(L,-2,"mgl_data_import");
	lua_pushcfunction(L, _bind_mgl_data_import_); lua_setfield(L,-2,"mgl_data_import_");
	lua_pushcfunction(L, _bind_mgl_data_create); lua_setfield(L,-2,"mgl_data_create");
	lua_pushcfunction(L, _bind_mgl_data_create_); lua_setfield(L,-2,"mgl_data_create_");
	lua_pushcfunction(L, _bind_mgl_data_transpose); lua_setfield(L,-2,"mgl_data_transpose");
	lua_pushcfunction(L, _bind_mgl_data_transpose_); lua_setfield(L,-2,"mgl_data_transpose_");
	lua_pushcfunction(L, _bind_mgl_data_norm); lua_setfield(L,-2,"mgl_data_norm");
	lua_pushcfunction(L, _bind_mgl_data_norm_); lua_setfield(L,-2,"mgl_data_norm_");
	lua_pushcfunction(L, _bind_mgl_data_norm_slice); lua_setfield(L,-2,"mgl_data_norm_slice");
	lua_pushcfunction(L, _bind_mgl_data_norm_slice_); lua_setfield(L,-2,"mgl_data_norm_slice_");
	lua_pushcfunction(L, _bind_mgl_data_subdata); lua_setfield(L,-2,"mgl_data_subdata");
	lua_pushcfunction(L, _bind_mgl_data_subdata_); lua_setfield(L,-2,"mgl_data_subdata_");
	lua_pushcfunction(L, _bind_mgl_data_subdata_ext); lua_setfield(L,-2,"mgl_data_subdata_ext");
	lua_pushcfunction(L, _bind_mgl_data_subdata_ext_); lua_setfield(L,-2,"mgl_data_subdata_ext_");
	lua_pushcfunction(L, _bind_mgl_data_column); lua_setfield(L,-2,"mgl_data_column");
	lua_pushcfunction(L, _bind_mgl_data_column_); lua_setfield(L,-2,"mgl_data_column_");
	lua_pushcfunction(L, _bind_mgl_data_set_id); lua_setfield(L,-2,"mgl_data_set_id");
	lua_pushcfunction(L, _bind_mgl_data_set_id_); lua_setfield(L,-2,"mgl_data_set_id_");
	lua_pushcfunction(L, _bind_mgl_data_fill); lua_setfield(L,-2,"mgl_data_fill");
	lua_pushcfunction(L, _bind_mgl_data_fill_); lua_setfield(L,-2,"mgl_data_fill_");
	lua_pushcfunction(L, _bind_mgl_data_fill_eq); lua_setfield(L,-2,"mgl_data_fill_eq");
	lua_pushcfunction(L, _bind_mgl_data_fill_eq_); lua_setfield(L,-2,"mgl_data_fill_eq_");
	lua_pushcfunction(L, _bind_mgl_data_grid); lua_setfield(L,-2,"mgl_data_grid");
	lua_pushcfunction(L, _bind_mgl_data_grid_); lua_setfield(L,-2,"mgl_data_grid_");
	lua_pushcfunction(L, _bind_mgl_data_put_val); lua_setfield(L,-2,"mgl_data_put_val");
	lua_pushcfunction(L, _bind_mgl_data_put_val_); lua_setfield(L,-2,"mgl_data_put_val_");
	lua_pushcfunction(L, _bind_mgl_data_put_dat); lua_setfield(L,-2,"mgl_data_put_dat");
	lua_pushcfunction(L, _bind_mgl_data_put_dat_); lua_setfield(L,-2,"mgl_data_put_dat_");
	lua_pushcfunction(L, _bind_mgl_data_modify); lua_setfield(L,-2,"mgl_data_modify");
	lua_pushcfunction(L, _bind_mgl_data_modify_); lua_setfield(L,-2,"mgl_data_modify_");
	lua_pushcfunction(L, _bind_mgl_data_modify_vw); lua_setfield(L,-2,"mgl_data_modify_vw");
	lua_pushcfunction(L, _bind_mgl_data_modify_vw_); lua_setfield(L,-2,"mgl_data_modify_vw_");
	lua_pushcfunction(L, _bind_mgl_data_squeeze); lua_setfield(L,-2,"mgl_data_squeeze");
	lua_pushcfunction(L, _bind_mgl_data_squeeze_); lua_setfield(L,-2,"mgl_data_squeeze_");
	lua_pushcfunction(L, _bind_mgl_data_max); lua_setfield(L,-2,"mgl_data_max");
	lua_pushcfunction(L, _bind_mgl_data_max_); lua_setfield(L,-2,"mgl_data_max_");
	lua_pushcfunction(L, _bind_mgl_data_min); lua_setfield(L,-2,"mgl_data_min");
	lua_pushcfunction(L, _bind_mgl_data_min_); lua_setfield(L,-2,"mgl_data_min_");
	lua_pushcfunction(L, _bind_mgl_data_value); lua_setfield(L,-2,"mgl_data_value");
	lua_pushcfunction(L, _bind_mgl_data_data); lua_setfield(L,-2,"mgl_data_data");
	lua_pushcfunction(L, _bind_mgl_data_get_nx); lua_setfield(L,-2,"mgl_data_get_nx");
	lua_pushcfunction(L, _bind_mgl_data_get_nx_); lua_setfield(L,-2,"mgl_data_get_nx_");
	lua_pushcfunction(L, _bind_mgl_data_get_ny); lua_setfield(L,-2,"mgl_data_get_ny");
	lua_pushcfunction(L, _bind_mgl_data_get_ny_); lua_setfield(L,-2,"mgl_data_get_ny_");
	lua_pushcfunction(L, _bind_mgl_data_get_nz); lua_setfield(L,-2,"mgl_data_get_nz");
	lua_pushcfunction(L, _bind_mgl_data_get_nz_); lua_setfield(L,-2,"mgl_data_get_nz_");
	lua_pushcfunction(L, _bind_mgl_data_first); lua_setfield(L,-2,"mgl_data_first");
	lua_pushcfunction(L, _bind_mgl_data_first_); lua_setfield(L,-2,"mgl_data_first_");
	lua_pushcfunction(L, _bind_mgl_data_last); lua_setfield(L,-2,"mgl_data_last");
	lua_pushcfunction(L, _bind_mgl_data_last_); lua_setfield(L,-2,"mgl_data_last_");
	lua_pushcfunction(L, _bind_mgl_data_find); lua_setfield(L,-2,"mgl_data_find");
	lua_pushcfunction(L, _bind_mgl_data_find_); lua_setfield(L,-2,"mgl_data_find_");
	lua_pushcfunction(L, _bind_mgl_data_find_any); lua_setfield(L,-2,"mgl_data_find_any");
	lua_pushcfunction(L, _bind_mgl_data_find_any_); lua_setfield(L,-2,"mgl_data_find_any_");
	lua_pushcfunction(L, _bind_mgl_data_max_int); lua_setfield(L,-2,"mgl_data_max_int");
	lua_pushcfunction(L, _bind_mgl_data_max_int_); lua_setfield(L,-2,"mgl_data_max_int_");
	lua_pushcfunction(L, _bind_mgl_data_max_real); lua_setfield(L,-2,"mgl_data_max_real");
	lua_pushcfunction(L, _bind_mgl_data_max_real_); lua_setfield(L,-2,"mgl_data_max_real_");
	lua_pushcfunction(L, _bind_mgl_data_min_int); lua_setfield(L,-2,"mgl_data_min_int");
	lua_pushcfunction(L, _bind_mgl_data_min_int_); lua_setfield(L,-2,"mgl_data_min_int_");
	lua_pushcfunction(L, _bind_mgl_data_min_real); lua_setfield(L,-2,"mgl_data_min_real");
	lua_pushcfunction(L, _bind_mgl_data_min_real_); lua_setfield(L,-2,"mgl_data_min_real_");
	lua_pushcfunction(L, _bind_mgl_data_momentum_val); lua_setfield(L,-2,"mgl_data_momentum_val");
	lua_pushcfunction(L, _bind_mgl_data_momentum_val_); lua_setfield(L,-2,"mgl_data_momentum_val_");
	lua_pushcfunction(L, _bind_mgl_data_combine); lua_setfield(L,-2,"mgl_data_combine");
	lua_pushcfunction(L, _bind_mgl_data_combine_); lua_setfield(L,-2,"mgl_data_combine_");
	lua_pushcfunction(L, _bind_mgl_data_extend); lua_setfield(L,-2,"mgl_data_extend");
	lua_pushcfunction(L, _bind_mgl_data_extend_); lua_setfield(L,-2,"mgl_data_extend_");
	lua_pushcfunction(L, _bind_mgl_data_insert); lua_setfield(L,-2,"mgl_data_insert");
	lua_pushcfunction(L, _bind_mgl_data_insert_); lua_setfield(L,-2,"mgl_data_insert_");
	lua_pushcfunction(L, _bind_mgl_data_delete); lua_setfield(L,-2,"mgl_data_delete");
	lua_pushcfunction(L, _bind_mgl_data_delete_); lua_setfield(L,-2,"mgl_data_delete_");
	lua_pushcfunction(L, _bind_mgl_data_smooth); lua_setfield(L,-2,"mgl_data_smooth");
	lua_pushcfunction(L, _bind_mgl_data_smooth_); lua_setfield(L,-2,"mgl_data_smooth_");
	lua_pushcfunction(L, _bind_mgl_data_sum); lua_setfield(L,-2,"mgl_data_sum");
	lua_pushcfunction(L, _bind_mgl_data_sum_); lua_setfield(L,-2,"mgl_data_sum_");
	lua_pushcfunction(L, _bind_mgl_data_max_dir); lua_setfield(L,-2,"mgl_data_max_dir");
	lua_pushcfunction(L, _bind_mgl_data_max_dir_); lua_setfield(L,-2,"mgl_data_max_dir_");
	lua_pushcfunction(L, _bind_mgl_data_min_dir); lua_setfield(L,-2,"mgl_data_min_dir");
	lua_pushcfunction(L, _bind_mgl_data_min_dir_); lua_setfield(L,-2,"mgl_data_min_dir_");
	lua_pushcfunction(L, _bind_mgl_data_cumsum); lua_setfield(L,-2,"mgl_data_cumsum");
	lua_pushcfunction(L, _bind_mgl_data_cumsum_); lua_setfield(L,-2,"mgl_data_cumsum_");
	lua_pushcfunction(L, _bind_mgl_data_integral); lua_setfield(L,-2,"mgl_data_integral");
	lua_pushcfunction(L, _bind_mgl_data_integral_); lua_setfield(L,-2,"mgl_data_integral_");
	lua_pushcfunction(L, _bind_mgl_data_diff); lua_setfield(L,-2,"mgl_data_diff");
	lua_pushcfunction(L, _bind_mgl_data_diff_); lua_setfield(L,-2,"mgl_data_diff_");
	lua_pushcfunction(L, _bind_mgl_data_diff_par); lua_setfield(L,-2,"mgl_data_diff_par");
	lua_pushcfunction(L, _bind_mgl_data_diff_par_); lua_setfield(L,-2,"mgl_data_diff_par_");
	lua_pushcfunction(L, _bind_mgl_data_diff2); lua_setfield(L,-2,"mgl_data_diff2");
	lua_pushcfunction(L, _bind_mgl_data_diff2_); lua_setfield(L,-2,"mgl_data_diff2_");
	lua_pushcfunction(L, _bind_mgl_data_swap); lua_setfield(L,-2,"mgl_data_swap");
	lua_pushcfunction(L, _bind_mgl_data_swap_); lua_setfield(L,-2,"mgl_data_swap_");
	lua_pushcfunction(L, _bind_mgl_data_roll); lua_setfield(L,-2,"mgl_data_roll");
	lua_pushcfunction(L, _bind_mgl_data_roll_); lua_setfield(L,-2,"mgl_data_roll_");
	lua_pushcfunction(L, _bind_mgl_data_mirror); lua_setfield(L,-2,"mgl_data_mirror");
	lua_pushcfunction(L, _bind_mgl_data_mirror_); lua_setfield(L,-2,"mgl_data_mirror_");
	lua_pushcfunction(L, _bind_mgl_data_sort); lua_setfield(L,-2,"mgl_data_sort");
	lua_pushcfunction(L, _bind_mgl_data_sort_); lua_setfield(L,-2,"mgl_data_sort_");
	lua_pushcfunction(L, _bind_mgl_data_hankel); lua_setfield(L,-2,"mgl_data_hankel");
	lua_pushcfunction(L, _bind_mgl_data_hankel_); lua_setfield(L,-2,"mgl_data_hankel_");
	lua_pushcfunction(L, _bind_mgl_data_sinfft); lua_setfield(L,-2,"mgl_data_sinfft");
	lua_pushcfunction(L, _bind_mgl_data_sinfft_); lua_setfield(L,-2,"mgl_data_sinfft_");
	lua_pushcfunction(L, _bind_mgl_data_cosfft); lua_setfield(L,-2,"mgl_data_cosfft");
	lua_pushcfunction(L, _bind_mgl_data_cosfft_); lua_setfield(L,-2,"mgl_data_cosfft_");
	lua_pushcfunction(L, _bind_mgl_data_fill_sample); lua_setfield(L,-2,"mgl_data_fill_sample");
	lua_pushcfunction(L, _bind_mgl_data_fill_sample_); lua_setfield(L,-2,"mgl_data_fill_sample_");
	lua_pushcfunction(L, _bind_mgl_data_spline); lua_setfield(L,-2,"mgl_data_spline");
	lua_pushcfunction(L, _bind_mgl_data_spline_); lua_setfield(L,-2,"mgl_data_spline_");
	lua_pushcfunction(L, _bind_mgl_data_linear); lua_setfield(L,-2,"mgl_data_linear");
	lua_pushcfunction(L, _bind_mgl_data_linear_); lua_setfield(L,-2,"mgl_data_linear_");
	lua_pushcfunction(L, _bind_mgl_data_spline_ext); lua_setfield(L,-2,"mgl_data_spline_ext");
	lua_pushcfunction(L, _bind_mgl_data_spline_ext_); lua_setfield(L,-2,"mgl_data_spline_ext_");
	lua_pushcfunction(L, _bind_mgl_data_linear_ext); lua_setfield(L,-2,"mgl_data_linear_ext");
	lua_pushcfunction(L, _bind_mgl_data_linear_ext_); lua_setfield(L,-2,"mgl_data_linear_ext_");
	lua_pushcfunction(L, _bind_mgl_data_solve_1d); lua_setfield(L,-2,"mgl_data_solve_1d");
	lua_pushcfunction(L, _bind_mgl_data_solve_1d_); lua_setfield(L,-2,"mgl_data_solve_1d_");
	lua_pushcfunction(L, _bind_mgl_data_solve); lua_setfield(L,-2,"mgl_data_solve");
	lua_pushcfunction(L, _bind_mgl_data_solve_); lua_setfield(L,-2,"mgl_data_solve_");
	lua_pushcfunction(L, _bind_mgl_data_trace); lua_setfield(L,-2,"mgl_data_trace");
	lua_pushcfunction(L, _bind_mgl_data_trace_); lua_setfield(L,-2,"mgl_data_trace_");
	lua_pushcfunction(L, _bind_mgl_data_resize); lua_setfield(L,-2,"mgl_data_resize");
	lua_pushcfunction(L, _bind_mgl_data_resize_); lua_setfield(L,-2,"mgl_data_resize_");
	lua_pushcfunction(L, _bind_mgl_data_resize_box); lua_setfield(L,-2,"mgl_data_resize_box");
	lua_pushcfunction(L, _bind_mgl_data_resize_box_); lua_setfield(L,-2,"mgl_data_resize_box_");
	lua_pushcfunction(L, _bind_mgl_data_hist); lua_setfield(L,-2,"mgl_data_hist");
	lua_pushcfunction(L, _bind_mgl_data_momentum_); lua_setfield(L,-2,"mgl_data_momentum_");
	lua_pushcfunction(L, _bind_mgl_data_hist_w); lua_setfield(L,-2,"mgl_data_hist_w");
	lua_pushcfunction(L, _bind_mgl_data_hist_); lua_setfield(L,-2,"mgl_data_hist_");
	lua_pushcfunction(L, _bind_mgl_data_momentum); lua_setfield(L,-2,"mgl_data_momentum");
	lua_pushcfunction(L, _bind_mgl_data_hist_w_); lua_setfield(L,-2,"mgl_data_hist_w_");
	lua_pushcfunction(L, _bind_mgl_data_evaluate); lua_setfield(L,-2,"mgl_data_evaluate");
	lua_pushcfunction(L, _bind_mgl_data_evaluate_); lua_setfield(L,-2,"mgl_data_evaluate_");
	lua_pushcfunction(L, _bind_mgl_data_envelop); lua_setfield(L,-2,"mgl_data_envelop");
	lua_pushcfunction(L, _bind_mgl_data_envelop_); lua_setfield(L,-2,"mgl_data_envelop_");
	lua_pushcfunction(L, _bind_mgl_data_sew); lua_setfield(L,-2,"mgl_data_sew");
	lua_pushcfunction(L, _bind_mgl_data_sew_); lua_setfield(L,-2,"mgl_data_sew_");
	lua_pushcfunction(L, _bind_mgl_data_crop); lua_setfield(L,-2,"mgl_data_crop");
	lua_pushcfunction(L, _bind_mgl_data_crop_); lua_setfield(L,-2,"mgl_data_crop_");
	lua_pushcfunction(L, _bind_mgl_data_clean); lua_setfield(L,-2,"mgl_data_clean");
	lua_pushcfunction(L, _bind_mgl_data_clean_); lua_setfield(L,-2,"mgl_data_clean_");
	lua_pushcfunction(L, _bind_mgl_data_mul_dat); lua_setfield(L,-2,"mgl_data_mul_dat");
	lua_pushcfunction(L, _bind_mgl_data_mul_dat_); lua_setfield(L,-2,"mgl_data_mul_dat_");
	lua_pushcfunction(L, _bind_mgl_data_div_dat); lua_setfield(L,-2,"mgl_data_div_dat");
	lua_pushcfunction(L, _bind_mgl_data_div_dat_); lua_setfield(L,-2,"mgl_data_div_dat_");
	lua_pushcfunction(L, _bind_mgl_data_add_dat); lua_setfield(L,-2,"mgl_data_add_dat");
	lua_pushcfunction(L, _bind_mgl_data_add_dat_); lua_setfield(L,-2,"mgl_data_add_dat_");
	lua_pushcfunction(L, _bind_mgl_data_sub_dat); lua_setfield(L,-2,"mgl_data_sub_dat");
	lua_pushcfunction(L, _bind_mgl_data_sub_dat_); lua_setfield(L,-2,"mgl_data_sub_dat_");
	lua_pushcfunction(L, _bind_mgl_data_mul_num); lua_setfield(L,-2,"mgl_data_mul_num");
	lua_pushcfunction(L, _bind_mgl_data_mul_num_); lua_setfield(L,-2,"mgl_data_mul_num_");
	lua_pushcfunction(L, _bind_mgl_data_div_num); lua_setfield(L,-2,"mgl_data_div_num");
	lua_pushcfunction(L, _bind_mgl_data_div_num_); lua_setfield(L,-2,"mgl_data_div_num_");
	lua_pushcfunction(L, _bind_mgl_data_add_num); lua_setfield(L,-2,"mgl_data_add_num");
	lua_pushcfunction(L, _bind_mgl_data_add_num_); lua_setfield(L,-2,"mgl_data_add_num_");
	lua_pushcfunction(L, _bind_mgl_data_sub_num); lua_setfield(L,-2,"mgl_data_sub_num");
	lua_pushcfunction(L, _bind_mgl_data_sub_num_); lua_setfield(L,-2,"mgl_data_sub_num_");
	lua_pushcfunction(L, _bind_mgl_pde_solve); lua_setfield(L,-2,"mgl_pde_solve");
	lua_pushcfunction(L, _bind_mgl_pde_solve_); lua_setfield(L,-2,"mgl_pde_solve_");
	lua_pushcfunction(L, _bind_mgl_qo2d_solve); lua_setfield(L,-2,"mgl_qo2d_solve");
	lua_pushcfunction(L, _bind_mgl_qo2d_solve_); lua_setfield(L,-2,"mgl_qo2d_solve_");
	lua_pushcfunction(L, _bind_mgl_ray_trace); lua_setfield(L,-2,"mgl_ray_trace");
	lua_pushcfunction(L, _bind_mgl_ray_trace_); lua_setfield(L,-2,"mgl_ray_trace_");
	lua_pushcfunction(L, _bind_mgl_jacobian_2d); lua_setfield(L,-2,"mgl_jacobian_2d");
	lua_pushcfunction(L, _bind_mgl_jacobian_2d_); lua_setfield(L,-2,"mgl_jacobian_2d_");
	lua_pushcfunction(L, _bind_mgl_jacobian_3d); lua_setfield(L,-2,"mgl_jacobian_3d");
	lua_pushcfunction(L, _bind_mgl_jacobian_3d_); lua_setfield(L,-2,"mgl_jacobian_3d_");
	lua_pushcfunction(L, _bind_mgl_transform_a); lua_setfield(L,-2,"mgl_transform_a");
	lua_pushcfunction(L, _bind_mgl_transform_a_); lua_setfield(L,-2,"mgl_transform_a_");
	lua_pushcfunction(L, _bind_mgl_transform); lua_setfield(L,-2,"mgl_transform");
	lua_pushcfunction(L, _bind_mgl_transform_); lua_setfield(L,-2,"mgl_transform_");
	lua_pushcfunction(L, _bind_mgl_data_fourier); lua_setfield(L,-2,"mgl_data_fourier");
	lua_pushcfunction(L, _bind_mgl_data_fourier_); lua_setfield(L,-2,"mgl_data_fourier_");
	lua_pushcfunction(L, _bind_mgl_data_stfa); lua_setfield(L,-2,"mgl_data_stfa");
	lua_pushcfunction(L, _bind_mgl_data_stfa_); lua_setfield(L,-2,"mgl_data_stfa_");
	lua_pushcfunction(L, _bind_mgl_triangulation_3d); lua_setfield(L,-2,"mgl_triangulation_3d");
	lua_pushcfunction(L, _bind_mgl_triangulation_3d_); lua_setfield(L,-2,"mgl_triangulation_3d_");
	lua_pushcfunction(L, _bind_mgl_triangulation_2d); lua_setfield(L,-2,"mgl_triangulation_2d");
	lua_pushcfunction(L, _bind_mgl_triangulation_2d_); lua_setfield(L,-2,"mgl_triangulation_2d_");
	lua_pushcfunction(L, _bind_mgl_create_datac); lua_setfield(L,-2,"mgl_create_datac");
	lua_pushcfunction(L, _bind_mgl_create_datac_); lua_setfield(L,-2,"mgl_create_datac_");
	lua_pushcfunction(L, _bind_mgl_create_datac_size); lua_setfield(L,-2,"mgl_create_datac_size");
	lua_pushcfunction(L, _bind_mgl_create_datac_size_); lua_setfield(L,-2,"mgl_create_datac_size_");
	lua_pushcfunction(L, _bind_mgl_create_datac_file); lua_setfield(L,-2,"mgl_create_datac_file");
	lua_pushcfunction(L, _bind_mgl_create_datac_file_); lua_setfield(L,-2,"mgl_create_datac_file_");
	lua_pushcfunction(L, _bind_mgl_delete_datac); lua_setfield(L,-2,"mgl_delete_datac");
	lua_pushcfunction(L, _bind_mgl_delete_datac_); lua_setfield(L,-2,"mgl_delete_datac_");
	lua_pushcfunction(L, _bind_mgl_datac_rearrange); lua_setfield(L,-2,"mgl_datac_rearrange");
	lua_pushcfunction(L, _bind_mgl_datac_rearrange_); lua_setfield(L,-2,"mgl_datac_rearrange_");
	lua_pushcfunction(L, _bind_mgl_datac_link); lua_setfield(L,-2,"mgl_datac_link");
	lua_pushcfunction(L, _bind_mgl_datac_link_); lua_setfield(L,-2,"mgl_datac_link_");
	lua_pushcfunction(L, _bind_mgl_datac_set_float); lua_setfield(L,-2,"mgl_datac_set_float");
	lua_pushcfunction(L, _bind_mgl_datac_set_float_); lua_setfield(L,-2,"mgl_datac_set_float_");
	lua_pushcfunction(L, _bind_mgl_datac_set_double); lua_setfield(L,-2,"mgl_datac_set_double");
	lua_pushcfunction(L, _bind_mgl_datac_set_double_); lua_setfield(L,-2,"mgl_datac_set_double_");
	lua_pushcfunction(L, _bind_mgl_datac_set_complex); lua_setfield(L,-2,"mgl_datac_set_complex");
	lua_pushcfunction(L, _bind_mgl_datac_set_complex_); lua_setfield(L,-2,"mgl_datac_set_complex_");
	lua_pushcfunction(L, _bind_mgl_datac_set); lua_setfield(L,-2,"mgl_datac_set");
	lua_pushcfunction(L, _bind_mgl_datac_set_); lua_setfield(L,-2,"mgl_datac_set_");
	lua_pushcfunction(L, _bind_mgl_datac_get_value); lua_setfield(L,-2,"mgl_datac_get_value");
	lua_pushcfunction(L, _bind_mgl_datac_data); lua_setfield(L,-2,"mgl_datac_data");
	lua_pushcfunction(L, _bind_mgl_datac_value); lua_setfield(L,-2,"mgl_datac_value");
	lua_pushcfunction(L, _bind_mgl_datac_set_ri); lua_setfield(L,-2,"mgl_datac_set_ri");
	lua_pushcfunction(L, _bind_mgl_datac_set_ri_); lua_setfield(L,-2,"mgl_datac_set_ri_");
	lua_pushcfunction(L, _bind_mgl_datac_set_ap); lua_setfield(L,-2,"mgl_datac_set_ap");
	lua_pushcfunction(L, _bind_mgl_datac_set_ap_); lua_setfield(L,-2,"mgl_datac_set_ap_");
	lua_pushcfunction(L, _bind_mgl_datac_read); lua_setfield(L,-2,"mgl_datac_read");
	lua_pushcfunction(L, _bind_mgl_datac_read_); lua_setfield(L,-2,"mgl_datac_read_");
	lua_pushcfunction(L, _bind_mgl_datac_read_mat); lua_setfield(L,-2,"mgl_datac_read_mat");
	lua_pushcfunction(L, _bind_mgl_datac_read_mat_); lua_setfield(L,-2,"mgl_datac_read_mat_");
	lua_pushcfunction(L, _bind_mgl_datac_read_dim); lua_setfield(L,-2,"mgl_datac_read_dim");
	lua_pushcfunction(L, _bind_mgl_datac_read_dim_); lua_setfield(L,-2,"mgl_datac_read_dim_");
	lua_pushcfunction(L, _bind_mgl_datac_read_range); lua_setfield(L,-2,"mgl_datac_read_range");
	lua_pushcfunction(L, _bind_mgl_datac_read_all); lua_setfield(L,-2,"mgl_datac_read_all");
	lua_pushcfunction(L, _bind_mgl_datac_save); lua_setfield(L,-2,"mgl_datac_save");
	lua_pushcfunction(L, _bind_mgl_datac_save_); lua_setfield(L,-2,"mgl_datac_save_");
	lua_pushcfunction(L, _bind_mgl_datac_read_hdf); lua_setfield(L,-2,"mgl_datac_read_hdf");
	lua_pushcfunction(L, _bind_mgl_datac_read_hdf_); lua_setfield(L,-2,"mgl_datac_read_hdf_");
	lua_pushcfunction(L, _bind_mgl_datac_save_hdf); lua_setfield(L,-2,"mgl_datac_save_hdf");
	lua_pushcfunction(L, _bind_mgl_datac_save_hdf_); lua_setfield(L,-2,"mgl_datac_save_hdf_");
	lua_pushcfunction(L, _bind_mgl_datac_create); lua_setfield(L,-2,"mgl_datac_create");
	lua_pushcfunction(L, _bind_mgl_datac_create_); lua_setfield(L,-2,"mgl_datac_create_");
	lua_pushcfunction(L, _bind_mgl_datac_transpose); lua_setfield(L,-2,"mgl_datac_transpose");
	lua_pushcfunction(L, _bind_mgl_datac_transpose_); lua_setfield(L,-2,"mgl_datac_transpose_");
	lua_pushcfunction(L, _bind_mgl_datac_set_id); lua_setfield(L,-2,"mgl_datac_set_id");
	lua_pushcfunction(L, _bind_mgl_datac_set_id_); lua_setfield(L,-2,"mgl_datac_set_id_");
	lua_pushcfunction(L, _bind_mgl_datac_modify); lua_setfield(L,-2,"mgl_datac_modify");
	lua_pushcfunction(L, _bind_mgl_datac_modify_); lua_setfield(L,-2,"mgl_datac_modify_");
	lua_pushcfunction(L, _bind_mgl_datac_modify_vw); lua_setfield(L,-2,"mgl_datac_modify_vw");
	lua_pushcfunction(L, _bind_mgl_datac_modify_vw_); lua_setfield(L,-2,"mgl_datac_modify_vw_");
	lua_pushcfunction(L, _bind_mgl_datac_squeeze); lua_setfield(L,-2,"mgl_datac_squeeze");
	lua_pushcfunction(L, _bind_mgl_datac_squeeze_); lua_setfield(L,-2,"mgl_datac_squeeze_");
	lua_pushcfunction(L, _bind_mgl_datac_extend); lua_setfield(L,-2,"mgl_datac_extend");
	lua_pushcfunction(L, _bind_mgl_datac_extend_); lua_setfield(L,-2,"mgl_datac_extend_");
	lua_pushcfunction(L, _bind_mgl_datac_insert); lua_setfield(L,-2,"mgl_datac_insert");
	lua_pushcfunction(L, _bind_mgl_datac_insert_); lua_setfield(L,-2,"mgl_datac_insert_");
	lua_pushcfunction(L, _bind_mgl_datac_delete); lua_setfield(L,-2,"mgl_datac_delete");
	lua_pushcfunction(L, _bind_mgl_datac_delete_); lua_setfield(L,-2,"mgl_datac_delete_");
	lua_pushcfunction(L, _bind_mgl_datac_smooth); lua_setfield(L,-2,"mgl_datac_smooth");
	lua_pushcfunction(L, _bind_mgl_datac_smooth_); lua_setfield(L,-2,"mgl_datac_smooth_");
	lua_pushcfunction(L, _bind_mgl_datac_cumsum); lua_setfield(L,-2,"mgl_datac_cumsum");
	lua_pushcfunction(L, _bind_mgl_datac_cumsum_); lua_setfield(L,-2,"mgl_datac_cumsum_");
	lua_pushcfunction(L, _bind_mgl_datac_integral); lua_setfield(L,-2,"mgl_datac_integral");
	lua_pushcfunction(L, _bind_mgl_datac_integral_); lua_setfield(L,-2,"mgl_datac_integral_");
	lua_pushcfunction(L, _bind_mgl_datac_diff); lua_setfield(L,-2,"mgl_datac_diff");
	lua_pushcfunction(L, _bind_mgl_datac_diff_); lua_setfield(L,-2,"mgl_datac_diff_");
	lua_pushcfunction(L, _bind_mgl_datac_diff2); lua_setfield(L,-2,"mgl_datac_diff2");
	lua_pushcfunction(L, _bind_mgl_datac_diff2_); lua_setfield(L,-2,"mgl_datac_diff2_");
	lua_pushcfunction(L, _bind_mgl_datac_swap); lua_setfield(L,-2,"mgl_datac_swap");
	lua_pushcfunction(L, _bind_mgl_datac_swap_); lua_setfield(L,-2,"mgl_datac_swap_");
	lua_pushcfunction(L, _bind_mgl_datac_roll); lua_setfield(L,-2,"mgl_datac_roll");
	lua_pushcfunction(L, _bind_mgl_datac_roll_); lua_setfield(L,-2,"mgl_datac_roll_");
	lua_pushcfunction(L, _bind_mgl_datac_mirror); lua_setfield(L,-2,"mgl_datac_mirror");
	lua_pushcfunction(L, _bind_mgl_datac_mirror_); lua_setfield(L,-2,"mgl_datac_mirror_");
	lua_pushcfunction(L, _bind_mgl_datac_crop); lua_setfield(L,-2,"mgl_datac_crop");
	lua_pushcfunction(L, _bind_mgl_datac_hankel); lua_setfield(L,-2,"mgl_datac_hankel");
	lua_pushcfunction(L, _bind_mgl_datac_hankel_); lua_setfield(L,-2,"mgl_datac_hankel_");
	lua_pushcfunction(L, _bind_mgl_datac_fft); lua_setfield(L,-2,"mgl_datac_fft");
	lua_pushcfunction(L, _bind_mgl_datac_fft_); lua_setfield(L,-2,"mgl_datac_fft_");
	lua_pushcfunction(L, _bind_mgl_datac_real); lua_setfield(L,-2,"mgl_datac_real");
	lua_pushcfunction(L, _bind_mgl_datac_real_); lua_setfield(L,-2,"mgl_datac_real_");
	lua_pushcfunction(L, _bind_mgl_datac_imag); lua_setfield(L,-2,"mgl_datac_imag");
	lua_pushcfunction(L, _bind_mgl_datac_imag_); lua_setfield(L,-2,"mgl_datac_imag_");
	lua_pushcfunction(L, _bind_mgl_datac_abs); lua_setfield(L,-2,"mgl_datac_abs");
	lua_pushcfunction(L, _bind_mgl_datac_abs_); lua_setfield(L,-2,"mgl_datac_abs_");
	lua_pushcfunction(L, _bind_mgl_datac_arg); lua_setfield(L,-2,"mgl_datac_arg");
	lua_pushcfunction(L, _bind_mgl_datac_arg_); lua_setfield(L,-2,"mgl_datac_arg_");
	lua_pushcfunction(L, _bind_mgl_datac_linear); lua_setfield(L,-2,"mgl_datac_linear");
	lua_pushcfunction(L, _bind_mgl_datac_linear_); lua_setfield(L,-2,"mgl_datac_linear_");
	lua_pushcfunction(L, _bind_mgl_datac_linear_ext); lua_setfield(L,-2,"mgl_datac_linear_ext");
	lua_pushcfunction(L, _bind_mgl_datac_linear_ext_); lua_setfield(L,-2,"mgl_datac_linear_ext_");
	lua_pushcfunction(L, _bind_mglchr); lua_setfield(L,-2,"mglchr");
	lua_pushcfunction(L, _bind_mgl_set_num_thr); lua_setfield(L,-2,"mgl_set_num_thr");
	lua_pushcfunction(L, _bind_mgl_set_test_mode); lua_setfield(L,-2,"mgl_set_test_mode");
	lua_pushcfunction(L, _bind_mgl_strtrim); lua_setfield(L,-2,"mgl_strtrim");
	lua_pushcfunction(L, _bind_mgl_strlwr); lua_setfield(L,-2,"mgl_strlwr");
	lua_pushcfunction(L, _bind_mgl_fit_1); lua_setfield(L,-2,"mgl_fit_1");
	lua_pushcfunction(L, _bind_mgl_fit_2); lua_setfield(L,-2,"mgl_fit_2");
	lua_pushcfunction(L, _bind_mgl_fit_3); lua_setfield(L,-2,"mgl_fit_3");
	lua_pushcfunction(L, _bind_mgl_fit_xy); lua_setfield(L,-2,"mgl_fit_xy");
	lua_pushcfunction(L, _bind_mgl_fit_xyz); lua_setfield(L,-2,"mgl_fit_xyz");
	lua_pushcfunction(L, _bind_mgl_fit_xyza); lua_setfield(L,-2,"mgl_fit_xyza");
	lua_pushcfunction(L, _bind_mgl_fit_ys); lua_setfield(L,-2,"mgl_fit_ys");
	lua_pushcfunction(L, _bind_mgl_fit_xys); lua_setfield(L,-2,"mgl_fit_xys");
	lua_pushcfunction(L, _bind_mgl_fit_xyzs); lua_setfield(L,-2,"mgl_fit_xyzs");
	lua_pushcfunction(L, _bind_mgl_fit_xyzas); lua_setfield(L,-2,"mgl_fit_xyzas");
	lua_pushcfunction(L, _bind_mgl_get_fit); lua_setfield(L,-2,"mgl_get_fit");
	lua_pushcfunction(L, _bind_mgl_hist_x); lua_setfield(L,-2,"mgl_hist_x");
	lua_pushcfunction(L, _bind_mgl_hist_xy); lua_setfield(L,-2,"mgl_hist_xy");
	lua_pushcfunction(L, _bind_mgl_hist_xyz); lua_setfield(L,-2,"mgl_hist_xyz");
	lua_pushcfunction(L, _bind_mgl_puts_fit); lua_setfield(L,-2,"mgl_puts_fit");
	lua_pushcfunction(L, _bind_mgl_fit_1_); lua_setfield(L,-2,"mgl_fit_1_");
	lua_pushcfunction(L, _bind_mgl_fit_2_); lua_setfield(L,-2,"mgl_fit_2_");
	lua_pushcfunction(L, _bind_mgl_fit_3_); lua_setfield(L,-2,"mgl_fit_3_");
	lua_pushcfunction(L, _bind_mgl_fit_xy_); lua_setfield(L,-2,"mgl_fit_xy_");
	lua_pushcfunction(L, _bind_mgl_fit_xyz_); lua_setfield(L,-2,"mgl_fit_xyz_");
	lua_pushcfunction(L, _bind_mgl_fit_xyza_); lua_setfield(L,-2,"mgl_fit_xyza_");
	lua_pushcfunction(L, _bind_mgl_fit_ys_); lua_setfield(L,-2,"mgl_fit_ys_");
	lua_pushcfunction(L, _bind_mgl_fit_xys_); lua_setfield(L,-2,"mgl_fit_xys_");
	lua_pushcfunction(L, _bind_mgl_fit_xyzs_); lua_setfield(L,-2,"mgl_fit_xyzs_");
	lua_pushcfunction(L, _bind_mgl_fit_xyzas_); lua_setfield(L,-2,"mgl_fit_xyzas_");
	lua_pushcfunction(L, _bind_mgl_hist_x_); lua_setfield(L,-2,"mgl_hist_x_");
	lua_pushcfunction(L, _bind_mgl_hist_xy_); lua_setfield(L,-2,"mgl_hist_xy_");
	lua_pushcfunction(L, _bind_mgl_hist_xyz_); lua_setfield(L,-2,"mgl_hist_xyz_");
	lua_pushcfunction(L, _bind_mgl_puts_fit_); lua_setfield(L,-2,"mgl_puts_fit_");
	lua_pushcfunction(L, _bind_mglGetStyle); lua_setfield(L,-2,"mglGetStyle");
	lua_pushcfunction(L, _bind_mgl_create_graph_gl); lua_setfield(L,-2,"mgl_create_graph_gl");
	lua_pushcfunction(L, _bind_mgl_create_graph_gl_); lua_setfield(L,-2,"mgl_create_graph_gl_");
	lua_pushcfunction(L, _bind_mgl_triplot_xyzc); lua_setfield(L,-2,"mgl_triplot_xyzc");
	lua_pushcfunction(L, _bind_mgl_triplot_xyzc_); lua_setfield(L,-2,"mgl_triplot_xyzc_");
	lua_pushcfunction(L, _bind_mgl_triplot_xyz); lua_setfield(L,-2,"mgl_triplot_xyz");
	lua_pushcfunction(L, _bind_mgl_triplot_xyz_); lua_setfield(L,-2,"mgl_triplot_xyz_");
	lua_pushcfunction(L, _bind_mgl_triplot_xy); lua_setfield(L,-2,"mgl_triplot_xy");
	lua_pushcfunction(L, _bind_mgl_triplot_xy_); lua_setfield(L,-2,"mgl_triplot_xy_");
	lua_pushcfunction(L, _bind_mgl_quadplot_xyzc); lua_setfield(L,-2,"mgl_quadplot_xyzc");
	lua_pushcfunction(L, _bind_mgl_quadplot_xyzc_); lua_setfield(L,-2,"mgl_quadplot_xyzc_");
	lua_pushcfunction(L, _bind_mgl_quadplot_xyz); lua_setfield(L,-2,"mgl_quadplot_xyz");
	lua_pushcfunction(L, _bind_mgl_quadplot_xyz_); lua_setfield(L,-2,"mgl_quadplot_xyz_");
	lua_pushcfunction(L, _bind_mgl_quadplot_xy); lua_setfield(L,-2,"mgl_quadplot_xy");
	lua_pushcfunction(L, _bind_mgl_quadplot_xy_); lua_setfield(L,-2,"mgl_quadplot_xy_");
	lua_pushcfunction(L, _bind_mgl_tricont_xyzcv); lua_setfield(L,-2,"mgl_tricont_xyzcv");
	lua_pushcfunction(L, _bind_mgl_tricont_xyzcv_); lua_setfield(L,-2,"mgl_tricont_xyzcv_");
	lua_pushcfunction(L, _bind_mgl_tricont_xycv); lua_setfield(L,-2,"mgl_tricont_xycv");
	lua_pushcfunction(L, _bind_mgl_tricont_xycv_); lua_setfield(L,-2,"mgl_tricont_xycv_");
	lua_pushcfunction(L, _bind_mgl_tricont_xyzc); lua_setfield(L,-2,"mgl_tricont_xyzc");
	lua_pushcfunction(L, _bind_mgl_tricont_xyzc_); lua_setfield(L,-2,"mgl_tricont_xyzc_");
	lua_pushcfunction(L, _bind_mgl_tricont_xyc); lua_setfield(L,-2,"mgl_tricont_xyc");
	lua_pushcfunction(L, _bind_mgl_tricont_xyc_); lua_setfield(L,-2,"mgl_tricont_xyc_");
	lua_pushcfunction(L, _bind_mgl_dots); lua_setfield(L,-2,"mgl_dots");
	lua_pushcfunction(L, _bind_mgl_dots_); lua_setfield(L,-2,"mgl_dots_");
	lua_pushcfunction(L, _bind_mgl_dots_a); lua_setfield(L,-2,"mgl_dots_a");
	lua_pushcfunction(L, _bind_mgl_dots_a_); lua_setfield(L,-2,"mgl_dots_a_");
	lua_pushcfunction(L, _bind_mgl_crust); lua_setfield(L,-2,"mgl_crust");
	lua_pushcfunction(L, _bind_mgl_crust_); lua_setfield(L,-2,"mgl_crust_");
	lua_pushcfunction(L, _bind_mgl_dens_x); lua_setfield(L,-2,"mgl_dens_x");
	lua_pushcfunction(L, _bind_mgl_dens_x_); lua_setfield(L,-2,"mgl_dens_x_");
	lua_pushcfunction(L, _bind_mgl_dens_y); lua_setfield(L,-2,"mgl_dens_y");
	lua_pushcfunction(L, _bind_mgl_dens_y_); lua_setfield(L,-2,"mgl_dens_y_");
	lua_pushcfunction(L, _bind_mgl_dens_z); lua_setfield(L,-2,"mgl_dens_z");
	lua_pushcfunction(L, _bind_mgl_dens_z_); lua_setfield(L,-2,"mgl_dens_z_");
	lua_pushcfunction(L, _bind_mgl_cont_x); lua_setfield(L,-2,"mgl_cont_x");
	lua_pushcfunction(L, _bind_mgl_cont_x_); lua_setfield(L,-2,"mgl_cont_x_");
	lua_pushcfunction(L, _bind_mgl_cont_y); lua_setfield(L,-2,"mgl_cont_y");
	lua_pushcfunction(L, _bind_mgl_cont_y_); lua_setfield(L,-2,"mgl_cont_y_");
	lua_pushcfunction(L, _bind_mgl_cont_z); lua_setfield(L,-2,"mgl_cont_z");
	lua_pushcfunction(L, _bind_mgl_cont_z_); lua_setfield(L,-2,"mgl_cont_z_");
	lua_pushcfunction(L, _bind_mgl_cont_x_val); lua_setfield(L,-2,"mgl_cont_x_val");
	lua_pushcfunction(L, _bind_mgl_cont_x_val_); lua_setfield(L,-2,"mgl_cont_x_val_");
	lua_pushcfunction(L, _bind_mgl_cont_y_val); lua_setfield(L,-2,"mgl_cont_y_val");
	lua_pushcfunction(L, _bind_mgl_cont_y_val_); lua_setfield(L,-2,"mgl_cont_y_val_");
	lua_pushcfunction(L, _bind_mgl_cont_z_val); lua_setfield(L,-2,"mgl_cont_z_val");
	lua_pushcfunction(L, _bind_mgl_cont_z_val_); lua_setfield(L,-2,"mgl_cont_z_val_");
	lua_pushcfunction(L, _bind_mgl_contf_x); lua_setfield(L,-2,"mgl_contf_x");
	lua_pushcfunction(L, _bind_mgl_contf_x_); lua_setfield(L,-2,"mgl_contf_x_");
	lua_pushcfunction(L, _bind_mgl_contf_y); lua_setfield(L,-2,"mgl_contf_y");
	lua_pushcfunction(L, _bind_mgl_contf_y_); lua_setfield(L,-2,"mgl_contf_y_");
	lua_pushcfunction(L, _bind_mgl_contf_z); lua_setfield(L,-2,"mgl_contf_z");
	lua_pushcfunction(L, _bind_mgl_contf_z_); lua_setfield(L,-2,"mgl_contf_z_");
	lua_pushcfunction(L, _bind_mgl_contf_x_val); lua_setfield(L,-2,"mgl_contf_x_val");
	lua_pushcfunction(L, _bind_mgl_contf_x_val_); lua_setfield(L,-2,"mgl_contf_x_val_");
	lua_pushcfunction(L, _bind_mgl_contf_y_val); lua_setfield(L,-2,"mgl_contf_y_val");
	lua_pushcfunction(L, _bind_mgl_contf_y_val_); lua_setfield(L,-2,"mgl_contf_y_val_");
	lua_pushcfunction(L, _bind_mgl_contf_z_val); lua_setfield(L,-2,"mgl_contf_z_val");
	lua_pushcfunction(L, _bind_mgl_contf_z_val_); lua_setfield(L,-2,"mgl_contf_z_val_");
	lua_pushcfunction(L, _bind_mgl_fplot); lua_setfield(L,-2,"mgl_fplot");
	lua_pushcfunction(L, _bind_mgl_fplot_); lua_setfield(L,-2,"mgl_fplot_");
	lua_pushcfunction(L, _bind_mgl_fplot_xyz); lua_setfield(L,-2,"mgl_fplot_xyz");
	lua_pushcfunction(L, _bind_mgl_fplot_xyz_); lua_setfield(L,-2,"mgl_fplot_xyz_");
	lua_pushcfunction(L, _bind_mgl_radar); lua_setfield(L,-2,"mgl_radar");
	lua_pushcfunction(L, _bind_mgl_radar_); lua_setfield(L,-2,"mgl_radar_");
	lua_pushcfunction(L, _bind_mgl_plot_xyz); lua_setfield(L,-2,"mgl_plot_xyz");
	lua_pushcfunction(L, _bind_mgl_plot_xyz_); lua_setfield(L,-2,"mgl_plot_xyz_");
	lua_pushcfunction(L, _bind_mgl_plot_xy); lua_setfield(L,-2,"mgl_plot_xy");
	lua_pushcfunction(L, _bind_mgl_plot_xy_); lua_setfield(L,-2,"mgl_plot_xy_");
	lua_pushcfunction(L, _bind_mgl_plot); lua_setfield(L,-2,"mgl_plot");
	lua_pushcfunction(L, _bind_mgl_plot_); lua_setfield(L,-2,"mgl_plot_");
	lua_pushcfunction(L, _bind_mgl_tens_xyz); lua_setfield(L,-2,"mgl_tens_xyz");
	lua_pushcfunction(L, _bind_mgl_tens_xyz_); lua_setfield(L,-2,"mgl_tens_xyz_");
	lua_pushcfunction(L, _bind_mgl_tens_xy); lua_setfield(L,-2,"mgl_tens_xy");
	lua_pushcfunction(L, _bind_mgl_tens_xy_); lua_setfield(L,-2,"mgl_tens_xy_");
	lua_pushcfunction(L, _bind_mgl_tens); lua_setfield(L,-2,"mgl_tens");
	lua_pushcfunction(L, _bind_mgl_tens_); lua_setfield(L,-2,"mgl_tens_");
	lua_pushcfunction(L, _bind_mgl_tape_xyz); lua_setfield(L,-2,"mgl_tape_xyz");
	lua_pushcfunction(L, _bind_mgl_tape_xyz_); lua_setfield(L,-2,"mgl_tape_xyz_");
	lua_pushcfunction(L, _bind_mgl_tape_xy); lua_setfield(L,-2,"mgl_tape_xy");
	lua_pushcfunction(L, _bind_mgl_tape_xy_); lua_setfield(L,-2,"mgl_tape_xy_");
	lua_pushcfunction(L, _bind_mgl_tape); lua_setfield(L,-2,"mgl_tape");
	lua_pushcfunction(L, _bind_mgl_tape_); lua_setfield(L,-2,"mgl_tape_");
	lua_pushcfunction(L, _bind_mgl_boxplot_xy); lua_setfield(L,-2,"mgl_boxplot_xy");
	lua_pushcfunction(L, _bind_mgl_boxplot_xy_); lua_setfield(L,-2,"mgl_boxplot_xy_");
	lua_pushcfunction(L, _bind_mgl_boxplot); lua_setfield(L,-2,"mgl_boxplot");
	lua_pushcfunction(L, _bind_mgl_boxplot_); lua_setfield(L,-2,"mgl_boxplot_");
	lua_pushcfunction(L, _bind_mgl_area_xyz); lua_setfield(L,-2,"mgl_area_xyz");
	lua_pushcfunction(L, _bind_mgl_area_xyz_); lua_setfield(L,-2,"mgl_area_xyz_");
	lua_pushcfunction(L, _bind_mgl_area_xy); lua_setfield(L,-2,"mgl_area_xy");
	lua_pushcfunction(L, _bind_mgl_area_xy_); lua_setfield(L,-2,"mgl_area_xy_");
	lua_pushcfunction(L, _bind_mgl_area); lua_setfield(L,-2,"mgl_area");
	lua_pushcfunction(L, _bind_mgl_area_); lua_setfield(L,-2,"mgl_area_");
	lua_pushcfunction(L, _bind_mgl_region_xy); lua_setfield(L,-2,"mgl_region_xy");
	lua_pushcfunction(L, _bind_mgl_region_xy_); lua_setfield(L,-2,"mgl_region_xy_");
	lua_pushcfunction(L, _bind_mgl_region); lua_setfield(L,-2,"mgl_region");
	lua_pushcfunction(L, _bind_mgl_region_); lua_setfield(L,-2,"mgl_region_");
	lua_pushcfunction(L, _bind_mgl_stem_xyz); lua_setfield(L,-2,"mgl_stem_xyz");
	lua_pushcfunction(L, _bind_mgl_stem_xyz_); lua_setfield(L,-2,"mgl_stem_xyz_");
	lua_pushcfunction(L, _bind_mgl_stem_xy); lua_setfield(L,-2,"mgl_stem_xy");
	lua_pushcfunction(L, _bind_mgl_stem_xy_); lua_setfield(L,-2,"mgl_stem_xy_");
	lua_pushcfunction(L, _bind_mgl_stem); lua_setfield(L,-2,"mgl_stem");
	lua_pushcfunction(L, _bind_mgl_stem_); lua_setfield(L,-2,"mgl_stem_");
	lua_pushcfunction(L, _bind_mgl_step_xyz); lua_setfield(L,-2,"mgl_step_xyz");
	lua_pushcfunction(L, _bind_mgl_step_xyz_); lua_setfield(L,-2,"mgl_step_xyz_");
	lua_pushcfunction(L, _bind_mgl_step_xy); lua_setfield(L,-2,"mgl_step_xy");
	lua_pushcfunction(L, _bind_mgl_step_xy_); lua_setfield(L,-2,"mgl_step_xy_");
	lua_pushcfunction(L, _bind_mgl_step); lua_setfield(L,-2,"mgl_step");
	lua_pushcfunction(L, _bind_mgl_step_); lua_setfield(L,-2,"mgl_step_");
	lua_pushcfunction(L, _bind_mgl_bars_xyz); lua_setfield(L,-2,"mgl_bars_xyz");
	lua_pushcfunction(L, _bind_mgl_bars_xyz_); lua_setfield(L,-2,"mgl_bars_xyz_");
	lua_pushcfunction(L, _bind_mgl_bars_xy); lua_setfield(L,-2,"mgl_bars_xy");
	lua_pushcfunction(L, _bind_mgl_bars_xy_); lua_setfield(L,-2,"mgl_bars_xy_");
	lua_pushcfunction(L, _bind_mgl_bars); lua_setfield(L,-2,"mgl_bars");
	lua_pushcfunction(L, _bind_mgl_bars_); lua_setfield(L,-2,"mgl_bars_");
	lua_pushcfunction(L, _bind_mgl_barh_yx); lua_setfield(L,-2,"mgl_barh_yx");
	lua_pushcfunction(L, _bind_mgl_barh_yx_); lua_setfield(L,-2,"mgl_barh_yx_");
	lua_pushcfunction(L, _bind_mgl_barh); lua_setfield(L,-2,"mgl_barh");
	lua_pushcfunction(L, _bind_mgl_barh_); lua_setfield(L,-2,"mgl_barh_");
	lua_pushcfunction(L, _bind_mgl_chart); lua_setfield(L,-2,"mgl_chart");
	lua_pushcfunction(L, _bind_mgl_chart_); lua_setfield(L,-2,"mgl_chart_");
	lua_pushcfunction(L, _bind_mgl_error_exy); lua_setfield(L,-2,"mgl_error_exy");
	lua_pushcfunction(L, _bind_mgl_error_exy_); lua_setfield(L,-2,"mgl_error_exy_");
	lua_pushcfunction(L, _bind_mgl_error_xy); lua_setfield(L,-2,"mgl_error_xy");
	lua_pushcfunction(L, _bind_mgl_error_xy_); lua_setfield(L,-2,"mgl_error_xy_");
	lua_pushcfunction(L, _bind_mgl_error); lua_setfield(L,-2,"mgl_error");
	lua_pushcfunction(L, _bind_mgl_error_); lua_setfield(L,-2,"mgl_error_");
	lua_pushcfunction(L, _bind_mgl_mark_xyz); lua_setfield(L,-2,"mgl_mark_xyz");
	lua_pushcfunction(L, _bind_mgl_mark_xyz_); lua_setfield(L,-2,"mgl_mark_xyz_");
	lua_pushcfunction(L, _bind_mgl_mark_xy); lua_setfield(L,-2,"mgl_mark_xy");
	lua_pushcfunction(L, _bind_mgl_mark_xy_); lua_setfield(L,-2,"mgl_mark_xy_");
	lua_pushcfunction(L, _bind_mgl_mark_y); lua_setfield(L,-2,"mgl_mark_y");
	lua_pushcfunction(L, _bind_mgl_mark_y_); lua_setfield(L,-2,"mgl_mark_y_");
	lua_pushcfunction(L, _bind_mgl_tube_xyzr); lua_setfield(L,-2,"mgl_tube_xyzr");
	lua_pushcfunction(L, _bind_mgl_tube_xyzr_); lua_setfield(L,-2,"mgl_tube_xyzr_");
	lua_pushcfunction(L, _bind_mgl_tube_xyr); lua_setfield(L,-2,"mgl_tube_xyr");
	lua_pushcfunction(L, _bind_mgl_tube_xyr_); lua_setfield(L,-2,"mgl_tube_xyr_");
	lua_pushcfunction(L, _bind_mgl_tube_r); lua_setfield(L,-2,"mgl_tube_r");
	lua_pushcfunction(L, _bind_mgl_tube_r_); lua_setfield(L,-2,"mgl_tube_r_");
	lua_pushcfunction(L, _bind_mgl_tube_xyz); lua_setfield(L,-2,"mgl_tube_xyz");
	lua_pushcfunction(L, _bind_mgl_tube_xyz_); lua_setfield(L,-2,"mgl_tube_xyz_");
	lua_pushcfunction(L, _bind_mgl_tube_xy); lua_setfield(L,-2,"mgl_tube_xy");
	lua_pushcfunction(L, _bind_mgl_tube_xy_); lua_setfield(L,-2,"mgl_tube_xy_");
	lua_pushcfunction(L, _bind_mgl_tube); lua_setfield(L,-2,"mgl_tube");
	lua_pushcfunction(L, _bind_mgl_tube_); lua_setfield(L,-2,"mgl_tube_");
	lua_pushcfunction(L, _bind_mgl_candle_xyv); lua_setfield(L,-2,"mgl_candle_xyv");
	lua_pushcfunction(L, _bind_mgl_candle_xyv_); lua_setfield(L,-2,"mgl_candle_xyv_");
	lua_pushcfunction(L, _bind_mgl_candle_yv); lua_setfield(L,-2,"mgl_candle_yv");
	lua_pushcfunction(L, _bind_mgl_candle_yv_); lua_setfield(L,-2,"mgl_candle_yv_");
	lua_pushcfunction(L, _bind_mgl_candle); lua_setfield(L,-2,"mgl_candle");
	lua_pushcfunction(L, _bind_mgl_candle_); lua_setfield(L,-2,"mgl_candle_");
	lua_pushcfunction(L, _bind_mgl_mark); lua_setfield(L,-2,"mgl_mark");
	lua_pushcfunction(L, _bind_mgl_mark_); lua_setfield(L,-2,"mgl_mark_");
	lua_pushcfunction(L, _bind_mgl_ball); lua_setfield(L,-2,"mgl_ball");
	lua_pushcfunction(L, _bind_mgl_ball_); lua_setfield(L,-2,"mgl_ball_");
	lua_pushcfunction(L, _bind_mgl_line); lua_setfield(L,-2,"mgl_line");
	lua_pushcfunction(L, _bind_mgl_line_); lua_setfield(L,-2,"mgl_line_");
	lua_pushcfunction(L, _bind_mgl_curve); lua_setfield(L,-2,"mgl_curve");
	lua_pushcfunction(L, _bind_mgl_curve_); lua_setfield(L,-2,"mgl_curve_");
	lua_pushcfunction(L, _bind_mgl_error_box); lua_setfield(L,-2,"mgl_error_box");
	lua_pushcfunction(L, _bind_mgl_error_box_); lua_setfield(L,-2,"mgl_error_box_");
	lua_pushcfunction(L, _bind_mgl_face); lua_setfield(L,-2,"mgl_face");
	lua_pushcfunction(L, _bind_mgl_face_); lua_setfield(L,-2,"mgl_face_");
	lua_pushcfunction(L, _bind_mgl_facex); lua_setfield(L,-2,"mgl_facex");
	lua_pushcfunction(L, _bind_mgl_facex_); lua_setfield(L,-2,"mgl_facex_");
	lua_pushcfunction(L, _bind_mgl_facey); lua_setfield(L,-2,"mgl_facey");
	lua_pushcfunction(L, _bind_mgl_facey_); lua_setfield(L,-2,"mgl_facey_");
	lua_pushcfunction(L, _bind_mgl_facez); lua_setfield(L,-2,"mgl_facez");
	lua_pushcfunction(L, _bind_mgl_facez_); lua_setfield(L,-2,"mgl_facez_");
	lua_pushcfunction(L, _bind_mgl_sphere); lua_setfield(L,-2,"mgl_sphere");
	lua_pushcfunction(L, _bind_mgl_sphere_); lua_setfield(L,-2,"mgl_sphere_");
	lua_pushcfunction(L, _bind_mgl_drop); lua_setfield(L,-2,"mgl_drop");
	lua_pushcfunction(L, _bind_mgl_drop_); lua_setfield(L,-2,"mgl_drop_");
	lua_pushcfunction(L, _bind_mgl_cone); lua_setfield(L,-2,"mgl_cone");
	lua_pushcfunction(L, _bind_mgl_cone_); lua_setfield(L,-2,"mgl_cone_");
	lua_pushcfunction(L, _bind_mgl_ellipse); lua_setfield(L,-2,"mgl_ellipse");
	lua_pushcfunction(L, _bind_mgl_ellipse_); lua_setfield(L,-2,"mgl_ellipse_");
	lua_pushcfunction(L, _bind_mgl_rhomb); lua_setfield(L,-2,"mgl_rhomb");
	lua_pushcfunction(L, _bind_mgl_rhomb_); lua_setfield(L,-2,"mgl_rhomb_");
	lua_pushcfunction(L, _bind_mgl_cones_xyz); lua_setfield(L,-2,"mgl_cones_xyz");
	lua_pushcfunction(L, _bind_mgl_cones_xyz_); lua_setfield(L,-2,"mgl_cones_xyz_");
	lua_pushcfunction(L, _bind_mgl_cones_xz); lua_setfield(L,-2,"mgl_cones_xz");
	lua_pushcfunction(L, _bind_mgl_cones); lua_setfield(L,-2,"mgl_cones");
	lua_pushcfunction(L, _bind_mgl_cones_); lua_setfield(L,-2,"mgl_cones_");
	lua_pushcfunction(L, _bind_mgl_dew_xy); lua_setfield(L,-2,"mgl_dew_xy");
	lua_pushcfunction(L, _bind_mgl_dew_xy_); lua_setfield(L,-2,"mgl_dew_xy_");
	lua_pushcfunction(L, _bind_mgl_dew_2d); lua_setfield(L,-2,"mgl_dew_2d");
	lua_pushcfunction(L, _bind_mgl_dew_2d_); lua_setfield(L,-2,"mgl_dew_2d_");
	lua_pushcfunction(L, _bind_mgl_puts); lua_setfield(L,-2,"mgl_puts");
	lua_pushcfunction(L, _bind_mgl_puts_); lua_setfield(L,-2,"mgl_puts_");
	lua_pushcfunction(L, _bind_mgl_puts_dir); lua_setfield(L,-2,"mgl_puts_dir");
	lua_pushcfunction(L, _bind_mgl_puts_dir_); lua_setfield(L,-2,"mgl_puts_dir_");
	lua_pushcfunction(L, _bind_mgl_textmark_xyzr); lua_setfield(L,-2,"mgl_textmark_xyzr");
	lua_pushcfunction(L, _bind_mgl_textmark_xyzr_); lua_setfield(L,-2,"mgl_textmark_xyzr_");
	lua_pushcfunction(L, _bind_mgl_textmark_xyr); lua_setfield(L,-2,"mgl_textmark_xyr");
	lua_pushcfunction(L, _bind_mgl_textmark_xyr_); lua_setfield(L,-2,"mgl_textmark_xyr_");
	lua_pushcfunction(L, _bind_mgl_textmark_yr); lua_setfield(L,-2,"mgl_textmark_yr");
	lua_pushcfunction(L, _bind_mgl_textmark_yr_); lua_setfield(L,-2,"mgl_textmark_yr_");
	lua_pushcfunction(L, _bind_mgl_textmark); lua_setfield(L,-2,"mgl_textmark");
	lua_pushcfunction(L, _bind_mgl_textmark_); lua_setfield(L,-2,"mgl_textmark_");
	lua_pushcfunction(L, _bind_mgl_table); lua_setfield(L,-2,"mgl_table");
	lua_pushcfunction(L, _bind_mgl_table_); lua_setfield(L,-2,"mgl_table_");
	lua_pushcfunction(L, _bind_mgl_fsurf); lua_setfield(L,-2,"mgl_fsurf");
	lua_pushcfunction(L, _bind_mgl_fsurf_); lua_setfield(L,-2,"mgl_fsurf_");
	lua_pushcfunction(L, _bind_mgl_fsurf_xyz); lua_setfield(L,-2,"mgl_fsurf_xyz");
	lua_pushcfunction(L, _bind_mgl_fsurf_xyz_); lua_setfield(L,-2,"mgl_fsurf_xyz_");
	lua_pushcfunction(L, _bind_mgl_grid_xy); lua_setfield(L,-2,"mgl_grid_xy");
	lua_pushcfunction(L, _bind_mgl_grid_xy_); lua_setfield(L,-2,"mgl_grid_xy_");
	lua_pushcfunction(L, _bind_mgl_grid); lua_setfield(L,-2,"mgl_grid");
	lua_pushcfunction(L, _bind_mgl_grid_); lua_setfield(L,-2,"mgl_grid_");
	lua_pushcfunction(L, _bind_mgl_mesh_xy); lua_setfield(L,-2,"mgl_mesh_xy");
	lua_pushcfunction(L, _bind_mgl_mesh_xy_); lua_setfield(L,-2,"mgl_mesh_xy_");
	lua_pushcfunction(L, _bind_mgl_mesh); lua_setfield(L,-2,"mgl_mesh");
	lua_pushcfunction(L, _bind_mgl_mesh_); lua_setfield(L,-2,"mgl_mesh_");
	lua_pushcfunction(L, _bind_mgl_fall_xy); lua_setfield(L,-2,"mgl_fall_xy");
	lua_pushcfunction(L, _bind_mgl_fall_xy_); lua_setfield(L,-2,"mgl_fall_xy_");
	lua_pushcfunction(L, _bind_mgl_fall); lua_setfield(L,-2,"mgl_fall");
	lua_pushcfunction(L, _bind_mgl_fall_); lua_setfield(L,-2,"mgl_fall_");
	lua_pushcfunction(L, _bind_mgl_belt_xy); lua_setfield(L,-2,"mgl_belt_xy");
	lua_pushcfunction(L, _bind_mgl_belt_xy_); lua_setfield(L,-2,"mgl_belt_xy_");
	lua_pushcfunction(L, _bind_mgl_belt); lua_setfield(L,-2,"mgl_belt");
	lua_pushcfunction(L, _bind_mgl_belt_); lua_setfield(L,-2,"mgl_belt_");
	lua_pushcfunction(L, _bind_mgl_surf_xy); lua_setfield(L,-2,"mgl_surf_xy");
	lua_pushcfunction(L, _bind_mgl_surf_xy_); lua_setfield(L,-2,"mgl_surf_xy_");
	lua_pushcfunction(L, _bind_mgl_surf); lua_setfield(L,-2,"mgl_surf");
	lua_pushcfunction(L, _bind_mgl_surf_); lua_setfield(L,-2,"mgl_surf_");
	lua_pushcfunction(L, _bind_mgl_dens_xy); lua_setfield(L,-2,"mgl_dens_xy");
	lua_pushcfunction(L, _bind_mgl_dens_xy_); lua_setfield(L,-2,"mgl_dens_xy_");
	lua_pushcfunction(L, _bind_mgl_dens); lua_setfield(L,-2,"mgl_dens");
	lua_pushcfunction(L, _bind_mgl_dens_); lua_setfield(L,-2,"mgl_dens_");
	lua_pushcfunction(L, _bind_mgl_boxs_xy); lua_setfield(L,-2,"mgl_boxs_xy");
	lua_pushcfunction(L, _bind_mgl_boxs_xy_); lua_setfield(L,-2,"mgl_boxs_xy_");
	lua_pushcfunction(L, _bind_mgl_boxs); lua_setfield(L,-2,"mgl_boxs");
	lua_pushcfunction(L, _bind_mgl_boxs_); lua_setfield(L,-2,"mgl_boxs_");
	lua_pushcfunction(L, _bind_mgl_tile_xy); lua_setfield(L,-2,"mgl_tile_xy");
	lua_pushcfunction(L, _bind_mgl_tile_xy_); lua_setfield(L,-2,"mgl_tile_xy_");
	lua_pushcfunction(L, _bind_mgl_tile); lua_setfield(L,-2,"mgl_tile");
	lua_pushcfunction(L, _bind_mgl_tile_); lua_setfield(L,-2,"mgl_tile_");
	lua_pushcfunction(L, _bind_mgl_tiles_xy); lua_setfield(L,-2,"mgl_tiles_xy");
	lua_pushcfunction(L, _bind_mgl_tiles_xy_); lua_setfield(L,-2,"mgl_tiles_xy_");
	lua_pushcfunction(L, _bind_mgl_tiles); lua_setfield(L,-2,"mgl_tiles");
	lua_pushcfunction(L, _bind_mgl_tiles_); lua_setfield(L,-2,"mgl_tiles_");
	lua_pushcfunction(L, _bind_mgl_surfc_xy); lua_setfield(L,-2,"mgl_surfc_xy");
	lua_pushcfunction(L, _bind_mgl_surfc_xy_); lua_setfield(L,-2,"mgl_surfc_xy_");
	lua_pushcfunction(L, _bind_mgl_surfc); lua_setfield(L,-2,"mgl_surfc");
	lua_pushcfunction(L, _bind_mgl_surfc_); lua_setfield(L,-2,"mgl_surfc_");
	lua_pushcfunction(L, _bind_mgl_surfa_xy); lua_setfield(L,-2,"mgl_surfa_xy");
	lua_pushcfunction(L, _bind_mgl_surfa_xy_); lua_setfield(L,-2,"mgl_surfa_xy_");
	lua_pushcfunction(L, _bind_mgl_surfa); lua_setfield(L,-2,"mgl_surfa");
	lua_pushcfunction(L, _bind_mgl_surfa_); lua_setfield(L,-2,"mgl_surfa_");
	lua_pushcfunction(L, _bind_mgl_stfa_xy); lua_setfield(L,-2,"mgl_stfa_xy");
	lua_pushcfunction(L, _bind_mgl_stfa_xy_); lua_setfield(L,-2,"mgl_stfa_xy_");
	lua_pushcfunction(L, _bind_mgl_stfa); lua_setfield(L,-2,"mgl_stfa");
	lua_pushcfunction(L, _bind_mgl_stfa_); lua_setfield(L,-2,"mgl_stfa_");
	lua_pushcfunction(L, _bind_mgl_map_xy); lua_setfield(L,-2,"mgl_map_xy");
	lua_pushcfunction(L, _bind_mgl_map_xy_); lua_setfield(L,-2,"mgl_map_xy_");
	lua_pushcfunction(L, _bind_mgl_map); lua_setfield(L,-2,"mgl_map");
	lua_pushcfunction(L, _bind_mgl_map_); lua_setfield(L,-2,"mgl_map_");
	lua_pushcfunction(L, _bind_mgl_norm); lua_setfield(L,-2,"mgl_norm");
	lua_pushcfunction(L, _bind_mgl_traj_xy); lua_setfield(L,-2,"mgl_traj_xy");
	lua_pushcfunction(L, _bind_mgl_traj_xy_); lua_setfield(L,-2,"mgl_traj_xy_");
	lua_pushcfunction(L, _bind_mgl_traj_xyz); lua_setfield(L,-2,"mgl_traj_xyz");
	lua_pushcfunction(L, _bind_mgl_traj_xyz_); lua_setfield(L,-2,"mgl_traj_xyz_");
	lua_pushcfunction(L, _bind_mgl_vect_xy); lua_setfield(L,-2,"mgl_vect_xy");
	lua_pushcfunction(L, _bind_mgl_vect_xy_); lua_setfield(L,-2,"mgl_vect_xy_");
	lua_pushcfunction(L, _bind_mgl_vect_2d); lua_setfield(L,-2,"mgl_vect_2d");
	lua_pushcfunction(L, _bind_mgl_vect_2d_); lua_setfield(L,-2,"mgl_vect_2d_");
	lua_pushcfunction(L, _bind_mgl_vect_xyz); lua_setfield(L,-2,"mgl_vect_xyz");
	lua_pushcfunction(L, _bind_mgl_vect_xyz_); lua_setfield(L,-2,"mgl_vect_xyz_");
	lua_pushcfunction(L, _bind_mgl_vect_3d); lua_setfield(L,-2,"mgl_vect_3d");
	lua_pushcfunction(L, _bind_mgl_vect_3d_); lua_setfield(L,-2,"mgl_vect_3d_");
	lua_pushcfunction(L, _bind_mgl_flow_xy); lua_setfield(L,-2,"mgl_flow_xy");
	lua_pushcfunction(L, _bind_mgl_flow_xy_); lua_setfield(L,-2,"mgl_flow_xy_");
	lua_pushcfunction(L, _bind_mgl_flow_2d); lua_setfield(L,-2,"mgl_flow_2d");
	lua_pushcfunction(L, _bind_mgl_flow_2d_); lua_setfield(L,-2,"mgl_flow_2d_");
	lua_pushcfunction(L, _bind_mgl_flow_xyz); lua_setfield(L,-2,"mgl_flow_xyz");
	lua_pushcfunction(L, _bind_mgl_flow_xyz_); lua_setfield(L,-2,"mgl_flow_xyz_");
	lua_pushcfunction(L, _bind_mgl_flow_3d); lua_setfield(L,-2,"mgl_flow_3d");
	lua_pushcfunction(L, _bind_mgl_flow_3d_); lua_setfield(L,-2,"mgl_flow_3d_");
	lua_pushcfunction(L, _bind_mgl_flowp_xy); lua_setfield(L,-2,"mgl_flowp_xy");
	lua_pushcfunction(L, _bind_mgl_flowp_xy_); lua_setfield(L,-2,"mgl_flowp_xy_");
	lua_pushcfunction(L, _bind_mgl_flowp_2d); lua_setfield(L,-2,"mgl_flowp_2d");
	lua_pushcfunction(L, _bind_mgl_flowp_2d_); lua_setfield(L,-2,"mgl_flowp_2d_");
	lua_pushcfunction(L, _bind_mgl_flowp_xyz); lua_setfield(L,-2,"mgl_flowp_xyz");
	lua_pushcfunction(L, _bind_mgl_flowp_xyz_); lua_setfield(L,-2,"mgl_flowp_xyz_");
	lua_pushcfunction(L, _bind_mgl_flowp_3d); lua_setfield(L,-2,"mgl_flowp_3d");
	lua_pushcfunction(L, _bind_mgl_flowp_3d_); lua_setfield(L,-2,"mgl_flowp_3d_");
	lua_pushcfunction(L, _bind_mgl_pipe_xy); lua_setfield(L,-2,"mgl_pipe_xy");
	lua_pushcfunction(L, _bind_mgl_pipe_xy_); lua_setfield(L,-2,"mgl_pipe_xy_");
	lua_pushcfunction(L, _bind_mgl_pipe_2d); lua_setfield(L,-2,"mgl_pipe_2d");
	lua_pushcfunction(L, _bind_mgl_pipe_2d_); lua_setfield(L,-2,"mgl_pipe_2d_");
	lua_pushcfunction(L, _bind_mgl_pipe_xyz); lua_setfield(L,-2,"mgl_pipe_xyz");
	lua_pushcfunction(L, _bind_mgl_pipe_xyz_); lua_setfield(L,-2,"mgl_pipe_xyz_");
	lua_pushcfunction(L, _bind_mgl_pipe_3d); lua_setfield(L,-2,"mgl_pipe_3d");
	lua_pushcfunction(L, _bind_mgl_pipe_3d_); lua_setfield(L,-2,"mgl_pipe_3d_");
	lua_pushcfunction(L, _bind_mgl_grad_xyz); lua_setfield(L,-2,"mgl_grad_xyz");
	lua_pushcfunction(L, _bind_mgl_grad_xyz_); lua_setfield(L,-2,"mgl_grad_xyz_");
	lua_pushcfunction(L, _bind_mgl_grad_xy); lua_setfield(L,-2,"mgl_grad_xy");
	lua_pushcfunction(L, _bind_mgl_grad_xy_); lua_setfield(L,-2,"mgl_grad_xy_");
	lua_pushcfunction(L, _bind_mgl_grad); lua_setfield(L,-2,"mgl_grad");
	lua_pushcfunction(L, _bind_mgl_grad_); lua_setfield(L,-2,"mgl_grad_");
	lua_pushcfunction(L, _bind_mgl_vect3_xyz); lua_setfield(L,-2,"mgl_vect3_xyz");
	lua_pushcfunction(L, _bind_mgl_vect3_xyz_); lua_setfield(L,-2,"mgl_vect3_xyz_");
	lua_pushcfunction(L, _bind_mgl_vect3); lua_setfield(L,-2,"mgl_vect3");
	lua_pushcfunction(L, _bind_mgl_vect3_); lua_setfield(L,-2,"mgl_vect3_");
	lua_pushcfunction(L, _bind_mgl_surf3_xyz_val); lua_setfield(L,-2,"mgl_surf3_xyz_val");
	lua_pushcfunction(L, _bind_mgl_surf3_xyz_val_); lua_setfield(L,-2,"mgl_surf3_xyz_val_");
	lua_pushcfunction(L, _bind_mgl_surf3_val); lua_setfield(L,-2,"mgl_surf3_val");
	lua_pushcfunction(L, _bind_mgl_surf3_val_); lua_setfield(L,-2,"mgl_surf3_val_");
	lua_pushcfunction(L, _bind_mgl_surf3_xyz); lua_setfield(L,-2,"mgl_surf3_xyz");
	lua_pushcfunction(L, _bind_mgl_surf3_xyz_); lua_setfield(L,-2,"mgl_surf3_xyz_");
	lua_pushcfunction(L, _bind_mgl_surf3); lua_setfield(L,-2,"mgl_surf3");
	lua_pushcfunction(L, _bind_mgl_surf3_); lua_setfield(L,-2,"mgl_surf3_");
	lua_pushcfunction(L, _bind_mgl_surf3a_xyz_val); lua_setfield(L,-2,"mgl_surf3a_xyz_val");
	lua_pushcfunction(L, _bind_mgl_surf3a_xyz_val_); lua_setfield(L,-2,"mgl_surf3a_xyz_val_");
	lua_pushcfunction(L, _bind_mgl_surf3a_val); lua_setfield(L,-2,"mgl_surf3a_val");
	lua_pushcfunction(L, _bind_mgl_surf3a_val_); lua_setfield(L,-2,"mgl_surf3a_val_");
	lua_pushcfunction(L, _bind_mgl_surf3a_xyz); lua_setfield(L,-2,"mgl_surf3a_xyz");
	lua_pushcfunction(L, _bind_mgl_surf3a_xyz_); lua_setfield(L,-2,"mgl_surf3a_xyz_");
	lua_pushcfunction(L, _bind_mgl_surf3a); lua_setfield(L,-2,"mgl_surf3a");
	lua_pushcfunction(L, _bind_mgl_surf3a_); lua_setfield(L,-2,"mgl_surf3a_");
	lua_pushcfunction(L, _bind_mgl_surf3c_xyz_val); lua_setfield(L,-2,"mgl_surf3c_xyz_val");
	lua_pushcfunction(L, _bind_mgl_surf3c_xyz_val_); lua_setfield(L,-2,"mgl_surf3c_xyz_val_");
	lua_pushcfunction(L, _bind_mgl_surf3c_val); lua_setfield(L,-2,"mgl_surf3c_val");
	lua_pushcfunction(L, _bind_mgl_surf3c_val_); lua_setfield(L,-2,"mgl_surf3c_val_");
	lua_pushcfunction(L, _bind_mgl_surf3c_xyz); lua_setfield(L,-2,"mgl_surf3c_xyz");
	lua_pushcfunction(L, _bind_mgl_surf3c_xyz_); lua_setfield(L,-2,"mgl_surf3c_xyz_");
	lua_pushcfunction(L, _bind_mgl_surf3c); lua_setfield(L,-2,"mgl_surf3c");
	lua_pushcfunction(L, _bind_mgl_surf3c_); lua_setfield(L,-2,"mgl_surf3c_");
	lua_pushcfunction(L, _bind_mgl_cloud_xyz); lua_setfield(L,-2,"mgl_cloud_xyz");
	lua_pushcfunction(L, _bind_mgl_cloud_xyz_); lua_setfield(L,-2,"mgl_cloud_xyz_");
	lua_pushcfunction(L, _bind_mgl_cloud); lua_setfield(L,-2,"mgl_cloud");
	lua_pushcfunction(L, _bind_mgl_cloud_); lua_setfield(L,-2,"mgl_cloud_");
	lua_pushcfunction(L, _bind_mgl_beam_val); lua_setfield(L,-2,"mgl_beam_val");
	lua_pushcfunction(L, _bind_mgl_beam_val_); lua_setfield(L,-2,"mgl_beam_val_");
	lua_pushcfunction(L, _bind_mgl_beam); lua_setfield(L,-2,"mgl_beam");
	lua_pushcfunction(L, _bind_mgl_beam_); lua_setfield(L,-2,"mgl_beam_");
	lua_pushcfunction(L, _bind_mgl_draw_graph); lua_setfield(L,-2,"mgl_draw_graph");
	lua_pushcfunction(L, _bind_mgl_draw_class); lua_setfield(L,-2,"mgl_draw_class");
	lua_pushcfunction(L, _bind_mgl_click_class); lua_setfield(L,-2,"mgl_click_class");
	lua_pushcfunction(L, _bind_mgl_reload_class); lua_setfield(L,-2,"mgl_reload_class");
	luna_popModule(L);
}

#ifdef __cplusplus
}
#endif

