/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_IChildNode swig_types[0]
#define SWIGTYPE_p_IChildNodeIterator swig_types[1]
#define SWIGTYPE_p_IClass swig_types[2]
#define SWIGTYPE_p_ICompound swig_types[3]
#define SWIGTYPE_p_ICompoundIterator swig_types[4]
#define SWIGTYPE_p_IDCOP swig_types[5]
#define SWIGTYPE_p_IDefine swig_types[6]
#define SWIGTYPE_p_IDoc swig_types[7]
#define SWIGTYPE_p_IDocAnchor swig_types[8]
#define SWIGTYPE_p_IDocCodeLine swig_types[9]
#define SWIGTYPE_p_IDocCopy swig_types[10]
#define SWIGTYPE_p_IDocDotFile swig_types[11]
#define SWIGTYPE_p_IDocEMail swig_types[12]
#define SWIGTYPE_p_IDocEntry swig_types[13]
#define SWIGTYPE_p_IDocFormula swig_types[14]
#define SWIGTYPE_p_IDocHRuler swig_types[15]
#define SWIGTYPE_p_IDocHighlight swig_types[16]
#define SWIGTYPE_p_IDocImage swig_types[17]
#define SWIGTYPE_p_IDocIndexEntry swig_types[18]
#define SWIGTYPE_p_IDocInternal swig_types[19]
#define SWIGTYPE_p_IDocItemizedList swig_types[20]
#define SWIGTYPE_p_IDocIterator swig_types[21]
#define SWIGTYPE_p_IDocLineBreak swig_types[22]
#define SWIGTYPE_p_IDocLink swig_types[23]
#define SWIGTYPE_p_IDocListItem swig_types[24]
#define SWIGTYPE_p_IDocMarkup swig_types[25]
#define SWIGTYPE_p_IDocMarkupModifier swig_types[26]
#define SWIGTYPE_p_IDocOrderedList swig_types[27]
#define SWIGTYPE_p_IDocPara swig_types[28]
#define SWIGTYPE_p_IDocParameter swig_types[29]
#define SWIGTYPE_p_IDocParameterItem swig_types[30]
#define SWIGTYPE_p_IDocParameterList swig_types[31]
#define SWIGTYPE_p_IDocProgramListing swig_types[32]
#define SWIGTYPE_p_IDocRef swig_types[33]
#define SWIGTYPE_p_IDocRoot swig_types[34]
#define SWIGTYPE_p_IDocRow swig_types[35]
#define SWIGTYPE_p_IDocSection swig_types[36]
#define SWIGTYPE_p_IDocSimpleSect swig_types[37]
#define SWIGTYPE_p_IDocSymbol swig_types[38]
#define SWIGTYPE_p_IDocTable swig_types[39]
#define SWIGTYPE_p_IDocText swig_types[40]
#define SWIGTYPE_p_IDocTitle swig_types[41]
#define SWIGTYPE_p_IDocTocItem swig_types[42]
#define SWIGTYPE_p_IDocTocList swig_types[43]
#define SWIGTYPE_p_IDocULink swig_types[44]
#define SWIGTYPE_p_IDocVariableList swig_types[45]
#define SWIGTYPE_p_IDocVariableListEntry swig_types[46]
#define SWIGTYPE_p_IDocVerbatim swig_types[47]
#define SWIGTYPE_p_IDoxygen swig_types[48]
#define SWIGTYPE_p_IEdgeLabel swig_types[49]
#define SWIGTYPE_p_IEdgeLabelIterator swig_types[50]
#define SWIGTYPE_p_IEnum swig_types[51]
#define SWIGTYPE_p_IEnumValue swig_types[52]
#define SWIGTYPE_p_IException swig_types[53]
#define SWIGTYPE_p_IFile swig_types[54]
#define SWIGTYPE_p_IFriend swig_types[55]
#define SWIGTYPE_p_IFunction swig_types[56]
#define SWIGTYPE_p_IGraph swig_types[57]
#define SWIGTYPE_p_IGroup swig_types[58]
#define SWIGTYPE_p_IInclude swig_types[59]
#define SWIGTYPE_p_IIncludeIterator swig_types[60]
#define SWIGTYPE_p_IInterface swig_types[61]
#define SWIGTYPE_p_ILT_Ref swig_types[62]
#define SWIGTYPE_p_ILT_Text swig_types[63]
#define SWIGTYPE_p_ILinkedText swig_types[64]
#define SWIGTYPE_p_ILinkedTextIterator swig_types[65]
#define SWIGTYPE_p_IMember swig_types[66]
#define SWIGTYPE_p_IMemberIterator swig_types[67]
#define SWIGTYPE_p_IMemberReference swig_types[68]
#define SWIGTYPE_p_IMemberReferenceIterator swig_types[69]
#define SWIGTYPE_p_INamespace swig_types[70]
#define SWIGTYPE_p_INode swig_types[71]
#define SWIGTYPE_p_INodeIterator swig_types[72]
#define SWIGTYPE_p_IPage swig_types[73]
#define SWIGTYPE_p_IParam swig_types[74]
#define SWIGTYPE_p_IParamIterator swig_types[75]
#define SWIGTYPE_p_IProperty swig_types[76]
#define SWIGTYPE_p_IPrototype swig_types[77]
#define SWIGTYPE_p_IRelatedCompound swig_types[78]
#define SWIGTYPE_p_IRelatedCompoundIterator swig_types[79]
#define SWIGTYPE_p_ISection swig_types[80]
#define SWIGTYPE_p_ISectionIterator swig_types[81]
#define SWIGTYPE_p_ISignal swig_types[82]
#define SWIGTYPE_p_ISlot swig_types[83]
#define SWIGTYPE_p_IString swig_types[84]
#define SWIGTYPE_p_IStruct swig_types[85]
#define SWIGTYPE_p_ITypedef swig_types[86]
#define SWIGTYPE_p_IUnion swig_types[87]
#define SWIGTYPE_p_IUserDefined swig_types[88]
#define SWIGTYPE_p_IVariable swig_types[89]
static swig_type_info *swig_types[91];
static swig_module_info swig_module = {swig_types, 90, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "doxmlparser"
#define SWIG_init      luaopen_doxmlparser
#define SWIG_init_user luaopen_doxmlparser_user

#define SWIG_LUACODE   luaopen_doxmlparser_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <doxmlintf.h>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_IString_latin1(lua_State* L) {
  int SWIG_arg = 0;
  IString *arg1 = (IString *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("IString::latin1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IString::latin1",1,"IString const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IString,0))){
    SWIG_fail_ptr("IString_latin1",1,SWIGTYPE_p_IString);
  }
  
  result = (char *)((IString const *)arg1)->latin1();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IString_utf8(lua_State* L) {
  int SWIG_arg = 0;
  IString *arg1 = (IString *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("IString::utf8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IString::utf8",1,"IString const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IString,0))){
    SWIG_fail_ptr("IString_utf8",1,SWIGTYPE_p_IString);
  }
  
  result = (char *)((IString const *)arg1)->utf8();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IString_unicodeCharAt(lua_State* L) {
  int SWIG_arg = 0;
  IString *arg1 = (IString *) 0 ;
  int arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("IString::unicodeCharAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IString::unicodeCharAt",1,"IString const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IString::unicodeCharAt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IString,0))){
    SWIG_fail_ptr("IString_unicodeCharAt",1,SWIGTYPE_p_IString);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (unsigned short)((IString const *)arg1)->unicodeCharAt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IString_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  IString *arg1 = (IString *) 0 ;
  bool result;
  
  SWIG_check_num_args("IString::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IString::isEmpty",1,"IString const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IString,0))){
    SWIG_fail_ptr("IString_isEmpty",1,SWIGTYPE_p_IString);
  }
  
  result = (bool)((IString const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IString_length(lua_State* L) {
  int SWIG_arg = 0;
  IString *arg1 = (IString *) 0 ;
  int result;
  
  SWIG_check_num_args("IString::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IString::length",1,"IString const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IString,0))){
    SWIG_fail_ptr("IString_length",1,SWIGTYPE_p_IString);
  }
  
  result = (int)((IString const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IString(void *obj) {
IString *arg1 = (IString *) obj;
delete arg1;
}
static swig_lua_method swig_IString_methods[] = {
    {"latin1", _wrap_IString_latin1}, 
    {"utf8", _wrap_IString_utf8}, 
    {"unicodeCharAt", _wrap_IString_unicodeCharAt}, 
    {"isEmpty", _wrap_IString_isEmpty}, 
    {"length", _wrap_IString_length}, 
    {0,0}
};
static swig_lua_attribute swig_IString_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IString_bases[] = {0};
static const char *swig_IString_base_names[] = {0};
static swig_lua_class _wrap_class_IString = { "IString", &SWIGTYPE_p_IString,0, swig_delete_IString, swig_IString_methods, swig_IString_attributes, swig_IString_bases, swig_IString_base_names };

static int _wrap_ILinkedText_kind(lua_State* L) {
  int SWIG_arg = 0;
  ILinkedText *arg1 = (ILinkedText *) 0 ;
  ILinkedText::Kind result;
  
  SWIG_check_num_args("ILinkedText::kind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ILinkedText::kind",1,"ILinkedText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ILinkedText,0))){
    SWIG_fail_ptr("ILinkedText_kind",1,SWIGTYPE_p_ILinkedText);
  }
  
  result = (ILinkedText::Kind)((ILinkedText const *)arg1)->kind();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ILinkedText(void *obj) {
ILinkedText *arg1 = (ILinkedText *) obj;
delete arg1;
}
static swig_lua_method swig_ILinkedText_methods[] = {
    {"kind", _wrap_ILinkedText_kind}, 
    {0,0}
};
static swig_lua_attribute swig_ILinkedText_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ILinkedText_bases[] = {0};
static const char *swig_ILinkedText_base_names[] = {0};
static swig_lua_class _wrap_class_ILinkedText = { "ILinkedText", &SWIGTYPE_p_ILinkedText,0, swig_delete_ILinkedText, swig_ILinkedText_methods, swig_ILinkedText_attributes, swig_ILinkedText_bases, swig_ILinkedText_base_names };

static int _wrap_ILT_Text_text(lua_State* L) {
  int SWIG_arg = 0;
  ILT_Text *arg1 = (ILT_Text *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("ILT_Text::text",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ILT_Text::text",1,"ILT_Text const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ILT_Text,0))){
    SWIG_fail_ptr("ILT_Text_text",1,SWIGTYPE_p_ILT_Text);
  }
  
  result = (IString *)((ILT_Text const *)arg1)->text();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ILT_Text(void *obj) {
ILT_Text *arg1 = (ILT_Text *) obj;
delete arg1;
}
static swig_lua_method swig_ILT_Text_methods[] = {
    {"text", _wrap_ILT_Text_text}, 
    {0,0}
};
static swig_lua_attribute swig_ILT_Text_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ILT_Text_bases[] = {0,0};
static const char *swig_ILT_Text_base_names[] = {"ILinkedText *",0};
static swig_lua_class _wrap_class_ILT_Text = { "ILT_Text", &SWIGTYPE_p_ILT_Text,0, swig_delete_ILT_Text, swig_ILT_Text_methods, swig_ILT_Text_attributes, swig_ILT_Text_bases, swig_ILT_Text_base_names };

static int _wrap_ILT_Ref_id(lua_State* L) {
  int SWIG_arg = 0;
  ILT_Ref *arg1 = (ILT_Ref *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("ILT_Ref::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ILT_Ref::id",1,"ILT_Ref const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ILT_Ref,0))){
    SWIG_fail_ptr("ILT_Ref_id",1,SWIGTYPE_p_ILT_Ref);
  }
  
  result = (IString *)((ILT_Ref const *)arg1)->id();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILT_Ref_targetKind(lua_State* L) {
  int SWIG_arg = 0;
  ILT_Ref *arg1 = (ILT_Ref *) 0 ;
  ILT_Ref::TargetKind result;
  
  SWIG_check_num_args("ILT_Ref::targetKind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ILT_Ref::targetKind",1,"ILT_Ref const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ILT_Ref,0))){
    SWIG_fail_ptr("ILT_Ref_targetKind",1,SWIGTYPE_p_ILT_Ref);
  }
  
  result = (ILT_Ref::TargetKind)((ILT_Ref const *)arg1)->targetKind();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILT_Ref_external(lua_State* L) {
  int SWIG_arg = 0;
  ILT_Ref *arg1 = (ILT_Ref *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("ILT_Ref::external",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ILT_Ref::external",1,"ILT_Ref const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ILT_Ref,0))){
    SWIG_fail_ptr("ILT_Ref_external",1,SWIGTYPE_p_ILT_Ref);
  }
  
  result = (IString *)((ILT_Ref const *)arg1)->external();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILT_Ref_text(lua_State* L) {
  int SWIG_arg = 0;
  ILT_Ref *arg1 = (ILT_Ref *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("ILT_Ref::text",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ILT_Ref::text",1,"ILT_Ref const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ILT_Ref,0))){
    SWIG_fail_ptr("ILT_Ref_text",1,SWIGTYPE_p_ILT_Ref);
  }
  
  result = (IString *)((ILT_Ref const *)arg1)->text();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ILT_Ref(void *obj) {
ILT_Ref *arg1 = (ILT_Ref *) obj;
delete arg1;
}
static swig_lua_method swig_ILT_Ref_methods[] = {
    {"id", _wrap_ILT_Ref_id}, 
    {"targetKind", _wrap_ILT_Ref_targetKind}, 
    {"external", _wrap_ILT_Ref_external}, 
    {"text", _wrap_ILT_Ref_text}, 
    {0,0}
};
static swig_lua_attribute swig_ILT_Ref_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ILT_Ref_bases[] = {0,0};
static const char *swig_ILT_Ref_base_names[] = {"ILinkedText *",0};
static swig_lua_class _wrap_class_ILT_Ref = { "ILT_Ref", &SWIGTYPE_p_ILT_Ref,0, swig_delete_ILT_Ref, swig_ILT_Ref_methods, swig_ILT_Ref_attributes, swig_ILT_Ref_bases, swig_ILT_Ref_base_names };

static int _wrap_ILinkedTextIterator_toFirst(lua_State* L) {
  int SWIG_arg = 0;
  ILinkedTextIterator *arg1 = (ILinkedTextIterator *) 0 ;
  ILinkedText *result = 0 ;
  
  SWIG_check_num_args("ILinkedTextIterator::toFirst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ILinkedTextIterator::toFirst",1,"ILinkedTextIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ILinkedTextIterator,0))){
    SWIG_fail_ptr("ILinkedTextIterator_toFirst",1,SWIGTYPE_p_ILinkedTextIterator);
  }
  
  result = (ILinkedText *)(arg1)->toFirst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ILinkedText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILinkedTextIterator_toLast(lua_State* L) {
  int SWIG_arg = 0;
  ILinkedTextIterator *arg1 = (ILinkedTextIterator *) 0 ;
  ILinkedText *result = 0 ;
  
  SWIG_check_num_args("ILinkedTextIterator::toLast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ILinkedTextIterator::toLast",1,"ILinkedTextIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ILinkedTextIterator,0))){
    SWIG_fail_ptr("ILinkedTextIterator_toLast",1,SWIGTYPE_p_ILinkedTextIterator);
  }
  
  result = (ILinkedText *)(arg1)->toLast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ILinkedText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILinkedTextIterator_toNext(lua_State* L) {
  int SWIG_arg = 0;
  ILinkedTextIterator *arg1 = (ILinkedTextIterator *) 0 ;
  ILinkedText *result = 0 ;
  
  SWIG_check_num_args("ILinkedTextIterator::toNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ILinkedTextIterator::toNext",1,"ILinkedTextIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ILinkedTextIterator,0))){
    SWIG_fail_ptr("ILinkedTextIterator_toNext",1,SWIGTYPE_p_ILinkedTextIterator);
  }
  
  result = (ILinkedText *)(arg1)->toNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ILinkedText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILinkedTextIterator_toPrev(lua_State* L) {
  int SWIG_arg = 0;
  ILinkedTextIterator *arg1 = (ILinkedTextIterator *) 0 ;
  ILinkedText *result = 0 ;
  
  SWIG_check_num_args("ILinkedTextIterator::toPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ILinkedTextIterator::toPrev",1,"ILinkedTextIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ILinkedTextIterator,0))){
    SWIG_fail_ptr("ILinkedTextIterator_toPrev",1,SWIGTYPE_p_ILinkedTextIterator);
  }
  
  result = (ILinkedText *)(arg1)->toPrev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ILinkedText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILinkedTextIterator_current(lua_State* L) {
  int SWIG_arg = 0;
  ILinkedTextIterator *arg1 = (ILinkedTextIterator *) 0 ;
  ILinkedText *result = 0 ;
  
  SWIG_check_num_args("ILinkedTextIterator::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ILinkedTextIterator::current",1,"ILinkedTextIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ILinkedTextIterator,0))){
    SWIG_fail_ptr("ILinkedTextIterator_current",1,SWIGTYPE_p_ILinkedTextIterator);
  }
  
  result = (ILinkedText *)((ILinkedTextIterator const *)arg1)->current();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ILinkedText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILinkedTextIterator_release(lua_State* L) {
  int SWIG_arg = 0;
  ILinkedTextIterator *arg1 = (ILinkedTextIterator *) 0 ;
  
  SWIG_check_num_args("ILinkedTextIterator::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ILinkedTextIterator::release",1,"ILinkedTextIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ILinkedTextIterator,0))){
    SWIG_fail_ptr("ILinkedTextIterator_release",1,SWIGTYPE_p_ILinkedTextIterator);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ILinkedTextIterator(void *obj) {
ILinkedTextIterator *arg1 = (ILinkedTextIterator *) obj;
delete arg1;
}
static swig_lua_method swig_ILinkedTextIterator_methods[] = {
    {"toFirst", _wrap_ILinkedTextIterator_toFirst}, 
    {"toLast", _wrap_ILinkedTextIterator_toLast}, 
    {"toNext", _wrap_ILinkedTextIterator_toNext}, 
    {"toPrev", _wrap_ILinkedTextIterator_toPrev}, 
    {"current", _wrap_ILinkedTextIterator_current}, 
    {"release", _wrap_ILinkedTextIterator_release}, 
    {0,0}
};
static swig_lua_attribute swig_ILinkedTextIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ILinkedTextIterator_bases[] = {0};
static const char *swig_ILinkedTextIterator_base_names[] = {0};
static swig_lua_class _wrap_class_ILinkedTextIterator = { "ILinkedTextIterator", &SWIGTYPE_p_ILinkedTextIterator,0, swig_delete_ILinkedTextIterator, swig_ILinkedTextIterator_methods, swig_ILinkedTextIterator_attributes, swig_ILinkedTextIterator_bases, swig_ILinkedTextIterator_base_names };

static int _wrap_IParam_type(lua_State* L) {
  int SWIG_arg = 0;
  IParam *arg1 = (IParam *) 0 ;
  ILinkedTextIterator *result = 0 ;
  
  SWIG_check_num_args("IParam::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IParam::type",1,"IParam const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IParam,0))){
    SWIG_fail_ptr("IParam_type",1,SWIGTYPE_p_IParam);
  }
  
  result = (ILinkedTextIterator *)((IParam const *)arg1)->type();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ILinkedTextIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IParam_declarationName(lua_State* L) {
  int SWIG_arg = 0;
  IParam *arg1 = (IParam *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IParam::declarationName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IParam::declarationName",1,"IParam const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IParam,0))){
    SWIG_fail_ptr("IParam_declarationName",1,SWIGTYPE_p_IParam);
  }
  
  result = (IString *)((IParam const *)arg1)->declarationName();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IParam_definitionName(lua_State* L) {
  int SWIG_arg = 0;
  IParam *arg1 = (IParam *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IParam::definitionName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IParam::definitionName",1,"IParam const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IParam,0))){
    SWIG_fail_ptr("IParam_definitionName",1,SWIGTYPE_p_IParam);
  }
  
  result = (IString *)((IParam const *)arg1)->definitionName();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IParam_attrib(lua_State* L) {
  int SWIG_arg = 0;
  IParam *arg1 = (IParam *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IParam::attrib",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IParam::attrib",1,"IParam const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IParam,0))){
    SWIG_fail_ptr("IParam_attrib",1,SWIGTYPE_p_IParam);
  }
  
  result = (IString *)((IParam const *)arg1)->attrib();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IParam_arraySpecifier(lua_State* L) {
  int SWIG_arg = 0;
  IParam *arg1 = (IParam *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IParam::arraySpecifier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IParam::arraySpecifier",1,"IParam const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IParam,0))){
    SWIG_fail_ptr("IParam_arraySpecifier",1,SWIGTYPE_p_IParam);
  }
  
  result = (IString *)((IParam const *)arg1)->arraySpecifier();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IParam_defaultValue(lua_State* L) {
  int SWIG_arg = 0;
  IParam *arg1 = (IParam *) 0 ;
  ILinkedTextIterator *result = 0 ;
  
  SWIG_check_num_args("IParam::defaultValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IParam::defaultValue",1,"IParam const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IParam,0))){
    SWIG_fail_ptr("IParam_defaultValue",1,SWIGTYPE_p_IParam);
  }
  
  result = (ILinkedTextIterator *)((IParam const *)arg1)->defaultValue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ILinkedTextIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IParam_briefDescription(lua_State* L) {
  int SWIG_arg = 0;
  IParam *arg1 = (IParam *) 0 ;
  IDocRoot *result = 0 ;
  
  SWIG_check_num_args("IParam::briefDescription",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IParam::briefDescription",1,"IParam const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IParam,0))){
    SWIG_fail_ptr("IParam_briefDescription",1,SWIGTYPE_p_IParam);
  }
  
  result = (IDocRoot *)((IParam const *)arg1)->briefDescription();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocRoot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IParam(void *obj) {
IParam *arg1 = (IParam *) obj;
delete arg1;
}
static swig_lua_method swig_IParam_methods[] = {
    {"type", _wrap_IParam_type}, 
    {"declarationName", _wrap_IParam_declarationName}, 
    {"definitionName", _wrap_IParam_definitionName}, 
    {"attrib", _wrap_IParam_attrib}, 
    {"arraySpecifier", _wrap_IParam_arraySpecifier}, 
    {"defaultValue", _wrap_IParam_defaultValue}, 
    {"briefDescription", _wrap_IParam_briefDescription}, 
    {0,0}
};
static swig_lua_attribute swig_IParam_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IParam_bases[] = {0};
static const char *swig_IParam_base_names[] = {0};
static swig_lua_class _wrap_class_IParam = { "IParam", &SWIGTYPE_p_IParam,0, swig_delete_IParam, swig_IParam_methods, swig_IParam_attributes, swig_IParam_bases, swig_IParam_base_names };

static int _wrap_IParamIterator_toFirst(lua_State* L) {
  int SWIG_arg = 0;
  IParamIterator *arg1 = (IParamIterator *) 0 ;
  IParam *result = 0 ;
  
  SWIG_check_num_args("IParamIterator::toFirst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IParamIterator::toFirst",1,"IParamIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IParamIterator,0))){
    SWIG_fail_ptr("IParamIterator_toFirst",1,SWIGTYPE_p_IParamIterator);
  }
  
  result = (IParam *)(arg1)->toFirst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IParam,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IParamIterator_toLast(lua_State* L) {
  int SWIG_arg = 0;
  IParamIterator *arg1 = (IParamIterator *) 0 ;
  IParam *result = 0 ;
  
  SWIG_check_num_args("IParamIterator::toLast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IParamIterator::toLast",1,"IParamIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IParamIterator,0))){
    SWIG_fail_ptr("IParamIterator_toLast",1,SWIGTYPE_p_IParamIterator);
  }
  
  result = (IParam *)(arg1)->toLast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IParam,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IParamIterator_toNext(lua_State* L) {
  int SWIG_arg = 0;
  IParamIterator *arg1 = (IParamIterator *) 0 ;
  IParam *result = 0 ;
  
  SWIG_check_num_args("IParamIterator::toNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IParamIterator::toNext",1,"IParamIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IParamIterator,0))){
    SWIG_fail_ptr("IParamIterator_toNext",1,SWIGTYPE_p_IParamIterator);
  }
  
  result = (IParam *)(arg1)->toNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IParam,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IParamIterator_toPrev(lua_State* L) {
  int SWIG_arg = 0;
  IParamIterator *arg1 = (IParamIterator *) 0 ;
  IParam *result = 0 ;
  
  SWIG_check_num_args("IParamIterator::toPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IParamIterator::toPrev",1,"IParamIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IParamIterator,0))){
    SWIG_fail_ptr("IParamIterator_toPrev",1,SWIGTYPE_p_IParamIterator);
  }
  
  result = (IParam *)(arg1)->toPrev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IParam,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IParamIterator_current(lua_State* L) {
  int SWIG_arg = 0;
  IParamIterator *arg1 = (IParamIterator *) 0 ;
  IParam *result = 0 ;
  
  SWIG_check_num_args("IParamIterator::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IParamIterator::current",1,"IParamIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IParamIterator,0))){
    SWIG_fail_ptr("IParamIterator_current",1,SWIGTYPE_p_IParamIterator);
  }
  
  result = (IParam *)((IParamIterator const *)arg1)->current();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IParam,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IParamIterator_release(lua_State* L) {
  int SWIG_arg = 0;
  IParamIterator *arg1 = (IParamIterator *) 0 ;
  
  SWIG_check_num_args("IParamIterator::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IParamIterator::release",1,"IParamIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IParamIterator,0))){
    SWIG_fail_ptr("IParamIterator_release",1,SWIGTYPE_p_IParamIterator);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IParamIterator(void *obj) {
IParamIterator *arg1 = (IParamIterator *) obj;
delete arg1;
}
static swig_lua_method swig_IParamIterator_methods[] = {
    {"toFirst", _wrap_IParamIterator_toFirst}, 
    {"toLast", _wrap_IParamIterator_toLast}, 
    {"toNext", _wrap_IParamIterator_toNext}, 
    {"toPrev", _wrap_IParamIterator_toPrev}, 
    {"current", _wrap_IParamIterator_current}, 
    {"release", _wrap_IParamIterator_release}, 
    {0,0}
};
static swig_lua_attribute swig_IParamIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IParamIterator_bases[] = {0};
static const char *swig_IParamIterator_base_names[] = {0};
static swig_lua_class _wrap_class_IParamIterator = { "IParamIterator", &SWIGTYPE_p_IParamIterator,0, swig_delete_IParamIterator, swig_IParamIterator_methods, swig_IParamIterator_attributes, swig_IParamIterator_bases, swig_IParamIterator_base_names };

static int _wrap_IMemberReference_member(lua_State* L) {
  int SWIG_arg = 0;
  IMemberReference *arg1 = (IMemberReference *) 0 ;
  IMember *result = 0 ;
  
  SWIG_check_num_args("IMemberReference::member",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberReference::member",1,"IMemberReference const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberReference,0))){
    SWIG_fail_ptr("IMemberReference_member",1,SWIGTYPE_p_IMemberReference);
  }
  
  result = (IMember *)((IMemberReference const *)arg1)->member();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMember,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberReference_name(lua_State* L) {
  int SWIG_arg = 0;
  IMemberReference *arg1 = (IMemberReference *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMemberReference::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberReference::name",1,"IMemberReference const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberReference,0))){
    SWIG_fail_ptr("IMemberReference_name",1,SWIGTYPE_p_IMemberReference);
  }
  
  result = (IString *)((IMemberReference const *)arg1)->name();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberReference_scope(lua_State* L) {
  int SWIG_arg = 0;
  IMemberReference *arg1 = (IMemberReference *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMemberReference::scope",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberReference::scope",1,"IMemberReference const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberReference,0))){
    SWIG_fail_ptr("IMemberReference_scope",1,SWIGTYPE_p_IMemberReference);
  }
  
  result = (IString *)((IMemberReference const *)arg1)->scope();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberReference_protection(lua_State* L) {
  int SWIG_arg = 0;
  IMemberReference *arg1 = (IMemberReference *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMemberReference::protection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberReference::protection",1,"IMemberReference const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberReference,0))){
    SWIG_fail_ptr("IMemberReference_protection",1,SWIGTYPE_p_IMemberReference);
  }
  
  result = (IString *)((IMemberReference const *)arg1)->protection();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberReference_virtualness(lua_State* L) {
  int SWIG_arg = 0;
  IMemberReference *arg1 = (IMemberReference *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMemberReference::virtualness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberReference::virtualness",1,"IMemberReference const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberReference,0))){
    SWIG_fail_ptr("IMemberReference_virtualness",1,SWIGTYPE_p_IMemberReference);
  }
  
  result = (IString *)((IMemberReference const *)arg1)->virtualness();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberReference_ambiguityScope(lua_State* L) {
  int SWIG_arg = 0;
  IMemberReference *arg1 = (IMemberReference *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMemberReference::ambiguityScope",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberReference::ambiguityScope",1,"IMemberReference const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberReference,0))){
    SWIG_fail_ptr("IMemberReference_ambiguityScope",1,SWIGTYPE_p_IMemberReference);
  }
  
  result = (IString *)((IMemberReference const *)arg1)->ambiguityScope();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IMemberReference(void *obj) {
IMemberReference *arg1 = (IMemberReference *) obj;
delete arg1;
}
static swig_lua_method swig_IMemberReference_methods[] = {
    {"member", _wrap_IMemberReference_member}, 
    {"name", _wrap_IMemberReference_name}, 
    {"scope", _wrap_IMemberReference_scope}, 
    {"protection", _wrap_IMemberReference_protection}, 
    {"virtualness", _wrap_IMemberReference_virtualness}, 
    {"ambiguityScope", _wrap_IMemberReference_ambiguityScope}, 
    {0,0}
};
static swig_lua_attribute swig_IMemberReference_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IMemberReference_bases[] = {0};
static const char *swig_IMemberReference_base_names[] = {0};
static swig_lua_class _wrap_class_IMemberReference = { "IMemberReference", &SWIGTYPE_p_IMemberReference,0, swig_delete_IMemberReference, swig_IMemberReference_methods, swig_IMemberReference_attributes, swig_IMemberReference_bases, swig_IMemberReference_base_names };

static int _wrap_IMemberReferenceIterator_toFirst(lua_State* L) {
  int SWIG_arg = 0;
  IMemberReferenceIterator *arg1 = (IMemberReferenceIterator *) 0 ;
  IMemberReference *result = 0 ;
  
  SWIG_check_num_args("IMemberReferenceIterator::toFirst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberReferenceIterator::toFirst",1,"IMemberReferenceIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberReferenceIterator,0))){
    SWIG_fail_ptr("IMemberReferenceIterator_toFirst",1,SWIGTYPE_p_IMemberReferenceIterator);
  }
  
  result = (IMemberReference *)(arg1)->toFirst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMemberReference,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberReferenceIterator_toLast(lua_State* L) {
  int SWIG_arg = 0;
  IMemberReferenceIterator *arg1 = (IMemberReferenceIterator *) 0 ;
  IMemberReference *result = 0 ;
  
  SWIG_check_num_args("IMemberReferenceIterator::toLast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberReferenceIterator::toLast",1,"IMemberReferenceIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberReferenceIterator,0))){
    SWIG_fail_ptr("IMemberReferenceIterator_toLast",1,SWIGTYPE_p_IMemberReferenceIterator);
  }
  
  result = (IMemberReference *)(arg1)->toLast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMemberReference,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberReferenceIterator_toNext(lua_State* L) {
  int SWIG_arg = 0;
  IMemberReferenceIterator *arg1 = (IMemberReferenceIterator *) 0 ;
  IMemberReference *result = 0 ;
  
  SWIG_check_num_args("IMemberReferenceIterator::toNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberReferenceIterator::toNext",1,"IMemberReferenceIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberReferenceIterator,0))){
    SWIG_fail_ptr("IMemberReferenceIterator_toNext",1,SWIGTYPE_p_IMemberReferenceIterator);
  }
  
  result = (IMemberReference *)(arg1)->toNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMemberReference,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberReferenceIterator_toPrev(lua_State* L) {
  int SWIG_arg = 0;
  IMemberReferenceIterator *arg1 = (IMemberReferenceIterator *) 0 ;
  IMemberReference *result = 0 ;
  
  SWIG_check_num_args("IMemberReferenceIterator::toPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberReferenceIterator::toPrev",1,"IMemberReferenceIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberReferenceIterator,0))){
    SWIG_fail_ptr("IMemberReferenceIterator_toPrev",1,SWIGTYPE_p_IMemberReferenceIterator);
  }
  
  result = (IMemberReference *)(arg1)->toPrev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMemberReference,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberReferenceIterator_current(lua_State* L) {
  int SWIG_arg = 0;
  IMemberReferenceIterator *arg1 = (IMemberReferenceIterator *) 0 ;
  IMemberReference *result = 0 ;
  
  SWIG_check_num_args("IMemberReferenceIterator::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberReferenceIterator::current",1,"IMemberReferenceIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberReferenceIterator,0))){
    SWIG_fail_ptr("IMemberReferenceIterator_current",1,SWIGTYPE_p_IMemberReferenceIterator);
  }
  
  result = (IMemberReference *)((IMemberReferenceIterator const *)arg1)->current();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMemberReference,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberReferenceIterator_release(lua_State* L) {
  int SWIG_arg = 0;
  IMemberReferenceIterator *arg1 = (IMemberReferenceIterator *) 0 ;
  
  SWIG_check_num_args("IMemberReferenceIterator::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberReferenceIterator::release",1,"IMemberReferenceIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberReferenceIterator,0))){
    SWIG_fail_ptr("IMemberReferenceIterator_release",1,SWIGTYPE_p_IMemberReferenceIterator);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IMemberReferenceIterator(void *obj) {
IMemberReferenceIterator *arg1 = (IMemberReferenceIterator *) obj;
delete arg1;
}
static swig_lua_method swig_IMemberReferenceIterator_methods[] = {
    {"toFirst", _wrap_IMemberReferenceIterator_toFirst}, 
    {"toLast", _wrap_IMemberReferenceIterator_toLast}, 
    {"toNext", _wrap_IMemberReferenceIterator_toNext}, 
    {"toPrev", _wrap_IMemberReferenceIterator_toPrev}, 
    {"current", _wrap_IMemberReferenceIterator_current}, 
    {"release", _wrap_IMemberReferenceIterator_release}, 
    {0,0}
};
static swig_lua_attribute swig_IMemberReferenceIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IMemberReferenceIterator_bases[] = {0};
static const char *swig_IMemberReferenceIterator_base_names[] = {0};
static swig_lua_class _wrap_class_IMemberReferenceIterator = { "IMemberReferenceIterator", &SWIGTYPE_p_IMemberReferenceIterator,0, swig_delete_IMemberReferenceIterator, swig_IMemberReferenceIterator_methods, swig_IMemberReferenceIterator_attributes, swig_IMemberReferenceIterator_bases, swig_IMemberReferenceIterator_base_names };

static int _wrap_IDoc_kind(lua_State* L) {
  int SWIG_arg = 0;
  IDoc *arg1 = (IDoc *) 0 ;
  IDoc::Kind result;
  
  SWIG_check_num_args("IDoc::kind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDoc::kind",1,"IDoc const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDoc,0))){
    SWIG_fail_ptr("IDoc_kind",1,SWIGTYPE_p_IDoc);
  }
  
  result = (IDoc::Kind)((IDoc const *)arg1)->kind();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDoc(void *obj) {
IDoc *arg1 = (IDoc *) obj;
delete arg1;
}
static swig_lua_method swig_IDoc_methods[] = {
    {"kind", _wrap_IDoc_kind}, 
    {0,0}
};
static swig_lua_attribute swig_IDoc_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDoc_bases[] = {0};
static const char *swig_IDoc_base_names[] = {0};
static swig_lua_class _wrap_class_IDoc = { "IDoc", &SWIGTYPE_p_IDoc,0, swig_delete_IDoc, swig_IDoc_methods, swig_IDoc_attributes, swig_IDoc_bases, swig_IDoc_base_names };

static void swig_delete_IDocMarkup(void *obj) {
IDocMarkup *arg1 = (IDocMarkup *) obj;
delete arg1;
}
static swig_lua_method swig_IDocMarkup_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_IDocMarkup_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocMarkup_bases[] = {0,0};
static const char *swig_IDocMarkup_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocMarkup = { "IDocMarkup", &SWIGTYPE_p_IDocMarkup,0, swig_delete_IDocMarkup, swig_IDocMarkup_methods, swig_IDocMarkup_attributes, swig_IDocMarkup_bases, swig_IDocMarkup_base_names };

static int _wrap_IDocPara_contents(lua_State* L) {
  int SWIG_arg = 0;
  IDocPara *arg1 = (IDocPara *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocPara::contents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocPara::contents",1,"IDocPara const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocPara,0))){
    SWIG_fail_ptr("IDocPara_contents",1,SWIGTYPE_p_IDocPara);
  }
  
  result = (IDocIterator *)((IDocPara const *)arg1)->contents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocPara(void *obj) {
IDocPara *arg1 = (IDocPara *) obj;
delete arg1;
}
static swig_lua_method swig_IDocPara_methods[] = {
    {"contents", _wrap_IDocPara_contents}, 
    {0,0}
};
static swig_lua_attribute swig_IDocPara_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocPara_bases[] = {0,0};
static const char *swig_IDocPara_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocPara = { "IDocPara", &SWIGTYPE_p_IDocPara,0, swig_delete_IDocPara, swig_IDocPara_methods, swig_IDocPara_attributes, swig_IDocPara_bases, swig_IDocPara_base_names };

static int _wrap_IDocText_text(lua_State* L) {
  int SWIG_arg = 0;
  IDocText *arg1 = (IDocText *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocText::text",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocText::text",1,"IDocText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocText,0))){
    SWIG_fail_ptr("IDocText_text",1,SWIGTYPE_p_IDocText);
  }
  
  result = (IString *)((IDocText const *)arg1)->text();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocText_markup(lua_State* L) {
  int SWIG_arg = 0;
  IDocText *arg1 = (IDocText *) 0 ;
  int result;
  
  SWIG_check_num_args("IDocText::markup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocText::markup",1,"IDocText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocText,0))){
    SWIG_fail_ptr("IDocText_markup",1,SWIGTYPE_p_IDocText);
  }
  
  result = (int)((IDocText const *)arg1)->markup();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocText_headingLevel(lua_State* L) {
  int SWIG_arg = 0;
  IDocText *arg1 = (IDocText *) 0 ;
  int result;
  
  SWIG_check_num_args("IDocText::headingLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocText::headingLevel",1,"IDocText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocText,0))){
    SWIG_fail_ptr("IDocText_headingLevel",1,SWIGTYPE_p_IDocText);
  }
  
  result = (int)((IDocText const *)arg1)->headingLevel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocText(void *obj) {
IDocText *arg1 = (IDocText *) obj;
delete arg1;
}
static swig_lua_method swig_IDocText_methods[] = {
    {"text", _wrap_IDocText_text}, 
    {"markup", _wrap_IDocText_markup}, 
    {"headingLevel", _wrap_IDocText_headingLevel}, 
    {0,0}
};
static swig_lua_attribute swig_IDocText_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocText_bases[] = {0,0};
static const char *swig_IDocText_base_names[] = {"IDocMarkup *",0};
static swig_lua_class _wrap_class_IDocText = { "IDocText", &SWIGTYPE_p_IDocText,0, swig_delete_IDocText, swig_IDocText_methods, swig_IDocText_attributes, swig_IDocText_bases, swig_IDocText_base_names };

static int _wrap_IDocMarkupModifier_enabled(lua_State* L) {
  int SWIG_arg = 0;
  IDocMarkupModifier *arg1 = (IDocMarkupModifier *) 0 ;
  bool result;
  
  SWIG_check_num_args("IDocMarkupModifier::enabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocMarkupModifier::enabled",1,"IDocMarkupModifier const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocMarkupModifier,0))){
    SWIG_fail_ptr("IDocMarkupModifier_enabled",1,SWIGTYPE_p_IDocMarkupModifier);
  }
  
  result = (bool)((IDocMarkupModifier const *)arg1)->enabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocMarkupModifier_markup(lua_State* L) {
  int SWIG_arg = 0;
  IDocMarkupModifier *arg1 = (IDocMarkupModifier *) 0 ;
  int result;
  
  SWIG_check_num_args("IDocMarkupModifier::markup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocMarkupModifier::markup",1,"IDocMarkupModifier const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocMarkupModifier,0))){
    SWIG_fail_ptr("IDocMarkupModifier_markup",1,SWIGTYPE_p_IDocMarkupModifier);
  }
  
  result = (int)((IDocMarkupModifier const *)arg1)->markup();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocMarkupModifier_headingLevel(lua_State* L) {
  int SWIG_arg = 0;
  IDocMarkupModifier *arg1 = (IDocMarkupModifier *) 0 ;
  int result;
  
  SWIG_check_num_args("IDocMarkupModifier::headingLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocMarkupModifier::headingLevel",1,"IDocMarkupModifier const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocMarkupModifier,0))){
    SWIG_fail_ptr("IDocMarkupModifier_headingLevel",1,SWIGTYPE_p_IDocMarkupModifier);
  }
  
  result = (int)((IDocMarkupModifier const *)arg1)->headingLevel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocMarkupModifier(void *obj) {
IDocMarkupModifier *arg1 = (IDocMarkupModifier *) obj;
delete arg1;
}
static swig_lua_method swig_IDocMarkupModifier_methods[] = {
    {"enabled", _wrap_IDocMarkupModifier_enabled}, 
    {"markup", _wrap_IDocMarkupModifier_markup}, 
    {"headingLevel", _wrap_IDocMarkupModifier_headingLevel}, 
    {0,0}
};
static swig_lua_attribute swig_IDocMarkupModifier_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocMarkupModifier_bases[] = {0,0};
static const char *swig_IDocMarkupModifier_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocMarkupModifier = { "IDocMarkupModifier", &SWIGTYPE_p_IDocMarkupModifier,0, swig_delete_IDocMarkupModifier, swig_IDocMarkupModifier_methods, swig_IDocMarkupModifier_attributes, swig_IDocMarkupModifier_bases, swig_IDocMarkupModifier_base_names };

static int _wrap_IDocItemizedList_elements(lua_State* L) {
  int SWIG_arg = 0;
  IDocItemizedList *arg1 = (IDocItemizedList *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocItemizedList::elements",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocItemizedList::elements",1,"IDocItemizedList const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocItemizedList,0))){
    SWIG_fail_ptr("IDocItemizedList_elements",1,SWIGTYPE_p_IDocItemizedList);
  }
  
  result = (IDocIterator *)((IDocItemizedList const *)arg1)->elements();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocItemizedList(void *obj) {
IDocItemizedList *arg1 = (IDocItemizedList *) obj;
delete arg1;
}
static swig_lua_method swig_IDocItemizedList_methods[] = {
    {"elements", _wrap_IDocItemizedList_elements}, 
    {0,0}
};
static swig_lua_attribute swig_IDocItemizedList_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocItemizedList_bases[] = {0,0};
static const char *swig_IDocItemizedList_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocItemizedList = { "IDocItemizedList", &SWIGTYPE_p_IDocItemizedList,0, swig_delete_IDocItemizedList, swig_IDocItemizedList_methods, swig_IDocItemizedList_attributes, swig_IDocItemizedList_bases, swig_IDocItemizedList_base_names };

static int _wrap_IDocOrderedList_elements(lua_State* L) {
  int SWIG_arg = 0;
  IDocOrderedList *arg1 = (IDocOrderedList *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocOrderedList::elements",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocOrderedList::elements",1,"IDocOrderedList const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocOrderedList,0))){
    SWIG_fail_ptr("IDocOrderedList_elements",1,SWIGTYPE_p_IDocOrderedList);
  }
  
  result = (IDocIterator *)((IDocOrderedList const *)arg1)->elements();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocOrderedList(void *obj) {
IDocOrderedList *arg1 = (IDocOrderedList *) obj;
delete arg1;
}
static swig_lua_method swig_IDocOrderedList_methods[] = {
    {"elements", _wrap_IDocOrderedList_elements}, 
    {0,0}
};
static swig_lua_attribute swig_IDocOrderedList_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocOrderedList_bases[] = {0,0};
static const char *swig_IDocOrderedList_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocOrderedList = { "IDocOrderedList", &SWIGTYPE_p_IDocOrderedList,0, swig_delete_IDocOrderedList, swig_IDocOrderedList_methods, swig_IDocOrderedList_attributes, swig_IDocOrderedList_bases, swig_IDocOrderedList_base_names };

static int _wrap_IDocListItem_contents(lua_State* L) {
  int SWIG_arg = 0;
  IDocListItem *arg1 = (IDocListItem *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocListItem::contents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocListItem::contents",1,"IDocListItem const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocListItem,0))){
    SWIG_fail_ptr("IDocListItem_contents",1,SWIGTYPE_p_IDocListItem);
  }
  
  result = (IDocIterator *)((IDocListItem const *)arg1)->contents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocListItem(void *obj) {
IDocListItem *arg1 = (IDocListItem *) obj;
delete arg1;
}
static swig_lua_method swig_IDocListItem_methods[] = {
    {"contents", _wrap_IDocListItem_contents}, 
    {0,0}
};
static swig_lua_attribute swig_IDocListItem_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocListItem_bases[] = {0,0};
static const char *swig_IDocListItem_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocListItem = { "IDocListItem", &SWIGTYPE_p_IDocListItem,0, swig_delete_IDocListItem, swig_IDocListItem_methods, swig_IDocListItem_attributes, swig_IDocListItem_bases, swig_IDocListItem_base_names };

static int _wrap_IDocParameterList_sectType(lua_State* L) {
  int SWIG_arg = 0;
  IDocParameterList *arg1 = (IDocParameterList *) 0 ;
  IDocParameterList::Types result;
  
  SWIG_check_num_args("IDocParameterList::sectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocParameterList::sectType",1,"IDocParameterList const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocParameterList,0))){
    SWIG_fail_ptr("IDocParameterList_sectType",1,SWIGTYPE_p_IDocParameterList);
  }
  
  result = (IDocParameterList::Types)((IDocParameterList const *)arg1)->sectType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocParameterList_params(lua_State* L) {
  int SWIG_arg = 0;
  IDocParameterList *arg1 = (IDocParameterList *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocParameterList::params",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocParameterList::params",1,"IDocParameterList const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocParameterList,0))){
    SWIG_fail_ptr("IDocParameterList_params",1,SWIGTYPE_p_IDocParameterList);
  }
  
  result = (IDocIterator *)((IDocParameterList const *)arg1)->params();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocParameterList(void *obj) {
IDocParameterList *arg1 = (IDocParameterList *) obj;
delete arg1;
}
static swig_lua_method swig_IDocParameterList_methods[] = {
    {"sectType", _wrap_IDocParameterList_sectType}, 
    {"params", _wrap_IDocParameterList_params}, 
    {0,0}
};
static swig_lua_attribute swig_IDocParameterList_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocParameterList_bases[] = {0,0};
static const char *swig_IDocParameterList_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocParameterList = { "IDocParameterList", &SWIGTYPE_p_IDocParameterList,0, swig_delete_IDocParameterList, swig_IDocParameterList_methods, swig_IDocParameterList_attributes, swig_IDocParameterList_bases, swig_IDocParameterList_base_names };

static int _wrap_IDocParameterItem_paramNames(lua_State* L) {
  int SWIG_arg = 0;
  IDocParameterItem *arg1 = (IDocParameterItem *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocParameterItem::paramNames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocParameterItem::paramNames",1,"IDocParameterItem const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocParameterItem,0))){
    SWIG_fail_ptr("IDocParameterItem_paramNames",1,SWIGTYPE_p_IDocParameterItem);
  }
  
  result = (IDocIterator *)((IDocParameterItem const *)arg1)->paramNames();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocParameterItem_description(lua_State* L) {
  int SWIG_arg = 0;
  IDocParameterItem *arg1 = (IDocParameterItem *) 0 ;
  IDocPara *result = 0 ;
  
  SWIG_check_num_args("IDocParameterItem::description",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocParameterItem::description",1,"IDocParameterItem const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocParameterItem,0))){
    SWIG_fail_ptr("IDocParameterItem_description",1,SWIGTYPE_p_IDocParameterItem);
  }
  
  result = (IDocPara *)((IDocParameterItem const *)arg1)->description();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocPara,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocParameterItem(void *obj) {
IDocParameterItem *arg1 = (IDocParameterItem *) obj;
delete arg1;
}
static swig_lua_method swig_IDocParameterItem_methods[] = {
    {"paramNames", _wrap_IDocParameterItem_paramNames}, 
    {"description", _wrap_IDocParameterItem_description}, 
    {0,0}
};
static swig_lua_attribute swig_IDocParameterItem_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocParameterItem_bases[] = {0,0};
static const char *swig_IDocParameterItem_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocParameterItem = { "IDocParameterItem", &SWIGTYPE_p_IDocParameterItem,0, swig_delete_IDocParameterItem, swig_IDocParameterItem_methods, swig_IDocParameterItem_attributes, swig_IDocParameterItem_bases, swig_IDocParameterItem_base_names };

static int _wrap_IDocParameter_name(lua_State* L) {
  int SWIG_arg = 0;
  IDocParameter *arg1 = (IDocParameter *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocParameter::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocParameter::name",1,"IDocParameter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocParameter,0))){
    SWIG_fail_ptr("IDocParameter_name",1,SWIGTYPE_p_IDocParameter);
  }
  
  result = (IString *)((IDocParameter const *)arg1)->name();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocParameter(void *obj) {
IDocParameter *arg1 = (IDocParameter *) obj;
delete arg1;
}
static swig_lua_method swig_IDocParameter_methods[] = {
    {"name", _wrap_IDocParameter_name}, 
    {0,0}
};
static swig_lua_attribute swig_IDocParameter_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocParameter_bases[] = {0,0};
static const char *swig_IDocParameter_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocParameter = { "IDocParameter", &SWIGTYPE_p_IDocParameter,0, swig_delete_IDocParameter, swig_IDocParameter_methods, swig_IDocParameter_attributes, swig_IDocParameter_bases, swig_IDocParameter_base_names };

static int _wrap_IDocTitle_title(lua_State* L) {
  int SWIG_arg = 0;
  IDocTitle *arg1 = (IDocTitle *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocTitle::title",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocTitle::title",1,"IDocTitle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocTitle,0))){
    SWIG_fail_ptr("IDocTitle_title",1,SWIGTYPE_p_IDocTitle);
  }
  
  result = (IDocIterator *)((IDocTitle const *)arg1)->title();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocTitle(void *obj) {
IDocTitle *arg1 = (IDocTitle *) obj;
delete arg1;
}
static swig_lua_method swig_IDocTitle_methods[] = {
    {"title", _wrap_IDocTitle_title}, 
    {0,0}
};
static swig_lua_attribute swig_IDocTitle_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocTitle_bases[] = {0,0};
static const char *swig_IDocTitle_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocTitle = { "IDocTitle", &SWIGTYPE_p_IDocTitle,0, swig_delete_IDocTitle, swig_IDocTitle_methods, swig_IDocTitle_attributes, swig_IDocTitle_bases, swig_IDocTitle_base_names };

static int _wrap_IDocSimpleSect_type(lua_State* L) {
  int SWIG_arg = 0;
  IDocSimpleSect *arg1 = (IDocSimpleSect *) 0 ;
  IDocSimpleSect::Types result;
  
  SWIG_check_num_args("IDocSimpleSect::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocSimpleSect::type",1,"IDocSimpleSect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocSimpleSect,0))){
    SWIG_fail_ptr("IDocSimpleSect_type",1,SWIGTYPE_p_IDocSimpleSect);
  }
  
  result = (IDocSimpleSect::Types)((IDocSimpleSect const *)arg1)->type();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocSimpleSect_typeString(lua_State* L) {
  int SWIG_arg = 0;
  IDocSimpleSect *arg1 = (IDocSimpleSect *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocSimpleSect::typeString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocSimpleSect::typeString",1,"IDocSimpleSect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocSimpleSect,0))){
    SWIG_fail_ptr("IDocSimpleSect_typeString",1,SWIGTYPE_p_IDocSimpleSect);
  }
  
  result = (IString *)((IDocSimpleSect const *)arg1)->typeString();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocSimpleSect_title(lua_State* L) {
  int SWIG_arg = 0;
  IDocSimpleSect *arg1 = (IDocSimpleSect *) 0 ;
  IDocTitle *result = 0 ;
  
  SWIG_check_num_args("IDocSimpleSect::title",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocSimpleSect::title",1,"IDocSimpleSect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocSimpleSect,0))){
    SWIG_fail_ptr("IDocSimpleSect_title",1,SWIGTYPE_p_IDocSimpleSect);
  }
  
  result = (IDocTitle *)((IDocSimpleSect const *)arg1)->title();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocTitle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocSimpleSect_description(lua_State* L) {
  int SWIG_arg = 0;
  IDocSimpleSect *arg1 = (IDocSimpleSect *) 0 ;
  IDocPara *result = 0 ;
  
  SWIG_check_num_args("IDocSimpleSect::description",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocSimpleSect::description",1,"IDocSimpleSect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocSimpleSect,0))){
    SWIG_fail_ptr("IDocSimpleSect_description",1,SWIGTYPE_p_IDocSimpleSect);
  }
  
  result = (IDocPara *)((IDocSimpleSect const *)arg1)->description();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocPara,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocSimpleSect(void *obj) {
IDocSimpleSect *arg1 = (IDocSimpleSect *) obj;
delete arg1;
}
static swig_lua_method swig_IDocSimpleSect_methods[] = {
    {"type", _wrap_IDocSimpleSect_type}, 
    {"typeString", _wrap_IDocSimpleSect_typeString}, 
    {"title", _wrap_IDocSimpleSect_title}, 
    {"description", _wrap_IDocSimpleSect_description}, 
    {0,0}
};
static swig_lua_attribute swig_IDocSimpleSect_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocSimpleSect_bases[] = {0,0};
static const char *swig_IDocSimpleSect_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocSimpleSect = { "IDocSimpleSect", &SWIGTYPE_p_IDocSimpleSect,0, swig_delete_IDocSimpleSect, swig_IDocSimpleSect_methods, swig_IDocSimpleSect_attributes, swig_IDocSimpleSect_bases, swig_IDocSimpleSect_base_names };

static int _wrap_IDocRef_refId(lua_State* L) {
  int SWIG_arg = 0;
  IDocRef *arg1 = (IDocRef *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocRef::refId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocRef::refId",1,"IDocRef const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocRef,0))){
    SWIG_fail_ptr("IDocRef_refId",1,SWIGTYPE_p_IDocRef);
  }
  
  result = (IString *)((IDocRef const *)arg1)->refId();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocRef_targetKind(lua_State* L) {
  int SWIG_arg = 0;
  IDocRef *arg1 = (IDocRef *) 0 ;
  IDocRef::TargetKind result;
  
  SWIG_check_num_args("IDocRef::targetKind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocRef::targetKind",1,"IDocRef const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocRef,0))){
    SWIG_fail_ptr("IDocRef_targetKind",1,SWIGTYPE_p_IDocRef);
  }
  
  result = (IDocRef::TargetKind)((IDocRef const *)arg1)->targetKind();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocRef_external(lua_State* L) {
  int SWIG_arg = 0;
  IDocRef *arg1 = (IDocRef *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocRef::external",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocRef::external",1,"IDocRef const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocRef,0))){
    SWIG_fail_ptr("IDocRef_external",1,SWIGTYPE_p_IDocRef);
  }
  
  result = (IString *)((IDocRef const *)arg1)->external();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocRef_text(lua_State* L) {
  int SWIG_arg = 0;
  IDocRef *arg1 = (IDocRef *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocRef::text",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocRef::text",1,"IDocRef const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocRef,0))){
    SWIG_fail_ptr("IDocRef_text",1,SWIGTYPE_p_IDocRef);
  }
  
  result = (IString *)((IDocRef const *)arg1)->text();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocRef(void *obj) {
IDocRef *arg1 = (IDocRef *) obj;
delete arg1;
}
static swig_lua_method swig_IDocRef_methods[] = {
    {"refId", _wrap_IDocRef_refId}, 
    {"targetKind", _wrap_IDocRef_targetKind}, 
    {"external", _wrap_IDocRef_external}, 
    {"text", _wrap_IDocRef_text}, 
    {0,0}
};
static swig_lua_attribute swig_IDocRef_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocRef_bases[] = {0,0};
static const char *swig_IDocRef_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocRef = { "IDocRef", &SWIGTYPE_p_IDocRef,0, swig_delete_IDocRef, swig_IDocRef_methods, swig_IDocRef_attributes, swig_IDocRef_bases, swig_IDocRef_base_names };

static int _wrap_IDocVariableList_entries(lua_State* L) {
  int SWIG_arg = 0;
  IDocVariableList *arg1 = (IDocVariableList *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocVariableList::entries",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocVariableList::entries",1,"IDocVariableList const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocVariableList,0))){
    SWIG_fail_ptr("IDocVariableList_entries",1,SWIGTYPE_p_IDocVariableList);
  }
  
  result = (IDocIterator *)((IDocVariableList const *)arg1)->entries();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocVariableList(void *obj) {
IDocVariableList *arg1 = (IDocVariableList *) obj;
delete arg1;
}
static swig_lua_method swig_IDocVariableList_methods[] = {
    {"entries", _wrap_IDocVariableList_entries}, 
    {0,0}
};
static swig_lua_attribute swig_IDocVariableList_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocVariableList_bases[] = {0,0};
static const char *swig_IDocVariableList_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocVariableList = { "IDocVariableList", &SWIGTYPE_p_IDocVariableList,0, swig_delete_IDocVariableList, swig_IDocVariableList_methods, swig_IDocVariableList_attributes, swig_IDocVariableList_bases, swig_IDocVariableList_base_names };

static int _wrap_IDocVariableListEntry_term(lua_State* L) {
  int SWIG_arg = 0;
  IDocVariableListEntry *arg1 = (IDocVariableListEntry *) 0 ;
  ILinkedTextIterator *result = 0 ;
  
  SWIG_check_num_args("IDocVariableListEntry::term",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocVariableListEntry::term",1,"IDocVariableListEntry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocVariableListEntry,0))){
    SWIG_fail_ptr("IDocVariableListEntry_term",1,SWIGTYPE_p_IDocVariableListEntry);
  }
  
  result = (ILinkedTextIterator *)((IDocVariableListEntry const *)arg1)->term();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ILinkedTextIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocVariableListEntry_description(lua_State* L) {
  int SWIG_arg = 0;
  IDocVariableListEntry *arg1 = (IDocVariableListEntry *) 0 ;
  IDocPara *result = 0 ;
  
  SWIG_check_num_args("IDocVariableListEntry::description",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocVariableListEntry::description",1,"IDocVariableListEntry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocVariableListEntry,0))){
    SWIG_fail_ptr("IDocVariableListEntry_description",1,SWIGTYPE_p_IDocVariableListEntry);
  }
  
  result = (IDocPara *)((IDocVariableListEntry const *)arg1)->description();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocPara,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocVariableListEntry(void *obj) {
IDocVariableListEntry *arg1 = (IDocVariableListEntry *) obj;
delete arg1;
}
static swig_lua_method swig_IDocVariableListEntry_methods[] = {
    {"term", _wrap_IDocVariableListEntry_term}, 
    {"description", _wrap_IDocVariableListEntry_description}, 
    {0,0}
};
static swig_lua_attribute swig_IDocVariableListEntry_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocVariableListEntry_bases[] = {0,0};
static const char *swig_IDocVariableListEntry_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocVariableListEntry = { "IDocVariableListEntry", &SWIGTYPE_p_IDocVariableListEntry,0, swig_delete_IDocVariableListEntry, swig_IDocVariableListEntry_methods, swig_IDocVariableListEntry_attributes, swig_IDocVariableListEntry_bases, swig_IDocVariableListEntry_base_names };

static void swig_delete_IDocHRuler(void *obj) {
IDocHRuler *arg1 = (IDocHRuler *) obj;
delete arg1;
}
static swig_lua_method swig_IDocHRuler_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_IDocHRuler_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocHRuler_bases[] = {0,0};
static const char *swig_IDocHRuler_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocHRuler = { "IDocHRuler", &SWIGTYPE_p_IDocHRuler,0, swig_delete_IDocHRuler, swig_IDocHRuler_methods, swig_IDocHRuler_attributes, swig_IDocHRuler_bases, swig_IDocHRuler_base_names };

static void swig_delete_IDocLineBreak(void *obj) {
IDocLineBreak *arg1 = (IDocLineBreak *) obj;
delete arg1;
}
static swig_lua_method swig_IDocLineBreak_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_IDocLineBreak_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocLineBreak_bases[] = {0,0};
static const char *swig_IDocLineBreak_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocLineBreak = { "IDocLineBreak", &SWIGTYPE_p_IDocLineBreak,0, swig_delete_IDocLineBreak, swig_IDocLineBreak_methods, swig_IDocLineBreak_attributes, swig_IDocLineBreak_bases, swig_IDocLineBreak_base_names };

static int _wrap_IDocULink_url(lua_State* L) {
  int SWIG_arg = 0;
  IDocULink *arg1 = (IDocULink *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocULink::url",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocULink::url",1,"IDocULink const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocULink,0))){
    SWIG_fail_ptr("IDocULink_url",1,SWIGTYPE_p_IDocULink);
  }
  
  result = (IString *)((IDocULink const *)arg1)->url();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocULink_text(lua_State* L) {
  int SWIG_arg = 0;
  IDocULink *arg1 = (IDocULink *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocULink::text",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocULink::text",1,"IDocULink const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocULink,0))){
    SWIG_fail_ptr("IDocULink_text",1,SWIGTYPE_p_IDocULink);
  }
  
  result = (IString *)((IDocULink const *)arg1)->text();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocULink(void *obj) {
IDocULink *arg1 = (IDocULink *) obj;
delete arg1;
}
static swig_lua_method swig_IDocULink_methods[] = {
    {"url", _wrap_IDocULink_url}, 
    {"text", _wrap_IDocULink_text}, 
    {0,0}
};
static swig_lua_attribute swig_IDocULink_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocULink_bases[] = {0,0};
static const char *swig_IDocULink_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocULink = { "IDocULink", &SWIGTYPE_p_IDocULink,0, swig_delete_IDocULink, swig_IDocULink_methods, swig_IDocULink_attributes, swig_IDocULink_bases, swig_IDocULink_base_names };

static int _wrap_IDocEMail_address(lua_State* L) {
  int SWIG_arg = 0;
  IDocEMail *arg1 = (IDocEMail *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocEMail::address",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocEMail::address",1,"IDocEMail const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocEMail,0))){
    SWIG_fail_ptr("IDocEMail_address",1,SWIGTYPE_p_IDocEMail);
  }
  
  result = (IString *)((IDocEMail const *)arg1)->address();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocEMail(void *obj) {
IDocEMail *arg1 = (IDocEMail *) obj;
delete arg1;
}
static swig_lua_method swig_IDocEMail_methods[] = {
    {"address", _wrap_IDocEMail_address}, 
    {0,0}
};
static swig_lua_attribute swig_IDocEMail_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocEMail_bases[] = {0,0};
static const char *swig_IDocEMail_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocEMail = { "IDocEMail", &SWIGTYPE_p_IDocEMail,0, swig_delete_IDocEMail, swig_IDocEMail_methods, swig_IDocEMail_attributes, swig_IDocEMail_bases, swig_IDocEMail_base_names };

static int _wrap_IDocLink_refId(lua_State* L) {
  int SWIG_arg = 0;
  IDocLink *arg1 = (IDocLink *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocLink::refId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocLink::refId",1,"IDocLink const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocLink,0))){
    SWIG_fail_ptr("IDocLink_refId",1,SWIGTYPE_p_IDocLink);
  }
  
  result = (IString *)((IDocLink const *)arg1)->refId();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocLink_text(lua_State* L) {
  int SWIG_arg = 0;
  IDocLink *arg1 = (IDocLink *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocLink::text",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocLink::text",1,"IDocLink const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocLink,0))){
    SWIG_fail_ptr("IDocLink_text",1,SWIGTYPE_p_IDocLink);
  }
  
  result = (IString *)((IDocLink const *)arg1)->text();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocLink(void *obj) {
IDocLink *arg1 = (IDocLink *) obj;
delete arg1;
}
static swig_lua_method swig_IDocLink_methods[] = {
    {"refId", _wrap_IDocLink_refId}, 
    {"text", _wrap_IDocLink_text}, 
    {0,0}
};
static swig_lua_attribute swig_IDocLink_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocLink_bases[] = {0,0};
static const char *swig_IDocLink_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocLink = { "IDocLink", &SWIGTYPE_p_IDocLink,0, swig_delete_IDocLink, swig_IDocLink_methods, swig_IDocLink_attributes, swig_IDocLink_bases, swig_IDocLink_base_names };

static int _wrap_IDocProgramListing_codeLines(lua_State* L) {
  int SWIG_arg = 0;
  IDocProgramListing *arg1 = (IDocProgramListing *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocProgramListing::codeLines",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocProgramListing::codeLines",1,"IDocProgramListing const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocProgramListing,0))){
    SWIG_fail_ptr("IDocProgramListing_codeLines",1,SWIGTYPE_p_IDocProgramListing);
  }
  
  result = (IDocIterator *)((IDocProgramListing const *)arg1)->codeLines();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocProgramListing(void *obj) {
IDocProgramListing *arg1 = (IDocProgramListing *) obj;
delete arg1;
}
static swig_lua_method swig_IDocProgramListing_methods[] = {
    {"codeLines", _wrap_IDocProgramListing_codeLines}, 
    {0,0}
};
static swig_lua_attribute swig_IDocProgramListing_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocProgramListing_bases[] = {0,0};
static const char *swig_IDocProgramListing_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocProgramListing = { "IDocProgramListing", &SWIGTYPE_p_IDocProgramListing,0, swig_delete_IDocProgramListing, swig_IDocProgramListing_methods, swig_IDocProgramListing_attributes, swig_IDocProgramListing_bases, swig_IDocProgramListing_base_names };

static int _wrap_IDocCodeLine_lineNumber(lua_State* L) {
  int SWIG_arg = 0;
  IDocCodeLine *arg1 = (IDocCodeLine *) 0 ;
  int result;
  
  SWIG_check_num_args("IDocCodeLine::lineNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocCodeLine::lineNumber",1,"IDocCodeLine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocCodeLine,0))){
    SWIG_fail_ptr("IDocCodeLine_lineNumber",1,SWIGTYPE_p_IDocCodeLine);
  }
  
  result = (int)((IDocCodeLine const *)arg1)->lineNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocCodeLine_refId(lua_State* L) {
  int SWIG_arg = 0;
  IDocCodeLine *arg1 = (IDocCodeLine *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocCodeLine::refId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocCodeLine::refId",1,"IDocCodeLine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocCodeLine,0))){
    SWIG_fail_ptr("IDocCodeLine_refId",1,SWIGTYPE_p_IDocCodeLine);
  }
  
  result = (IString *)((IDocCodeLine const *)arg1)->refId();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocCodeLine_codeElements(lua_State* L) {
  int SWIG_arg = 0;
  IDocCodeLine *arg1 = (IDocCodeLine *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocCodeLine::codeElements",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocCodeLine::codeElements",1,"IDocCodeLine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocCodeLine,0))){
    SWIG_fail_ptr("IDocCodeLine_codeElements",1,SWIGTYPE_p_IDocCodeLine);
  }
  
  result = (IDocIterator *)((IDocCodeLine const *)arg1)->codeElements();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocCodeLine(void *obj) {
IDocCodeLine *arg1 = (IDocCodeLine *) obj;
delete arg1;
}
static swig_lua_method swig_IDocCodeLine_methods[] = {
    {"lineNumber", _wrap_IDocCodeLine_lineNumber}, 
    {"refId", _wrap_IDocCodeLine_refId}, 
    {"codeElements", _wrap_IDocCodeLine_codeElements}, 
    {0,0}
};
static swig_lua_attribute swig_IDocCodeLine_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocCodeLine_bases[] = {0,0};
static const char *swig_IDocCodeLine_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocCodeLine = { "IDocCodeLine", &SWIGTYPE_p_IDocCodeLine,0, swig_delete_IDocCodeLine, swig_IDocCodeLine_methods, swig_IDocCodeLine_attributes, swig_IDocCodeLine_bases, swig_IDocCodeLine_base_names };

static int _wrap_IDocHighlight_highlightKind(lua_State* L) {
  int SWIG_arg = 0;
  IDocHighlight *arg1 = (IDocHighlight *) 0 ;
  IDocHighlight::HighlightKind result;
  
  SWIG_check_num_args("IDocHighlight::highlightKind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocHighlight::highlightKind",1,"IDocHighlight const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocHighlight,0))){
    SWIG_fail_ptr("IDocHighlight_highlightKind",1,SWIGTYPE_p_IDocHighlight);
  }
  
  result = (IDocHighlight::HighlightKind)((IDocHighlight const *)arg1)->highlightKind();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocHighlight_codeElements(lua_State* L) {
  int SWIG_arg = 0;
  IDocHighlight *arg1 = (IDocHighlight *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocHighlight::codeElements",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocHighlight::codeElements",1,"IDocHighlight const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocHighlight,0))){
    SWIG_fail_ptr("IDocHighlight_codeElements",1,SWIGTYPE_p_IDocHighlight);
  }
  
  result = (IDocIterator *)((IDocHighlight const *)arg1)->codeElements();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocHighlight(void *obj) {
IDocHighlight *arg1 = (IDocHighlight *) obj;
delete arg1;
}
static swig_lua_method swig_IDocHighlight_methods[] = {
    {"highlightKind", _wrap_IDocHighlight_highlightKind}, 
    {"codeElements", _wrap_IDocHighlight_codeElements}, 
    {0,0}
};
static swig_lua_attribute swig_IDocHighlight_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocHighlight_bases[] = {0,0};
static const char *swig_IDocHighlight_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocHighlight = { "IDocHighlight", &SWIGTYPE_p_IDocHighlight,0, swig_delete_IDocHighlight, swig_IDocHighlight_methods, swig_IDocHighlight_attributes, swig_IDocHighlight_bases, swig_IDocHighlight_base_names };

static int _wrap_IDocFormula_id(lua_State* L) {
  int SWIG_arg = 0;
  IDocFormula *arg1 = (IDocFormula *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocFormula::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocFormula::id",1,"IDocFormula const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocFormula,0))){
    SWIG_fail_ptr("IDocFormula_id",1,SWIGTYPE_p_IDocFormula);
  }
  
  result = (IString *)((IDocFormula const *)arg1)->id();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocFormula_text(lua_State* L) {
  int SWIG_arg = 0;
  IDocFormula *arg1 = (IDocFormula *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocFormula::text",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocFormula::text",1,"IDocFormula const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocFormula,0))){
    SWIG_fail_ptr("IDocFormula_text",1,SWIGTYPE_p_IDocFormula);
  }
  
  result = (IString *)((IDocFormula const *)arg1)->text();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocFormula(void *obj) {
IDocFormula *arg1 = (IDocFormula *) obj;
delete arg1;
}
static swig_lua_method swig_IDocFormula_methods[] = {
    {"id", _wrap_IDocFormula_id}, 
    {"text", _wrap_IDocFormula_text}, 
    {0,0}
};
static swig_lua_attribute swig_IDocFormula_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocFormula_bases[] = {0,0};
static const char *swig_IDocFormula_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocFormula = { "IDocFormula", &SWIGTYPE_p_IDocFormula,0, swig_delete_IDocFormula, swig_IDocFormula_methods, swig_IDocFormula_attributes, swig_IDocFormula_bases, swig_IDocFormula_base_names };

static int _wrap_IDocImage_name(lua_State* L) {
  int SWIG_arg = 0;
  IDocImage *arg1 = (IDocImage *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocImage::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocImage::name",1,"IDocImage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocImage,0))){
    SWIG_fail_ptr("IDocImage_name",1,SWIGTYPE_p_IDocImage);
  }
  
  result = (IString *)((IDocImage const *)arg1)->name();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocImage_caption(lua_State* L) {
  int SWIG_arg = 0;
  IDocImage *arg1 = (IDocImage *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocImage::caption",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocImage::caption",1,"IDocImage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocImage,0))){
    SWIG_fail_ptr("IDocImage_caption",1,SWIGTYPE_p_IDocImage);
  }
  
  result = (IString *)((IDocImage const *)arg1)->caption();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocImage(void *obj) {
IDocImage *arg1 = (IDocImage *) obj;
delete arg1;
}
static swig_lua_method swig_IDocImage_methods[] = {
    {"name", _wrap_IDocImage_name}, 
    {"caption", _wrap_IDocImage_caption}, 
    {0,0}
};
static swig_lua_attribute swig_IDocImage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocImage_bases[] = {0,0};
static const char *swig_IDocImage_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocImage = { "IDocImage", &SWIGTYPE_p_IDocImage,0, swig_delete_IDocImage, swig_IDocImage_methods, swig_IDocImage_attributes, swig_IDocImage_bases, swig_IDocImage_base_names };

static int _wrap_IDocDotFile_name(lua_State* L) {
  int SWIG_arg = 0;
  IDocDotFile *arg1 = (IDocDotFile *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocDotFile::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocDotFile::name",1,"IDocDotFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocDotFile,0))){
    SWIG_fail_ptr("IDocDotFile_name",1,SWIGTYPE_p_IDocDotFile);
  }
  
  result = (IString *)((IDocDotFile const *)arg1)->name();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocDotFile_caption(lua_State* L) {
  int SWIG_arg = 0;
  IDocDotFile *arg1 = (IDocDotFile *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocDotFile::caption",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocDotFile::caption",1,"IDocDotFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocDotFile,0))){
    SWIG_fail_ptr("IDocDotFile_caption",1,SWIGTYPE_p_IDocDotFile);
  }
  
  result = (IString *)((IDocDotFile const *)arg1)->caption();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocDotFile(void *obj) {
IDocDotFile *arg1 = (IDocDotFile *) obj;
delete arg1;
}
static swig_lua_method swig_IDocDotFile_methods[] = {
    {"name", _wrap_IDocDotFile_name}, 
    {"caption", _wrap_IDocDotFile_caption}, 
    {0,0}
};
static swig_lua_attribute swig_IDocDotFile_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocDotFile_bases[] = {0,0};
static const char *swig_IDocDotFile_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocDotFile = { "IDocDotFile", &SWIGTYPE_p_IDocDotFile,0, swig_delete_IDocDotFile, swig_IDocDotFile_methods, swig_IDocDotFile_attributes, swig_IDocDotFile_bases, swig_IDocDotFile_base_names };

static int _wrap_IDocIndexEntry_primary(lua_State* L) {
  int SWIG_arg = 0;
  IDocIndexEntry *arg1 = (IDocIndexEntry *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocIndexEntry::primary",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocIndexEntry::primary",1,"IDocIndexEntry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocIndexEntry,0))){
    SWIG_fail_ptr("IDocIndexEntry_primary",1,SWIGTYPE_p_IDocIndexEntry);
  }
  
  result = (IString *)((IDocIndexEntry const *)arg1)->primary();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocIndexEntry_secondary(lua_State* L) {
  int SWIG_arg = 0;
  IDocIndexEntry *arg1 = (IDocIndexEntry *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocIndexEntry::secondary",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocIndexEntry::secondary",1,"IDocIndexEntry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocIndexEntry,0))){
    SWIG_fail_ptr("IDocIndexEntry_secondary",1,SWIGTYPE_p_IDocIndexEntry);
  }
  
  result = (IString *)((IDocIndexEntry const *)arg1)->secondary();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocIndexEntry(void *obj) {
IDocIndexEntry *arg1 = (IDocIndexEntry *) obj;
delete arg1;
}
static swig_lua_method swig_IDocIndexEntry_methods[] = {
    {"primary", _wrap_IDocIndexEntry_primary}, 
    {"secondary", _wrap_IDocIndexEntry_secondary}, 
    {0,0}
};
static swig_lua_attribute swig_IDocIndexEntry_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocIndexEntry_bases[] = {0,0};
static const char *swig_IDocIndexEntry_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocIndexEntry = { "IDocIndexEntry", &SWIGTYPE_p_IDocIndexEntry,0, swig_delete_IDocIndexEntry, swig_IDocIndexEntry_methods, swig_IDocIndexEntry_attributes, swig_IDocIndexEntry_bases, swig_IDocIndexEntry_base_names };

static int _wrap_IDocTable_rows(lua_State* L) {
  int SWIG_arg = 0;
  IDocTable *arg1 = (IDocTable *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocTable::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocTable::rows",1,"IDocTable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocTable,0))){
    SWIG_fail_ptr("IDocTable_rows",1,SWIGTYPE_p_IDocTable);
  }
  
  result = (IDocIterator *)((IDocTable const *)arg1)->rows();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocTable_numColumns(lua_State* L) {
  int SWIG_arg = 0;
  IDocTable *arg1 = (IDocTable *) 0 ;
  int result;
  
  SWIG_check_num_args("IDocTable::numColumns",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocTable::numColumns",1,"IDocTable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocTable,0))){
    SWIG_fail_ptr("IDocTable_numColumns",1,SWIGTYPE_p_IDocTable);
  }
  
  result = (int)((IDocTable const *)arg1)->numColumns();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocTable_caption(lua_State* L) {
  int SWIG_arg = 0;
  IDocTable *arg1 = (IDocTable *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocTable::caption",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocTable::caption",1,"IDocTable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocTable,0))){
    SWIG_fail_ptr("IDocTable_caption",1,SWIGTYPE_p_IDocTable);
  }
  
  result = (IString *)((IDocTable const *)arg1)->caption();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocTable(void *obj) {
IDocTable *arg1 = (IDocTable *) obj;
delete arg1;
}
static swig_lua_method swig_IDocTable_methods[] = {
    {"rows", _wrap_IDocTable_rows}, 
    {"numColumns", _wrap_IDocTable_numColumns}, 
    {"caption", _wrap_IDocTable_caption}, 
    {0,0}
};
static swig_lua_attribute swig_IDocTable_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocTable_bases[] = {0,0};
static const char *swig_IDocTable_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocTable = { "IDocTable", &SWIGTYPE_p_IDocTable,0, swig_delete_IDocTable, swig_IDocTable_methods, swig_IDocTable_attributes, swig_IDocTable_bases, swig_IDocTable_base_names };

static int _wrap_IDocRow_entries(lua_State* L) {
  int SWIG_arg = 0;
  IDocRow *arg1 = (IDocRow *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocRow::entries",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocRow::entries",1,"IDocRow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocRow,0))){
    SWIG_fail_ptr("IDocRow_entries",1,SWIGTYPE_p_IDocRow);
  }
  
  result = (IDocIterator *)((IDocRow const *)arg1)->entries();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocRow(void *obj) {
IDocRow *arg1 = (IDocRow *) obj;
delete arg1;
}
static swig_lua_method swig_IDocRow_methods[] = {
    {"entries", _wrap_IDocRow_entries}, 
    {0,0}
};
static swig_lua_attribute swig_IDocRow_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocRow_bases[] = {0,0};
static const char *swig_IDocRow_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocRow = { "IDocRow", &SWIGTYPE_p_IDocRow,0, swig_delete_IDocRow, swig_IDocRow_methods, swig_IDocRow_attributes, swig_IDocRow_bases, swig_IDocRow_base_names };

static int _wrap_IDocEntry_contents(lua_State* L) {
  int SWIG_arg = 0;
  IDocEntry *arg1 = (IDocEntry *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocEntry::contents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocEntry::contents",1,"IDocEntry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocEntry,0))){
    SWIG_fail_ptr("IDocEntry_contents",1,SWIGTYPE_p_IDocEntry);
  }
  
  result = (IDocIterator *)((IDocEntry const *)arg1)->contents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocEntry(void *obj) {
IDocEntry *arg1 = (IDocEntry *) obj;
delete arg1;
}
static swig_lua_method swig_IDocEntry_methods[] = {
    {"contents", _wrap_IDocEntry_contents}, 
    {0,0}
};
static swig_lua_attribute swig_IDocEntry_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocEntry_bases[] = {0,0};
static const char *swig_IDocEntry_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocEntry = { "IDocEntry", &SWIGTYPE_p_IDocEntry,0, swig_delete_IDocEntry, swig_IDocEntry_methods, swig_IDocEntry_attributes, swig_IDocEntry_bases, swig_IDocEntry_base_names };

static int _wrap_IDocSection_id(lua_State* L) {
  int SWIG_arg = 0;
  IDocSection *arg1 = (IDocSection *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocSection::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocSection::id",1,"IDocSection const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocSection,0))){
    SWIG_fail_ptr("IDocSection_id",1,SWIGTYPE_p_IDocSection);
  }
  
  result = (IString *)((IDocSection const *)arg1)->id();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocSection_level(lua_State* L) {
  int SWIG_arg = 0;
  IDocSection *arg1 = (IDocSection *) 0 ;
  int result;
  
  SWIG_check_num_args("IDocSection::level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocSection::level",1,"IDocSection const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocSection,0))){
    SWIG_fail_ptr("IDocSection_level",1,SWIGTYPE_p_IDocSection);
  }
  
  result = (int)((IDocSection const *)arg1)->level();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocSection_title(lua_State* L) {
  int SWIG_arg = 0;
  IDocSection *arg1 = (IDocSection *) 0 ;
  IDocTitle *result = 0 ;
  
  SWIG_check_num_args("IDocSection::title",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocSection::title",1,"IDocSection const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocSection,0))){
    SWIG_fail_ptr("IDocSection_title",1,SWIGTYPE_p_IDocSection);
  }
  
  result = (IDocTitle *)((IDocSection const *)arg1)->title();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocTitle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocSection_paragraphs(lua_State* L) {
  int SWIG_arg = 0;
  IDocSection *arg1 = (IDocSection *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocSection::paragraphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocSection::paragraphs",1,"IDocSection const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocSection,0))){
    SWIG_fail_ptr("IDocSection_paragraphs",1,SWIGTYPE_p_IDocSection);
  }
  
  result = (IDocIterator *)((IDocSection const *)arg1)->paragraphs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocSection_subSections(lua_State* L) {
  int SWIG_arg = 0;
  IDocSection *arg1 = (IDocSection *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocSection::subSections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocSection::subSections",1,"IDocSection const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocSection,0))){
    SWIG_fail_ptr("IDocSection_subSections",1,SWIGTYPE_p_IDocSection);
  }
  
  result = (IDocIterator *)((IDocSection const *)arg1)->subSections();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocSection_internal(lua_State* L) {
  int SWIG_arg = 0;
  IDocSection *arg1 = (IDocSection *) 0 ;
  IDocInternal *result = 0 ;
  
  SWIG_check_num_args("IDocSection::internal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocSection::internal",1,"IDocSection const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocSection,0))){
    SWIG_fail_ptr("IDocSection_internal",1,SWIGTYPE_p_IDocSection);
  }
  
  result = (IDocInternal *)((IDocSection const *)arg1)->internal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocInternal,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocSection(void *obj) {
IDocSection *arg1 = (IDocSection *) obj;
delete arg1;
}
static swig_lua_method swig_IDocSection_methods[] = {
    {"id", _wrap_IDocSection_id}, 
    {"level", _wrap_IDocSection_level}, 
    {"title", _wrap_IDocSection_title}, 
    {"paragraphs", _wrap_IDocSection_paragraphs}, 
    {"subSections", _wrap_IDocSection_subSections}, 
    {"internal", _wrap_IDocSection_internal}, 
    {0,0}
};
static swig_lua_attribute swig_IDocSection_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocSection_bases[] = {0,0};
static const char *swig_IDocSection_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocSection = { "IDocSection", &SWIGTYPE_p_IDocSection,0, swig_delete_IDocSection, swig_IDocSection_methods, swig_IDocSection_attributes, swig_IDocSection_bases, swig_IDocSection_base_names };

static int _wrap_IDocInternal_paragraphs(lua_State* L) {
  int SWIG_arg = 0;
  IDocInternal *arg1 = (IDocInternal *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocInternal::paragraphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocInternal::paragraphs",1,"IDocInternal const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocInternal,0))){
    SWIG_fail_ptr("IDocInternal_paragraphs",1,SWIGTYPE_p_IDocInternal);
  }
  
  result = (IDocIterator *)((IDocInternal const *)arg1)->paragraphs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocInternal_subSections(lua_State* L) {
  int SWIG_arg = 0;
  IDocInternal *arg1 = (IDocInternal *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocInternal::subSections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocInternal::subSections",1,"IDocInternal const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocInternal,0))){
    SWIG_fail_ptr("IDocInternal_subSections",1,SWIGTYPE_p_IDocInternal);
  }
  
  result = (IDocIterator *)((IDocInternal const *)arg1)->subSections();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocInternal(void *obj) {
IDocInternal *arg1 = (IDocInternal *) obj;
delete arg1;
}
static swig_lua_method swig_IDocInternal_methods[] = {
    {"paragraphs", _wrap_IDocInternal_paragraphs}, 
    {"subSections", _wrap_IDocInternal_subSections}, 
    {0,0}
};
static swig_lua_attribute swig_IDocInternal_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocInternal_bases[] = {0,0};
static const char *swig_IDocInternal_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocInternal = { "IDocInternal", &SWIGTYPE_p_IDocInternal,0, swig_delete_IDocInternal, swig_IDocInternal_methods, swig_IDocInternal_attributes, swig_IDocInternal_bases, swig_IDocInternal_base_names };

static int _wrap_IDocTocList_elements(lua_State* L) {
  int SWIG_arg = 0;
  IDocTocList *arg1 = (IDocTocList *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocTocList::elements",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocTocList::elements",1,"IDocTocList const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocTocList,0))){
    SWIG_fail_ptr("IDocTocList_elements",1,SWIGTYPE_p_IDocTocList);
  }
  
  result = (IDocIterator *)((IDocTocList const *)arg1)->elements();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocTocList(void *obj) {
IDocTocList *arg1 = (IDocTocList *) obj;
delete arg1;
}
static swig_lua_method swig_IDocTocList_methods[] = {
    {"elements", _wrap_IDocTocList_elements}, 
    {0,0}
};
static swig_lua_attribute swig_IDocTocList_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocTocList_bases[] = {0,0};
static const char *swig_IDocTocList_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocTocList = { "IDocTocList", &SWIGTYPE_p_IDocTocList,0, swig_delete_IDocTocList, swig_IDocTocList_methods, swig_IDocTocList_attributes, swig_IDocTocList_bases, swig_IDocTocList_base_names };

static int _wrap_IDocTocItem_id(lua_State* L) {
  int SWIG_arg = 0;
  IDocTocItem *arg1 = (IDocTocItem *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocTocItem::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocTocItem::id",1,"IDocTocItem const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocTocItem,0))){
    SWIG_fail_ptr("IDocTocItem_id",1,SWIGTYPE_p_IDocTocItem);
  }
  
  result = (IString *)((IDocTocItem const *)arg1)->id();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocTocItem_title(lua_State* L) {
  int SWIG_arg = 0;
  IDocTocItem *arg1 = (IDocTocItem *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocTocItem::title",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocTocItem::title",1,"IDocTocItem const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocTocItem,0))){
    SWIG_fail_ptr("IDocTocItem_title",1,SWIGTYPE_p_IDocTocItem);
  }
  
  result = (IString *)((IDocTocItem const *)arg1)->title();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocTocItem(void *obj) {
IDocTocItem *arg1 = (IDocTocItem *) obj;
delete arg1;
}
static swig_lua_method swig_IDocTocItem_methods[] = {
    {"id", _wrap_IDocTocItem_id}, 
    {"title", _wrap_IDocTocItem_title}, 
    {0,0}
};
static swig_lua_attribute swig_IDocTocItem_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocTocItem_bases[] = {0,0};
static const char *swig_IDocTocItem_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocTocItem = { "IDocTocItem", &SWIGTYPE_p_IDocTocItem,0, swig_delete_IDocTocItem, swig_IDocTocItem_methods, swig_IDocTocItem_attributes, swig_IDocTocItem_bases, swig_IDocTocItem_base_names };

static int _wrap_IDocCopy_contents(lua_State* L) {
  int SWIG_arg = 0;
  IDocCopy *arg1 = (IDocCopy *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocCopy::contents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocCopy::contents",1,"IDocCopy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocCopy,0))){
    SWIG_fail_ptr("IDocCopy_contents",1,SWIGTYPE_p_IDocCopy);
  }
  
  result = (IDocIterator *)((IDocCopy const *)arg1)->contents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocCopy(void *obj) {
IDocCopy *arg1 = (IDocCopy *) obj;
delete arg1;
}
static swig_lua_method swig_IDocCopy_methods[] = {
    {"contents", _wrap_IDocCopy_contents}, 
    {0,0}
};
static swig_lua_attribute swig_IDocCopy_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocCopy_bases[] = {0,0};
static const char *swig_IDocCopy_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocCopy = { "IDocCopy", &SWIGTYPE_p_IDocCopy,0, swig_delete_IDocCopy, swig_IDocCopy_methods, swig_IDocCopy_attributes, swig_IDocCopy_bases, swig_IDocCopy_base_names };

static int _wrap_IDocVerbatim_text(lua_State* L) {
  int SWIG_arg = 0;
  IDocVerbatim *arg1 = (IDocVerbatim *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocVerbatim::text",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocVerbatim::text",1,"IDocVerbatim const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocVerbatim,0))){
    SWIG_fail_ptr("IDocVerbatim_text",1,SWIGTYPE_p_IDocVerbatim);
  }
  
  result = (IString *)((IDocVerbatim const *)arg1)->text();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocVerbatim_type(lua_State* L) {
  int SWIG_arg = 0;
  IDocVerbatim *arg1 = (IDocVerbatim *) 0 ;
  IDocVerbatim::Types result;
  
  SWIG_check_num_args("IDocVerbatim::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocVerbatim::type",1,"IDocVerbatim const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocVerbatim,0))){
    SWIG_fail_ptr("IDocVerbatim_type",1,SWIGTYPE_p_IDocVerbatim);
  }
  
  result = (IDocVerbatim::Types)((IDocVerbatim const *)arg1)->type();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocVerbatim(void *obj) {
IDocVerbatim *arg1 = (IDocVerbatim *) obj;
delete arg1;
}
static swig_lua_method swig_IDocVerbatim_methods[] = {
    {"text", _wrap_IDocVerbatim_text}, 
    {"type", _wrap_IDocVerbatim_type}, 
    {0,0}
};
static swig_lua_attribute swig_IDocVerbatim_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocVerbatim_bases[] = {0,0};
static const char *swig_IDocVerbatim_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocVerbatim = { "IDocVerbatim", &SWIGTYPE_p_IDocVerbatim,0, swig_delete_IDocVerbatim, swig_IDocVerbatim_methods, swig_IDocVerbatim_attributes, swig_IDocVerbatim_bases, swig_IDocVerbatim_base_names };

static int _wrap_IDocAnchor_id(lua_State* L) {
  int SWIG_arg = 0;
  IDocAnchor *arg1 = (IDocAnchor *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocAnchor::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocAnchor::id",1,"IDocAnchor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocAnchor,0))){
    SWIG_fail_ptr("IDocAnchor_id",1,SWIGTYPE_p_IDocAnchor);
  }
  
  result = (IString *)((IDocAnchor const *)arg1)->id();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocAnchor(void *obj) {
IDocAnchor *arg1 = (IDocAnchor *) obj;
delete arg1;
}
static swig_lua_method swig_IDocAnchor_methods[] = {
    {"id", _wrap_IDocAnchor_id}, 
    {0,0}
};
static swig_lua_attribute swig_IDocAnchor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocAnchor_bases[] = {0,0};
static const char *swig_IDocAnchor_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocAnchor = { "IDocAnchor", &SWIGTYPE_p_IDocAnchor,0, swig_delete_IDocAnchor, swig_IDocAnchor_methods, swig_IDocAnchor_attributes, swig_IDocAnchor_bases, swig_IDocAnchor_base_names };

static int _wrap_IDocSymbol_type(lua_State* L) {
  int SWIG_arg = 0;
  IDocSymbol *arg1 = (IDocSymbol *) 0 ;
  IDocSymbol::Types result;
  
  SWIG_check_num_args("IDocSymbol::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocSymbol::type",1,"IDocSymbol const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocSymbol,0))){
    SWIG_fail_ptr("IDocSymbol_type",1,SWIGTYPE_p_IDocSymbol);
  }
  
  result = (IDocSymbol::Types)((IDocSymbol const *)arg1)->type();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocSymbol_typeString(lua_State* L) {
  int SWIG_arg = 0;
  IDocSymbol *arg1 = (IDocSymbol *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IDocSymbol::typeString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocSymbol::typeString",1,"IDocSymbol const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocSymbol,0))){
    SWIG_fail_ptr("IDocSymbol_typeString",1,SWIGTYPE_p_IDocSymbol);
  }
  
  result = (IString *)((IDocSymbol const *)arg1)->typeString();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocSymbol_letter(lua_State* L) {
  int SWIG_arg = 0;
  IDocSymbol *arg1 = (IDocSymbol *) 0 ;
  char result;
  
  SWIG_check_num_args("IDocSymbol::letter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocSymbol::letter",1,"IDocSymbol const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocSymbol,0))){
    SWIG_fail_ptr("IDocSymbol_letter",1,SWIGTYPE_p_IDocSymbol);
  }
  
  result = (char)((IDocSymbol const *)arg1)->letter();
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocSymbol(void *obj) {
IDocSymbol *arg1 = (IDocSymbol *) obj;
delete arg1;
}
static swig_lua_method swig_IDocSymbol_methods[] = {
    {"type", _wrap_IDocSymbol_type}, 
    {"typeString", _wrap_IDocSymbol_typeString}, 
    {"letter", _wrap_IDocSymbol_letter}, 
    {0,0}
};
static swig_lua_attribute swig_IDocSymbol_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocSymbol_bases[] = {0,0};
static const char *swig_IDocSymbol_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocSymbol = { "IDocSymbol", &SWIGTYPE_p_IDocSymbol,0, swig_delete_IDocSymbol, swig_IDocSymbol_methods, swig_IDocSymbol_attributes, swig_IDocSymbol_bases, swig_IDocSymbol_base_names };

static int _wrap_IDocRoot_contents(lua_State* L) {
  int SWIG_arg = 0;
  IDocRoot *arg1 = (IDocRoot *) 0 ;
  IDocIterator *result = 0 ;
  
  SWIG_check_num_args("IDocRoot::contents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocRoot::contents",1,"IDocRoot const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocRoot,0))){
    SWIG_fail_ptr("IDocRoot_contents",1,SWIGTYPE_p_IDocRoot);
  }
  
  result = (IDocIterator *)((IDocRoot const *)arg1)->contents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocRoot_internal(lua_State* L) {
  int SWIG_arg = 0;
  IDocRoot *arg1 = (IDocRoot *) 0 ;
  IDocInternal *result = 0 ;
  
  SWIG_check_num_args("IDocRoot::internal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocRoot::internal",1,"IDocRoot const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocRoot,0))){
    SWIG_fail_ptr("IDocRoot_internal",1,SWIGTYPE_p_IDocRoot);
  }
  
  result = (IDocInternal *)((IDocRoot const *)arg1)->internal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocInternal,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocRoot(void *obj) {
IDocRoot *arg1 = (IDocRoot *) obj;
delete arg1;
}
static swig_lua_method swig_IDocRoot_methods[] = {
    {"contents", _wrap_IDocRoot_contents}, 
    {"internal", _wrap_IDocRoot_internal}, 
    {0,0}
};
static swig_lua_attribute swig_IDocRoot_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocRoot_bases[] = {0,0};
static const char *swig_IDocRoot_base_names[] = {"IDoc *",0};
static swig_lua_class _wrap_class_IDocRoot = { "IDocRoot", &SWIGTYPE_p_IDocRoot,0, swig_delete_IDocRoot, swig_IDocRoot_methods, swig_IDocRoot_attributes, swig_IDocRoot_bases, swig_IDocRoot_base_names };

static int _wrap_IDocIterator_toFirst(lua_State* L) {
  int SWIG_arg = 0;
  IDocIterator *arg1 = (IDocIterator *) 0 ;
  IDoc *result = 0 ;
  
  SWIG_check_num_args("IDocIterator::toFirst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocIterator::toFirst",1,"IDocIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocIterator,0))){
    SWIG_fail_ptr("IDocIterator_toFirst",1,SWIGTYPE_p_IDocIterator);
  }
  
  result = (IDoc *)(arg1)->toFirst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDoc,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocIterator_toLast(lua_State* L) {
  int SWIG_arg = 0;
  IDocIterator *arg1 = (IDocIterator *) 0 ;
  IDoc *result = 0 ;
  
  SWIG_check_num_args("IDocIterator::toLast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocIterator::toLast",1,"IDocIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocIterator,0))){
    SWIG_fail_ptr("IDocIterator_toLast",1,SWIGTYPE_p_IDocIterator);
  }
  
  result = (IDoc *)(arg1)->toLast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDoc,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocIterator_toNext(lua_State* L) {
  int SWIG_arg = 0;
  IDocIterator *arg1 = (IDocIterator *) 0 ;
  IDoc *result = 0 ;
  
  SWIG_check_num_args("IDocIterator::toNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocIterator::toNext",1,"IDocIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocIterator,0))){
    SWIG_fail_ptr("IDocIterator_toNext",1,SWIGTYPE_p_IDocIterator);
  }
  
  result = (IDoc *)(arg1)->toNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDoc,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocIterator_toPrev(lua_State* L) {
  int SWIG_arg = 0;
  IDocIterator *arg1 = (IDocIterator *) 0 ;
  IDoc *result = 0 ;
  
  SWIG_check_num_args("IDocIterator::toPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocIterator::toPrev",1,"IDocIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocIterator,0))){
    SWIG_fail_ptr("IDocIterator_toPrev",1,SWIGTYPE_p_IDocIterator);
  }
  
  result = (IDoc *)(arg1)->toPrev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDoc,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocIterator_current(lua_State* L) {
  int SWIG_arg = 0;
  IDocIterator *arg1 = (IDocIterator *) 0 ;
  IDoc *result = 0 ;
  
  SWIG_check_num_args("IDocIterator::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocIterator::current",1,"IDocIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocIterator,0))){
    SWIG_fail_ptr("IDocIterator_current",1,SWIGTYPE_p_IDocIterator);
  }
  
  result = (IDoc *)((IDocIterator const *)arg1)->current();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDoc,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDocIterator_release(lua_State* L) {
  int SWIG_arg = 0;
  IDocIterator *arg1 = (IDocIterator *) 0 ;
  
  SWIG_check_num_args("IDocIterator::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDocIterator::release",1,"IDocIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDocIterator,0))){
    SWIG_fail_ptr("IDocIterator_release",1,SWIGTYPE_p_IDocIterator);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDocIterator(void *obj) {
IDocIterator *arg1 = (IDocIterator *) obj;
delete arg1;
}
static swig_lua_method swig_IDocIterator_methods[] = {
    {"toFirst", _wrap_IDocIterator_toFirst}, 
    {"toLast", _wrap_IDocIterator_toLast}, 
    {"toNext", _wrap_IDocIterator_toNext}, 
    {"toPrev", _wrap_IDocIterator_toPrev}, 
    {"current", _wrap_IDocIterator_current}, 
    {"release", _wrap_IDocIterator_release}, 
    {0,0}
};
static swig_lua_attribute swig_IDocIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDocIterator_bases[] = {0};
static const char *swig_IDocIterator_base_names[] = {0};
static swig_lua_class _wrap_class_IDocIterator = { "IDocIterator", &SWIGTYPE_p_IDocIterator,0, swig_delete_IDocIterator, swig_IDocIterator_methods, swig_IDocIterator_attributes, swig_IDocIterator_bases, swig_IDocIterator_base_names };

static int _wrap_IEdgeLabel_label(lua_State* L) {
  int SWIG_arg = 0;
  IEdgeLabel *arg1 = (IEdgeLabel *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IEdgeLabel::label",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IEdgeLabel::label",1,"IEdgeLabel const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IEdgeLabel,0))){
    SWIG_fail_ptr("IEdgeLabel_label",1,SWIGTYPE_p_IEdgeLabel);
  }
  
  result = (IString *)((IEdgeLabel const *)arg1)->label();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IEdgeLabel(void *obj) {
IEdgeLabel *arg1 = (IEdgeLabel *) obj;
delete arg1;
}
static swig_lua_method swig_IEdgeLabel_methods[] = {
    {"label", _wrap_IEdgeLabel_label}, 
    {0,0}
};
static swig_lua_attribute swig_IEdgeLabel_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IEdgeLabel_bases[] = {0};
static const char *swig_IEdgeLabel_base_names[] = {0};
static swig_lua_class _wrap_class_IEdgeLabel = { "IEdgeLabel", &SWIGTYPE_p_IEdgeLabel,0, swig_delete_IEdgeLabel, swig_IEdgeLabel_methods, swig_IEdgeLabel_attributes, swig_IEdgeLabel_bases, swig_IEdgeLabel_base_names };

static int _wrap_IEdgeLabelIterator_toFirst(lua_State* L) {
  int SWIG_arg = 0;
  IEdgeLabelIterator *arg1 = (IEdgeLabelIterator *) 0 ;
  IEdgeLabel *result = 0 ;
  
  SWIG_check_num_args("IEdgeLabelIterator::toFirst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IEdgeLabelIterator::toFirst",1,"IEdgeLabelIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IEdgeLabelIterator,0))){
    SWIG_fail_ptr("IEdgeLabelIterator_toFirst",1,SWIGTYPE_p_IEdgeLabelIterator);
  }
  
  result = (IEdgeLabel *)(arg1)->toFirst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IEdgeLabel,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEdgeLabelIterator_toLast(lua_State* L) {
  int SWIG_arg = 0;
  IEdgeLabelIterator *arg1 = (IEdgeLabelIterator *) 0 ;
  IEdgeLabel *result = 0 ;
  
  SWIG_check_num_args("IEdgeLabelIterator::toLast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IEdgeLabelIterator::toLast",1,"IEdgeLabelIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IEdgeLabelIterator,0))){
    SWIG_fail_ptr("IEdgeLabelIterator_toLast",1,SWIGTYPE_p_IEdgeLabelIterator);
  }
  
  result = (IEdgeLabel *)(arg1)->toLast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IEdgeLabel,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEdgeLabelIterator_toNext(lua_State* L) {
  int SWIG_arg = 0;
  IEdgeLabelIterator *arg1 = (IEdgeLabelIterator *) 0 ;
  IEdgeLabel *result = 0 ;
  
  SWIG_check_num_args("IEdgeLabelIterator::toNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IEdgeLabelIterator::toNext",1,"IEdgeLabelIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IEdgeLabelIterator,0))){
    SWIG_fail_ptr("IEdgeLabelIterator_toNext",1,SWIGTYPE_p_IEdgeLabelIterator);
  }
  
  result = (IEdgeLabel *)(arg1)->toNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IEdgeLabel,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEdgeLabelIterator_toPrev(lua_State* L) {
  int SWIG_arg = 0;
  IEdgeLabelIterator *arg1 = (IEdgeLabelIterator *) 0 ;
  IEdgeLabel *result = 0 ;
  
  SWIG_check_num_args("IEdgeLabelIterator::toPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IEdgeLabelIterator::toPrev",1,"IEdgeLabelIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IEdgeLabelIterator,0))){
    SWIG_fail_ptr("IEdgeLabelIterator_toPrev",1,SWIGTYPE_p_IEdgeLabelIterator);
  }
  
  result = (IEdgeLabel *)(arg1)->toPrev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IEdgeLabel,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEdgeLabelIterator_current(lua_State* L) {
  int SWIG_arg = 0;
  IEdgeLabelIterator *arg1 = (IEdgeLabelIterator *) 0 ;
  IEdgeLabel *result = 0 ;
  
  SWIG_check_num_args("IEdgeLabelIterator::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IEdgeLabelIterator::current",1,"IEdgeLabelIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IEdgeLabelIterator,0))){
    SWIG_fail_ptr("IEdgeLabelIterator_current",1,SWIGTYPE_p_IEdgeLabelIterator);
  }
  
  result = (IEdgeLabel *)((IEdgeLabelIterator const *)arg1)->current();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IEdgeLabel,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEdgeLabelIterator_release(lua_State* L) {
  int SWIG_arg = 0;
  IEdgeLabelIterator *arg1 = (IEdgeLabelIterator *) 0 ;
  
  SWIG_check_num_args("IEdgeLabelIterator::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IEdgeLabelIterator::release",1,"IEdgeLabelIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IEdgeLabelIterator,0))){
    SWIG_fail_ptr("IEdgeLabelIterator_release",1,SWIGTYPE_p_IEdgeLabelIterator);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IEdgeLabelIterator(void *obj) {
IEdgeLabelIterator *arg1 = (IEdgeLabelIterator *) obj;
delete arg1;
}
static swig_lua_method swig_IEdgeLabelIterator_methods[] = {
    {"toFirst", _wrap_IEdgeLabelIterator_toFirst}, 
    {"toLast", _wrap_IEdgeLabelIterator_toLast}, 
    {"toNext", _wrap_IEdgeLabelIterator_toNext}, 
    {"toPrev", _wrap_IEdgeLabelIterator_toPrev}, 
    {"current", _wrap_IEdgeLabelIterator_current}, 
    {"release", _wrap_IEdgeLabelIterator_release}, 
    {0,0}
};
static swig_lua_attribute swig_IEdgeLabelIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IEdgeLabelIterator_bases[] = {0};
static const char *swig_IEdgeLabelIterator_base_names[] = {0};
static swig_lua_class _wrap_class_IEdgeLabelIterator = { "IEdgeLabelIterator", &SWIGTYPE_p_IEdgeLabelIterator,0, swig_delete_IEdgeLabelIterator, swig_IEdgeLabelIterator_methods, swig_IEdgeLabelIterator_attributes, swig_IEdgeLabelIterator_bases, swig_IEdgeLabelIterator_base_names };

static int _wrap_IChildNode_node(lua_State* L) {
  int SWIG_arg = 0;
  IChildNode *arg1 = (IChildNode *) 0 ;
  INode *result = 0 ;
  
  SWIG_check_num_args("IChildNode::node",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IChildNode::node",1,"IChildNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IChildNode,0))){
    SWIG_fail_ptr("IChildNode_node",1,SWIGTYPE_p_IChildNode);
  }
  
  result = (INode *)((IChildNode const *)arg1)->node();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_INode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IChildNode_relation(lua_State* L) {
  int SWIG_arg = 0;
  IChildNode *arg1 = (IChildNode *) 0 ;
  IChildNode::NodeRelation result;
  
  SWIG_check_num_args("IChildNode::relation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IChildNode::relation",1,"IChildNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IChildNode,0))){
    SWIG_fail_ptr("IChildNode_relation",1,SWIGTYPE_p_IChildNode);
  }
  
  result = (IChildNode::NodeRelation)((IChildNode const *)arg1)->relation();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IChildNode_relationString(lua_State* L) {
  int SWIG_arg = 0;
  IChildNode *arg1 = (IChildNode *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IChildNode::relationString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IChildNode::relationString",1,"IChildNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IChildNode,0))){
    SWIG_fail_ptr("IChildNode_relationString",1,SWIGTYPE_p_IChildNode);
  }
  
  result = (IString *)((IChildNode const *)arg1)->relationString();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IChildNode_edgeLabels(lua_State* L) {
  int SWIG_arg = 0;
  IChildNode *arg1 = (IChildNode *) 0 ;
  IEdgeLabelIterator *result = 0 ;
  
  SWIG_check_num_args("IChildNode::edgeLabels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IChildNode::edgeLabels",1,"IChildNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IChildNode,0))){
    SWIG_fail_ptr("IChildNode_edgeLabels",1,SWIGTYPE_p_IChildNode);
  }
  
  result = (IEdgeLabelIterator *)((IChildNode const *)arg1)->edgeLabels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IEdgeLabelIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IChildNode(void *obj) {
IChildNode *arg1 = (IChildNode *) obj;
delete arg1;
}
static swig_lua_method swig_IChildNode_methods[] = {
    {"node", _wrap_IChildNode_node}, 
    {"relation", _wrap_IChildNode_relation}, 
    {"relationString", _wrap_IChildNode_relationString}, 
    {"edgeLabels", _wrap_IChildNode_edgeLabels}, 
    {0,0}
};
static swig_lua_attribute swig_IChildNode_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IChildNode_bases[] = {0};
static const char *swig_IChildNode_base_names[] = {0};
static swig_lua_class _wrap_class_IChildNode = { "IChildNode", &SWIGTYPE_p_IChildNode,0, swig_delete_IChildNode, swig_IChildNode_methods, swig_IChildNode_attributes, swig_IChildNode_bases, swig_IChildNode_base_names };

static int _wrap_IChildNodeIterator_toFirst(lua_State* L) {
  int SWIG_arg = 0;
  IChildNodeIterator *arg1 = (IChildNodeIterator *) 0 ;
  IChildNode *result = 0 ;
  
  SWIG_check_num_args("IChildNodeIterator::toFirst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IChildNodeIterator::toFirst",1,"IChildNodeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IChildNodeIterator,0))){
    SWIG_fail_ptr("IChildNodeIterator_toFirst",1,SWIGTYPE_p_IChildNodeIterator);
  }
  
  result = (IChildNode *)(arg1)->toFirst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IChildNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IChildNodeIterator_toLast(lua_State* L) {
  int SWIG_arg = 0;
  IChildNodeIterator *arg1 = (IChildNodeIterator *) 0 ;
  IChildNode *result = 0 ;
  
  SWIG_check_num_args("IChildNodeIterator::toLast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IChildNodeIterator::toLast",1,"IChildNodeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IChildNodeIterator,0))){
    SWIG_fail_ptr("IChildNodeIterator_toLast",1,SWIGTYPE_p_IChildNodeIterator);
  }
  
  result = (IChildNode *)(arg1)->toLast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IChildNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IChildNodeIterator_toNext(lua_State* L) {
  int SWIG_arg = 0;
  IChildNodeIterator *arg1 = (IChildNodeIterator *) 0 ;
  IChildNode *result = 0 ;
  
  SWIG_check_num_args("IChildNodeIterator::toNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IChildNodeIterator::toNext",1,"IChildNodeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IChildNodeIterator,0))){
    SWIG_fail_ptr("IChildNodeIterator_toNext",1,SWIGTYPE_p_IChildNodeIterator);
  }
  
  result = (IChildNode *)(arg1)->toNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IChildNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IChildNodeIterator_toPrev(lua_State* L) {
  int SWIG_arg = 0;
  IChildNodeIterator *arg1 = (IChildNodeIterator *) 0 ;
  IChildNode *result = 0 ;
  
  SWIG_check_num_args("IChildNodeIterator::toPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IChildNodeIterator::toPrev",1,"IChildNodeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IChildNodeIterator,0))){
    SWIG_fail_ptr("IChildNodeIterator_toPrev",1,SWIGTYPE_p_IChildNodeIterator);
  }
  
  result = (IChildNode *)(arg1)->toPrev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IChildNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IChildNodeIterator_current(lua_State* L) {
  int SWIG_arg = 0;
  IChildNodeIterator *arg1 = (IChildNodeIterator *) 0 ;
  IChildNode *result = 0 ;
  
  SWIG_check_num_args("IChildNodeIterator::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IChildNodeIterator::current",1,"IChildNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IChildNodeIterator,0))){
    SWIG_fail_ptr("IChildNodeIterator_current",1,SWIGTYPE_p_IChildNodeIterator);
  }
  
  result = (IChildNode *)((IChildNodeIterator const *)arg1)->current();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IChildNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IChildNodeIterator_release(lua_State* L) {
  int SWIG_arg = 0;
  IChildNodeIterator *arg1 = (IChildNodeIterator *) 0 ;
  
  SWIG_check_num_args("IChildNodeIterator::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IChildNodeIterator::release",1,"IChildNodeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IChildNodeIterator,0))){
    SWIG_fail_ptr("IChildNodeIterator_release",1,SWIGTYPE_p_IChildNodeIterator);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IChildNodeIterator(void *obj) {
IChildNodeIterator *arg1 = (IChildNodeIterator *) obj;
delete arg1;
}
static swig_lua_method swig_IChildNodeIterator_methods[] = {
    {"toFirst", _wrap_IChildNodeIterator_toFirst}, 
    {"toLast", _wrap_IChildNodeIterator_toLast}, 
    {"toNext", _wrap_IChildNodeIterator_toNext}, 
    {"toPrev", _wrap_IChildNodeIterator_toPrev}, 
    {"current", _wrap_IChildNodeIterator_current}, 
    {"release", _wrap_IChildNodeIterator_release}, 
    {0,0}
};
static swig_lua_attribute swig_IChildNodeIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IChildNodeIterator_bases[] = {0};
static const char *swig_IChildNodeIterator_base_names[] = {0};
static swig_lua_class _wrap_class_IChildNodeIterator = { "IChildNodeIterator", &SWIGTYPE_p_IChildNodeIterator,0, swig_delete_IChildNodeIterator, swig_IChildNodeIterator_methods, swig_IChildNodeIterator_attributes, swig_IChildNodeIterator_bases, swig_IChildNodeIterator_base_names };

static int _wrap_INode_id(lua_State* L) {
  int SWIG_arg = 0;
  INode *arg1 = (INode *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("INode::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("INode::id",1,"INode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_INode,0))){
    SWIG_fail_ptr("INode_id",1,SWIGTYPE_p_INode);
  }
  
  result = (IString *)((INode const *)arg1)->id();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_INode_label(lua_State* L) {
  int SWIG_arg = 0;
  INode *arg1 = (INode *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("INode::label",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("INode::label",1,"INode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_INode,0))){
    SWIG_fail_ptr("INode_label",1,SWIGTYPE_p_INode);
  }
  
  result = (IString *)((INode const *)arg1)->label();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_INode_linkId(lua_State* L) {
  int SWIG_arg = 0;
  INode *arg1 = (INode *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("INode::linkId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("INode::linkId",1,"INode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_INode,0))){
    SWIG_fail_ptr("INode_linkId",1,SWIGTYPE_p_INode);
  }
  
  result = (IString *)((INode const *)arg1)->linkId();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_INode_children(lua_State* L) {
  int SWIG_arg = 0;
  INode *arg1 = (INode *) 0 ;
  IChildNodeIterator *result = 0 ;
  
  SWIG_check_num_args("INode::children",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("INode::children",1,"INode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_INode,0))){
    SWIG_fail_ptr("INode_children",1,SWIGTYPE_p_INode);
  }
  
  result = (IChildNodeIterator *)((INode const *)arg1)->children();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IChildNodeIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_INode(void *obj) {
INode *arg1 = (INode *) obj;
delete arg1;
}
static swig_lua_method swig_INode_methods[] = {
    {"id", _wrap_INode_id}, 
    {"label", _wrap_INode_label}, 
    {"linkId", _wrap_INode_linkId}, 
    {"children", _wrap_INode_children}, 
    {0,0}
};
static swig_lua_attribute swig_INode_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_INode_bases[] = {0};
static const char *swig_INode_base_names[] = {0};
static swig_lua_class _wrap_class_INode = { "INode", &SWIGTYPE_p_INode,0, swig_delete_INode, swig_INode_methods, swig_INode_attributes, swig_INode_bases, swig_INode_base_names };

static int _wrap_INodeIterator_toFirst(lua_State* L) {
  int SWIG_arg = 0;
  INodeIterator *arg1 = (INodeIterator *) 0 ;
  INode *result = 0 ;
  
  SWIG_check_num_args("INodeIterator::toFirst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("INodeIterator::toFirst",1,"INodeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_INodeIterator,0))){
    SWIG_fail_ptr("INodeIterator_toFirst",1,SWIGTYPE_p_INodeIterator);
  }
  
  result = (INode *)(arg1)->toFirst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_INode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_INodeIterator_toLast(lua_State* L) {
  int SWIG_arg = 0;
  INodeIterator *arg1 = (INodeIterator *) 0 ;
  INode *result = 0 ;
  
  SWIG_check_num_args("INodeIterator::toLast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("INodeIterator::toLast",1,"INodeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_INodeIterator,0))){
    SWIG_fail_ptr("INodeIterator_toLast",1,SWIGTYPE_p_INodeIterator);
  }
  
  result = (INode *)(arg1)->toLast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_INode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_INodeIterator_toNext(lua_State* L) {
  int SWIG_arg = 0;
  INodeIterator *arg1 = (INodeIterator *) 0 ;
  INode *result = 0 ;
  
  SWIG_check_num_args("INodeIterator::toNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("INodeIterator::toNext",1,"INodeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_INodeIterator,0))){
    SWIG_fail_ptr("INodeIterator_toNext",1,SWIGTYPE_p_INodeIterator);
  }
  
  result = (INode *)(arg1)->toNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_INode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_INodeIterator_toPrev(lua_State* L) {
  int SWIG_arg = 0;
  INodeIterator *arg1 = (INodeIterator *) 0 ;
  INode *result = 0 ;
  
  SWIG_check_num_args("INodeIterator::toPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("INodeIterator::toPrev",1,"INodeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_INodeIterator,0))){
    SWIG_fail_ptr("INodeIterator_toPrev",1,SWIGTYPE_p_INodeIterator);
  }
  
  result = (INode *)(arg1)->toPrev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_INode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_INodeIterator_current(lua_State* L) {
  int SWIG_arg = 0;
  INodeIterator *arg1 = (INodeIterator *) 0 ;
  INode *result = 0 ;
  
  SWIG_check_num_args("INodeIterator::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("INodeIterator::current",1,"INodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_INodeIterator,0))){
    SWIG_fail_ptr("INodeIterator_current",1,SWIGTYPE_p_INodeIterator);
  }
  
  result = (INode *)((INodeIterator const *)arg1)->current();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_INode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_INodeIterator_release(lua_State* L) {
  int SWIG_arg = 0;
  INodeIterator *arg1 = (INodeIterator *) 0 ;
  
  SWIG_check_num_args("INodeIterator::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("INodeIterator::release",1,"INodeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_INodeIterator,0))){
    SWIG_fail_ptr("INodeIterator_release",1,SWIGTYPE_p_INodeIterator);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_INodeIterator(void *obj) {
INodeIterator *arg1 = (INodeIterator *) obj;
delete arg1;
}
static swig_lua_method swig_INodeIterator_methods[] = {
    {"toFirst", _wrap_INodeIterator_toFirst}, 
    {"toLast", _wrap_INodeIterator_toLast}, 
    {"toNext", _wrap_INodeIterator_toNext}, 
    {"toPrev", _wrap_INodeIterator_toPrev}, 
    {"current", _wrap_INodeIterator_current}, 
    {"release", _wrap_INodeIterator_release}, 
    {0,0}
};
static swig_lua_attribute swig_INodeIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_INodeIterator_bases[] = {0};
static const char *swig_INodeIterator_base_names[] = {0};
static swig_lua_class _wrap_class_INodeIterator = { "INodeIterator", &SWIGTYPE_p_INodeIterator,0, swig_delete_INodeIterator, swig_INodeIterator_methods, swig_INodeIterator_attributes, swig_INodeIterator_bases, swig_INodeIterator_base_names };

static int _wrap_IGraph_nodes(lua_State* L) {
  int SWIG_arg = 0;
  IGraph *arg1 = (IGraph *) 0 ;
  INodeIterator *result = 0 ;
  
  SWIG_check_num_args("IGraph::nodes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IGraph::nodes",1,"IGraph const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IGraph,0))){
    SWIG_fail_ptr("IGraph_nodes",1,SWIGTYPE_p_IGraph);
  }
  
  result = (INodeIterator *)((IGraph const *)arg1)->nodes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_INodeIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IGraph(void *obj) {
IGraph *arg1 = (IGraph *) obj;
delete arg1;
}
static swig_lua_method swig_IGraph_methods[] = {
    {"nodes", _wrap_IGraph_nodes}, 
    {0,0}
};
static swig_lua_attribute swig_IGraph_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IGraph_bases[] = {0};
static const char *swig_IGraph_base_names[] = {0};
static swig_lua_class _wrap_class_IGraph = { "IGraph", &SWIGTYPE_p_IGraph,0, swig_delete_IGraph, swig_IGraph_methods, swig_IGraph_attributes, swig_IGraph_bases, swig_IGraph_base_names };

static int _wrap_IMember_compound(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  ICompound *result = 0 ;
  
  SWIG_check_num_args("IMember::compound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::compound",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_compound",1,SWIGTYPE_p_IMember);
  }
  
  result = (ICompound *)((IMember const *)arg1)->compound();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ICompound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_section(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  ISection *result = 0 ;
  
  SWIG_check_num_args("IMember::section",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::section",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_section",1,SWIGTYPE_p_IMember);
  }
  
  result = (ISection *)((IMember const *)arg1)->section();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ISection,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_kind(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IMember::MemberKind result;
  
  SWIG_check_num_args("IMember::kind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::kind",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_kind",1,SWIGTYPE_p_IMember);
  }
  
  result = (IMember::MemberKind)((IMember const *)arg1)->kind();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_kindString(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMember::kindString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::kindString",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_kindString",1,SWIGTYPE_p_IMember);
  }
  
  result = (IString *)((IMember const *)arg1)->kindString();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_id(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMember::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::id",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_id",1,SWIGTYPE_p_IMember);
  }
  
  result = (IString *)((IMember const *)arg1)->id();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_protection(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMember::protection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::protection",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_protection",1,SWIGTYPE_p_IMember);
  }
  
  result = (IString *)((IMember const *)arg1)->protection();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_virtualness(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMember::virtualness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::virtualness",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_virtualness",1,SWIGTYPE_p_IMember);
  }
  
  result = (IString *)((IMember const *)arg1)->virtualness();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_type(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  ILinkedTextIterator *result = 0 ;
  
  SWIG_check_num_args("IMember::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::type",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_type",1,SWIGTYPE_p_IMember);
  }
  
  result = (ILinkedTextIterator *)((IMember const *)arg1)->type();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ILinkedTextIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_typeString(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMember::typeString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::typeString",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_typeString",1,SWIGTYPE_p_IMember);
  }
  
  result = (IString *)((IMember const *)arg1)->typeString();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_name(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMember::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::name",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_name",1,SWIGTYPE_p_IMember);
  }
  
  result = (IString *)((IMember const *)arg1)->name();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_readAccessor(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMember::readAccessor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::readAccessor",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_readAccessor",1,SWIGTYPE_p_IMember);
  }
  
  result = (IString *)((IMember const *)arg1)->readAccessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_writeAccessor(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMember::writeAccessor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::writeAccessor",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_writeAccessor",1,SWIGTYPE_p_IMember);
  }
  
  result = (IString *)((IMember const *)arg1)->writeAccessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_definition(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMember::definition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::definition",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_definition",1,SWIGTYPE_p_IMember);
  }
  
  result = (IString *)((IMember const *)arg1)->definition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_argsstring(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMember::argsstring",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::argsstring",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_argsstring",1,SWIGTYPE_p_IMember);
  }
  
  result = (IString *)((IMember const *)arg1)->argsstring();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_isConst(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  bool result;
  
  SWIG_check_num_args("IMember::isConst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::isConst",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_isConst",1,SWIGTYPE_p_IMember);
  }
  
  result = (bool)((IMember const *)arg1)->isConst();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_isVolatile(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  bool result;
  
  SWIG_check_num_args("IMember::isVolatile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::isVolatile",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_isVolatile",1,SWIGTYPE_p_IMember);
  }
  
  result = (bool)((IMember const *)arg1)->isVolatile();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_isStatic(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  bool result;
  
  SWIG_check_num_args("IMember::isStatic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::isStatic",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_isStatic",1,SWIGTYPE_p_IMember);
  }
  
  result = (bool)((IMember const *)arg1)->isStatic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_isExplicit(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  bool result;
  
  SWIG_check_num_args("IMember::isExplicit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::isExplicit",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_isExplicit",1,SWIGTYPE_p_IMember);
  }
  
  result = (bool)((IMember const *)arg1)->isExplicit();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_isInline(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  bool result;
  
  SWIG_check_num_args("IMember::isInline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::isInline",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_isInline",1,SWIGTYPE_p_IMember);
  }
  
  result = (bool)((IMember const *)arg1)->isInline();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_isMutable(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  bool result;
  
  SWIG_check_num_args("IMember::isMutable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::isMutable",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_isMutable",1,SWIGTYPE_p_IMember);
  }
  
  result = (bool)((IMember const *)arg1)->isMutable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_isReadable(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  bool result;
  
  SWIG_check_num_args("IMember::isReadable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::isReadable",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_isReadable",1,SWIGTYPE_p_IMember);
  }
  
  result = (bool)((IMember const *)arg1)->isReadable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_isWritable(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  bool result;
  
  SWIG_check_num_args("IMember::isWritable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::isWritable",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_isWritable",1,SWIGTYPE_p_IMember);
  }
  
  result = (bool)((IMember const *)arg1)->isWritable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_parameters(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IParamIterator *result = 0 ;
  
  SWIG_check_num_args("IMember::parameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::parameters",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_parameters",1,SWIGTYPE_p_IMember);
  }
  
  result = (IParamIterator *)((IMember const *)arg1)->parameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IParamIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_templateParameters(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IParamIterator *result = 0 ;
  
  SWIG_check_num_args("IMember::templateParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::templateParameters",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_templateParameters",1,SWIGTYPE_p_IMember);
  }
  
  result = (IParamIterator *)((IMember const *)arg1)->templateParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IParamIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_initializer(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  ILinkedTextIterator *result = 0 ;
  
  SWIG_check_num_args("IMember::initializer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::initializer",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_initializer",1,SWIGTYPE_p_IMember);
  }
  
  result = (ILinkedTextIterator *)((IMember const *)arg1)->initializer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ILinkedTextIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_exceptions(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  ILinkedTextIterator *result = 0 ;
  
  SWIG_check_num_args("IMember::exceptions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::exceptions",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_exceptions",1,SWIGTYPE_p_IMember);
  }
  
  result = (ILinkedTextIterator *)((IMember const *)arg1)->exceptions();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ILinkedTextIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_references(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IMemberReferenceIterator *result = 0 ;
  
  SWIG_check_num_args("IMember::references",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::references",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_references",1,SWIGTYPE_p_IMember);
  }
  
  result = (IMemberReferenceIterator *)((IMember const *)arg1)->references();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMemberReferenceIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_referencedBy(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IMemberReferenceIterator *result = 0 ;
  
  SWIG_check_num_args("IMember::referencedBy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::referencedBy",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_referencedBy",1,SWIGTYPE_p_IMember);
  }
  
  result = (IMemberReferenceIterator *)((IMember const *)arg1)->referencedBy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMemberReferenceIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_bodyFile(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMember::bodyFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::bodyFile",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_bodyFile",1,SWIGTYPE_p_IMember);
  }
  
  result = (IString *)((IMember const *)arg1)->bodyFile();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_bodyStart(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  int result;
  
  SWIG_check_num_args("IMember::bodyStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::bodyStart",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_bodyStart",1,SWIGTYPE_p_IMember);
  }
  
  result = (int)((IMember const *)arg1)->bodyStart();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_bodyEnd(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  int result;
  
  SWIG_check_num_args("IMember::bodyEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::bodyEnd",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_bodyEnd",1,SWIGTYPE_p_IMember);
  }
  
  result = (int)((IMember const *)arg1)->bodyEnd();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_definitionFile(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IMember::definitionFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::definitionFile",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_definitionFile",1,SWIGTYPE_p_IMember);
  }
  
  result = (IString *)((IMember const *)arg1)->definitionFile();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_definitionLine(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  int result;
  
  SWIG_check_num_args("IMember::definitionLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::definitionLine",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_definitionLine",1,SWIGTYPE_p_IMember);
  }
  
  result = (int)((IMember const *)arg1)->definitionLine();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_reimplements(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IMemberReference *result = 0 ;
  
  SWIG_check_num_args("IMember::reimplements",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::reimplements",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_reimplements",1,SWIGTYPE_p_IMember);
  }
  
  result = (IMemberReference *)((IMember const *)arg1)->reimplements();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMemberReference,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_reimplementedBy(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IMemberReferenceIterator *result = 0 ;
  
  SWIG_check_num_args("IMember::reimplementedBy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::reimplementedBy",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_reimplementedBy",1,SWIGTYPE_p_IMember);
  }
  
  result = (IMemberReferenceIterator *)((IMember const *)arg1)->reimplementedBy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMemberReferenceIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_briefDescription(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IDocRoot *result = 0 ;
  
  SWIG_check_num_args("IMember::briefDescription",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::briefDescription",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_briefDescription",1,SWIGTYPE_p_IMember);
  }
  
  result = (IDocRoot *)((IMember const *)arg1)->briefDescription();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocRoot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_detailedDescription(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IDocRoot *result = 0 ;
  
  SWIG_check_num_args("IMember::detailedDescription",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::detailedDescription",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_detailedDescription",1,SWIGTYPE_p_IMember);
  }
  
  result = (IDocRoot *)((IMember const *)arg1)->detailedDescription();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocRoot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMember_inbodyDescription(lua_State* L) {
  int SWIG_arg = 0;
  IMember *arg1 = (IMember *) 0 ;
  IDocRoot *result = 0 ;
  
  SWIG_check_num_args("IMember::inbodyDescription",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMember::inbodyDescription",1,"IMember const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMember,0))){
    SWIG_fail_ptr("IMember_inbodyDescription",1,SWIGTYPE_p_IMember);
  }
  
  result = (IDocRoot *)((IMember const *)arg1)->inbodyDescription();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocRoot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IMember(void *obj) {
IMember *arg1 = (IMember *) obj;
delete arg1;
}
static swig_lua_method swig_IMember_methods[] = {
    {"compound", _wrap_IMember_compound}, 
    {"section", _wrap_IMember_section}, 
    {"kind", _wrap_IMember_kind}, 
    {"kindString", _wrap_IMember_kindString}, 
    {"id", _wrap_IMember_id}, 
    {"protection", _wrap_IMember_protection}, 
    {"virtualness", _wrap_IMember_virtualness}, 
    {"type", _wrap_IMember_type}, 
    {"typeString", _wrap_IMember_typeString}, 
    {"name", _wrap_IMember_name}, 
    {"readAccessor", _wrap_IMember_readAccessor}, 
    {"writeAccessor", _wrap_IMember_writeAccessor}, 
    {"definition", _wrap_IMember_definition}, 
    {"argsstring", _wrap_IMember_argsstring}, 
    {"isConst", _wrap_IMember_isConst}, 
    {"isVolatile", _wrap_IMember_isVolatile}, 
    {"isStatic", _wrap_IMember_isStatic}, 
    {"isExplicit", _wrap_IMember_isExplicit}, 
    {"isInline", _wrap_IMember_isInline}, 
    {"isMutable", _wrap_IMember_isMutable}, 
    {"isReadable", _wrap_IMember_isReadable}, 
    {"isWritable", _wrap_IMember_isWritable}, 
    {"parameters", _wrap_IMember_parameters}, 
    {"templateParameters", _wrap_IMember_templateParameters}, 
    {"initializer", _wrap_IMember_initializer}, 
    {"exceptions", _wrap_IMember_exceptions}, 
    {"references", _wrap_IMember_references}, 
    {"referencedBy", _wrap_IMember_referencedBy}, 
    {"bodyFile", _wrap_IMember_bodyFile}, 
    {"bodyStart", _wrap_IMember_bodyStart}, 
    {"bodyEnd", _wrap_IMember_bodyEnd}, 
    {"definitionFile", _wrap_IMember_definitionFile}, 
    {"definitionLine", _wrap_IMember_definitionLine}, 
    {"reimplements", _wrap_IMember_reimplements}, 
    {"reimplementedBy", _wrap_IMember_reimplementedBy}, 
    {"briefDescription", _wrap_IMember_briefDescription}, 
    {"detailedDescription", _wrap_IMember_detailedDescription}, 
    {"inbodyDescription", _wrap_IMember_inbodyDescription}, 
    {0,0}
};
static swig_lua_attribute swig_IMember_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IMember_bases[] = {0};
static const char *swig_IMember_base_names[] = {0};
static swig_lua_class _wrap_class_IMember = { "IMember", &SWIGTYPE_p_IMember,0, swig_delete_IMember, swig_IMember_methods, swig_IMember_attributes, swig_IMember_bases, swig_IMember_base_names };

static void swig_delete_IDefine(void *obj) {
IDefine *arg1 = (IDefine *) obj;
delete arg1;
}
static swig_lua_method swig_IDefine_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_IDefine_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDefine_bases[] = {0,0};
static const char *swig_IDefine_base_names[] = {"IMember *",0};
static swig_lua_class _wrap_class_IDefine = { "IDefine", &SWIGTYPE_p_IDefine,0, swig_delete_IDefine, swig_IDefine_methods, swig_IDefine_attributes, swig_IDefine_bases, swig_IDefine_base_names };

static void swig_delete_IProperty(void *obj) {
IProperty *arg1 = (IProperty *) obj;
delete arg1;
}
static swig_lua_method swig_IProperty_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_IProperty_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IProperty_bases[] = {0,0};
static const char *swig_IProperty_base_names[] = {"IMember *",0};
static swig_lua_class _wrap_class_IProperty = { "IProperty", &SWIGTYPE_p_IProperty,0, swig_delete_IProperty, swig_IProperty_methods, swig_IProperty_attributes, swig_IProperty_bases, swig_IProperty_base_names };

static void swig_delete_IVariable(void *obj) {
IVariable *arg1 = (IVariable *) obj;
delete arg1;
}
static swig_lua_method swig_IVariable_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_IVariable_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IVariable_bases[] = {0,0};
static const char *swig_IVariable_base_names[] = {"IMember *",0};
static swig_lua_class _wrap_class_IVariable = { "IVariable", &SWIGTYPE_p_IVariable,0, swig_delete_IVariable, swig_IVariable_methods, swig_IVariable_attributes, swig_IVariable_bases, swig_IVariable_base_names };

static void swig_delete_ITypedef(void *obj) {
ITypedef *arg1 = (ITypedef *) obj;
delete arg1;
}
static swig_lua_method swig_ITypedef_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ITypedef_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ITypedef_bases[] = {0,0};
static const char *swig_ITypedef_base_names[] = {"IMember *",0};
static swig_lua_class _wrap_class_ITypedef = { "ITypedef", &SWIGTYPE_p_ITypedef,0, swig_delete_ITypedef, swig_ITypedef_methods, swig_ITypedef_attributes, swig_ITypedef_bases, swig_ITypedef_base_names };

static void swig_delete_IFunction(void *obj) {
IFunction *arg1 = (IFunction *) obj;
delete arg1;
}
static swig_lua_method swig_IFunction_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_IFunction_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IFunction_bases[] = {0,0};
static const char *swig_IFunction_base_names[] = {"IMember *",0};
static swig_lua_class _wrap_class_IFunction = { "IFunction", &SWIGTYPE_p_IFunction,0, swig_delete_IFunction, swig_IFunction_methods, swig_IFunction_attributes, swig_IFunction_bases, swig_IFunction_base_names };

static void swig_delete_ISignal(void *obj) {
ISignal *arg1 = (ISignal *) obj;
delete arg1;
}
static swig_lua_method swig_ISignal_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ISignal_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ISignal_bases[] = {0,0};
static const char *swig_ISignal_base_names[] = {"IMember *",0};
static swig_lua_class _wrap_class_ISignal = { "ISignal", &SWIGTYPE_p_ISignal,0, swig_delete_ISignal, swig_ISignal_methods, swig_ISignal_attributes, swig_ISignal_bases, swig_ISignal_base_names };

static void swig_delete_IPrototype(void *obj) {
IPrototype *arg1 = (IPrototype *) obj;
delete arg1;
}
static swig_lua_method swig_IPrototype_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_IPrototype_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IPrototype_bases[] = {0,0};
static const char *swig_IPrototype_base_names[] = {"IMember *",0};
static swig_lua_class _wrap_class_IPrototype = { "IPrototype", &SWIGTYPE_p_IPrototype,0, swig_delete_IPrototype, swig_IPrototype_methods, swig_IPrototype_attributes, swig_IPrototype_bases, swig_IPrototype_base_names };

static void swig_delete_IFriend(void *obj) {
IFriend *arg1 = (IFriend *) obj;
delete arg1;
}
static swig_lua_method swig_IFriend_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_IFriend_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IFriend_bases[] = {0,0};
static const char *swig_IFriend_base_names[] = {"IMember *",0};
static swig_lua_class _wrap_class_IFriend = { "IFriend", &SWIGTYPE_p_IFriend,0, swig_delete_IFriend, swig_IFriend_methods, swig_IFriend_attributes, swig_IFriend_bases, swig_IFriend_base_names };

static void swig_delete_IDCOP(void *obj) {
IDCOP *arg1 = (IDCOP *) obj;
delete arg1;
}
static swig_lua_method swig_IDCOP_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_IDCOP_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDCOP_bases[] = {0,0};
static const char *swig_IDCOP_base_names[] = {"IMember *",0};
static swig_lua_class _wrap_class_IDCOP = { "IDCOP", &SWIGTYPE_p_IDCOP,0, swig_delete_IDCOP, swig_IDCOP_methods, swig_IDCOP_attributes, swig_IDCOP_bases, swig_IDCOP_base_names };

static void swig_delete_ISlot(void *obj) {
ISlot *arg1 = (ISlot *) obj;
delete arg1;
}
static swig_lua_method swig_ISlot_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ISlot_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ISlot_bases[] = {0,0};
static const char *swig_ISlot_base_names[] = {"IMember *",0};
static swig_lua_class _wrap_class_ISlot = { "ISlot", &SWIGTYPE_p_ISlot,0, swig_delete_ISlot, swig_ISlot_methods, swig_ISlot_attributes, swig_ISlot_bases, swig_ISlot_base_names };

static int _wrap_IEnumValue_name(lua_State* L) {
  int SWIG_arg = 0;
  IEnumValue *arg1 = (IEnumValue *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IEnumValue::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IEnumValue::name",1,"IEnumValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IEnumValue,0))){
    SWIG_fail_ptr("IEnumValue_name",1,SWIGTYPE_p_IEnumValue);
  }
  
  result = (IString *)((IEnumValue const *)arg1)->name();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IEnumValue(void *obj) {
IEnumValue *arg1 = (IEnumValue *) obj;
delete arg1;
}
static swig_lua_method swig_IEnumValue_methods[] = {
    {"name", _wrap_IEnumValue_name}, 
    {0,0}
};
static swig_lua_attribute swig_IEnumValue_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IEnumValue_bases[] = {0,0};
static const char *swig_IEnumValue_base_names[] = {"IMember *",0};
static swig_lua_class _wrap_class_IEnumValue = { "IEnumValue", &SWIGTYPE_p_IEnumValue,0, swig_delete_IEnumValue, swig_IEnumValue_methods, swig_IEnumValue_attributes, swig_IEnumValue_bases, swig_IEnumValue_base_names };

static int _wrap_IInclude_name(lua_State* L) {
  int SWIG_arg = 0;
  IInclude *arg1 = (IInclude *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IInclude::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IInclude::name",1,"IInclude const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IInclude,0))){
    SWIG_fail_ptr("IInclude_name",1,SWIGTYPE_p_IInclude);
  }
  
  result = (IString *)((IInclude const *)arg1)->name();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IInclude_refId(lua_State* L) {
  int SWIG_arg = 0;
  IInclude *arg1 = (IInclude *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IInclude::refId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IInclude::refId",1,"IInclude const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IInclude,0))){
    SWIG_fail_ptr("IInclude_refId",1,SWIGTYPE_p_IInclude);
  }
  
  result = (IString *)((IInclude const *)arg1)->refId();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IInclude_isLocal(lua_State* L) {
  int SWIG_arg = 0;
  IInclude *arg1 = (IInclude *) 0 ;
  bool result;
  
  SWIG_check_num_args("IInclude::isLocal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IInclude::isLocal",1,"IInclude const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IInclude,0))){
    SWIG_fail_ptr("IInclude_isLocal",1,SWIGTYPE_p_IInclude);
  }
  
  result = (bool)((IInclude const *)arg1)->isLocal();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IInclude(void *obj) {
IInclude *arg1 = (IInclude *) obj;
delete arg1;
}
static swig_lua_method swig_IInclude_methods[] = {
    {"name", _wrap_IInclude_name}, 
    {"refId", _wrap_IInclude_refId}, 
    {"isLocal", _wrap_IInclude_isLocal}, 
    {0,0}
};
static swig_lua_attribute swig_IInclude_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IInclude_bases[] = {0};
static const char *swig_IInclude_base_names[] = {0};
static swig_lua_class _wrap_class_IInclude = { "IInclude", &SWIGTYPE_p_IInclude,0, swig_delete_IInclude, swig_IInclude_methods, swig_IInclude_attributes, swig_IInclude_bases, swig_IInclude_base_names };

static int _wrap_IIncludeIterator_toFirst(lua_State* L) {
  int SWIG_arg = 0;
  IIncludeIterator *arg1 = (IIncludeIterator *) 0 ;
  IInclude *result = 0 ;
  
  SWIG_check_num_args("IIncludeIterator::toFirst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IIncludeIterator::toFirst",1,"IIncludeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IIncludeIterator,0))){
    SWIG_fail_ptr("IIncludeIterator_toFirst",1,SWIGTYPE_p_IIncludeIterator);
  }
  
  result = (IInclude *)(arg1)->toFirst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IInclude,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIncludeIterator_toLast(lua_State* L) {
  int SWIG_arg = 0;
  IIncludeIterator *arg1 = (IIncludeIterator *) 0 ;
  IInclude *result = 0 ;
  
  SWIG_check_num_args("IIncludeIterator::toLast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IIncludeIterator::toLast",1,"IIncludeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IIncludeIterator,0))){
    SWIG_fail_ptr("IIncludeIterator_toLast",1,SWIGTYPE_p_IIncludeIterator);
  }
  
  result = (IInclude *)(arg1)->toLast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IInclude,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIncludeIterator_toNext(lua_State* L) {
  int SWIG_arg = 0;
  IIncludeIterator *arg1 = (IIncludeIterator *) 0 ;
  IInclude *result = 0 ;
  
  SWIG_check_num_args("IIncludeIterator::toNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IIncludeIterator::toNext",1,"IIncludeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IIncludeIterator,0))){
    SWIG_fail_ptr("IIncludeIterator_toNext",1,SWIGTYPE_p_IIncludeIterator);
  }
  
  result = (IInclude *)(arg1)->toNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IInclude,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIncludeIterator_toPrev(lua_State* L) {
  int SWIG_arg = 0;
  IIncludeIterator *arg1 = (IIncludeIterator *) 0 ;
  IInclude *result = 0 ;
  
  SWIG_check_num_args("IIncludeIterator::toPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IIncludeIterator::toPrev",1,"IIncludeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IIncludeIterator,0))){
    SWIG_fail_ptr("IIncludeIterator_toPrev",1,SWIGTYPE_p_IIncludeIterator);
  }
  
  result = (IInclude *)(arg1)->toPrev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IInclude,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIncludeIterator_current(lua_State* L) {
  int SWIG_arg = 0;
  IIncludeIterator *arg1 = (IIncludeIterator *) 0 ;
  IInclude *result = 0 ;
  
  SWIG_check_num_args("IIncludeIterator::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IIncludeIterator::current",1,"IIncludeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IIncludeIterator,0))){
    SWIG_fail_ptr("IIncludeIterator_current",1,SWIGTYPE_p_IIncludeIterator);
  }
  
  result = (IInclude *)((IIncludeIterator const *)arg1)->current();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IInclude,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIncludeIterator_release(lua_State* L) {
  int SWIG_arg = 0;
  IIncludeIterator *arg1 = (IIncludeIterator *) 0 ;
  
  SWIG_check_num_args("IIncludeIterator::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IIncludeIterator::release",1,"IIncludeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IIncludeIterator,0))){
    SWIG_fail_ptr("IIncludeIterator_release",1,SWIGTYPE_p_IIncludeIterator);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IIncludeIterator(void *obj) {
IIncludeIterator *arg1 = (IIncludeIterator *) obj;
delete arg1;
}
static swig_lua_method swig_IIncludeIterator_methods[] = {
    {"toFirst", _wrap_IIncludeIterator_toFirst}, 
    {"toLast", _wrap_IIncludeIterator_toLast}, 
    {"toNext", _wrap_IIncludeIterator_toNext}, 
    {"toPrev", _wrap_IIncludeIterator_toPrev}, 
    {"current", _wrap_IIncludeIterator_current}, 
    {"release", _wrap_IIncludeIterator_release}, 
    {0,0}
};
static swig_lua_attribute swig_IIncludeIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IIncludeIterator_bases[] = {0};
static const char *swig_IIncludeIterator_base_names[] = {0};
static swig_lua_class _wrap_class_IIncludeIterator = { "IIncludeIterator", &SWIGTYPE_p_IIncludeIterator,0, swig_delete_IIncludeIterator, swig_IIncludeIterator_methods, swig_IIncludeIterator_attributes, swig_IIncludeIterator_bases, swig_IIncludeIterator_base_names };

static int _wrap_IMemberIterator_toFirst(lua_State* L) {
  int SWIG_arg = 0;
  IMemberIterator *arg1 = (IMemberIterator *) 0 ;
  IMember *result = 0 ;
  
  SWIG_check_num_args("IMemberIterator::toFirst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberIterator::toFirst",1,"IMemberIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberIterator,0))){
    SWIG_fail_ptr("IMemberIterator_toFirst",1,SWIGTYPE_p_IMemberIterator);
  }
  
  result = (IMember *)(arg1)->toFirst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMember,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberIterator_toLast(lua_State* L) {
  int SWIG_arg = 0;
  IMemberIterator *arg1 = (IMemberIterator *) 0 ;
  IMember *result = 0 ;
  
  SWIG_check_num_args("IMemberIterator::toLast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberIterator::toLast",1,"IMemberIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberIterator,0))){
    SWIG_fail_ptr("IMemberIterator_toLast",1,SWIGTYPE_p_IMemberIterator);
  }
  
  result = (IMember *)(arg1)->toLast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMember,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberIterator_toNext(lua_State* L) {
  int SWIG_arg = 0;
  IMemberIterator *arg1 = (IMemberIterator *) 0 ;
  IMember *result = 0 ;
  
  SWIG_check_num_args("IMemberIterator::toNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberIterator::toNext",1,"IMemberIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberIterator,0))){
    SWIG_fail_ptr("IMemberIterator_toNext",1,SWIGTYPE_p_IMemberIterator);
  }
  
  result = (IMember *)(arg1)->toNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMember,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberIterator_toPrev(lua_State* L) {
  int SWIG_arg = 0;
  IMemberIterator *arg1 = (IMemberIterator *) 0 ;
  IMember *result = 0 ;
  
  SWIG_check_num_args("IMemberIterator::toPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberIterator::toPrev",1,"IMemberIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberIterator,0))){
    SWIG_fail_ptr("IMemberIterator_toPrev",1,SWIGTYPE_p_IMemberIterator);
  }
  
  result = (IMember *)(arg1)->toPrev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMember,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberIterator_current(lua_State* L) {
  int SWIG_arg = 0;
  IMemberIterator *arg1 = (IMemberIterator *) 0 ;
  IMember *result = 0 ;
  
  SWIG_check_num_args("IMemberIterator::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberIterator::current",1,"IMemberIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberIterator,0))){
    SWIG_fail_ptr("IMemberIterator_current",1,SWIGTYPE_p_IMemberIterator);
  }
  
  result = (IMember *)((IMemberIterator const *)arg1)->current();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMember,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMemberIterator_release(lua_State* L) {
  int SWIG_arg = 0;
  IMemberIterator *arg1 = (IMemberIterator *) 0 ;
  
  SWIG_check_num_args("IMemberIterator::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IMemberIterator::release",1,"IMemberIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMemberIterator,0))){
    SWIG_fail_ptr("IMemberIterator_release",1,SWIGTYPE_p_IMemberIterator);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IMemberIterator(void *obj) {
IMemberIterator *arg1 = (IMemberIterator *) obj;
delete arg1;
}
static swig_lua_method swig_IMemberIterator_methods[] = {
    {"toFirst", _wrap_IMemberIterator_toFirst}, 
    {"toLast", _wrap_IMemberIterator_toLast}, 
    {"toNext", _wrap_IMemberIterator_toNext}, 
    {"toPrev", _wrap_IMemberIterator_toPrev}, 
    {"current", _wrap_IMemberIterator_current}, 
    {"release", _wrap_IMemberIterator_release}, 
    {0,0}
};
static swig_lua_attribute swig_IMemberIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IMemberIterator_bases[] = {0};
static const char *swig_IMemberIterator_base_names[] = {0};
static swig_lua_class _wrap_class_IMemberIterator = { "IMemberIterator", &SWIGTYPE_p_IMemberIterator,0, swig_delete_IMemberIterator, swig_IMemberIterator_methods, swig_IMemberIterator_attributes, swig_IMemberIterator_bases, swig_IMemberIterator_base_names };

static int _wrap_IEnum_enumValues(lua_State* L) {
  int SWIG_arg = 0;
  IEnum *arg1 = (IEnum *) 0 ;
  IMemberIterator *result = 0 ;
  
  SWIG_check_num_args("IEnum::enumValues",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IEnum::enumValues",1,"IEnum const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IEnum,0))){
    SWIG_fail_ptr("IEnum_enumValues",1,SWIGTYPE_p_IEnum);
  }
  
  result = (IMemberIterator *)((IEnum const *)arg1)->enumValues();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMemberIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IEnum(void *obj) {
IEnum *arg1 = (IEnum *) obj;
delete arg1;
}
static swig_lua_method swig_IEnum_methods[] = {
    {"enumValues", _wrap_IEnum_enumValues}, 
    {0,0}
};
static swig_lua_attribute swig_IEnum_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IEnum_bases[] = {0,0};
static const char *swig_IEnum_base_names[] = {"IMember *",0};
static swig_lua_class _wrap_class_IEnum = { "IEnum", &SWIGTYPE_p_IEnum,0, swig_delete_IEnum, swig_IEnum_methods, swig_IEnum_attributes, swig_IEnum_bases, swig_IEnum_base_names };

static int _wrap_ISection_kindString(lua_State* L) {
  int SWIG_arg = 0;
  ISection *arg1 = (ISection *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("ISection::kindString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ISection::kindString",1,"ISection const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ISection,0))){
    SWIG_fail_ptr("ISection_kindString",1,SWIGTYPE_p_ISection);
  }
  
  result = (IString *)((ISection const *)arg1)->kindString();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISection_kind(lua_State* L) {
  int SWIG_arg = 0;
  ISection *arg1 = (ISection *) 0 ;
  ISection::SectionKind result;
  
  SWIG_check_num_args("ISection::kind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ISection::kind",1,"ISection const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ISection,0))){
    SWIG_fail_ptr("ISection_kind",1,SWIGTYPE_p_ISection);
  }
  
  result = (ISection::SectionKind)((ISection const *)arg1)->kind();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISection_description(lua_State* L) {
  int SWIG_arg = 0;
  ISection *arg1 = (ISection *) 0 ;
  IDocRoot *result = 0 ;
  
  SWIG_check_num_args("ISection::description",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ISection::description",1,"ISection const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ISection,0))){
    SWIG_fail_ptr("ISection_description",1,SWIGTYPE_p_ISection);
  }
  
  result = (IDocRoot *)((ISection const *)arg1)->description();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocRoot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISection_members(lua_State* L) {
  int SWIG_arg = 0;
  ISection *arg1 = (ISection *) 0 ;
  IMemberIterator *result = 0 ;
  
  SWIG_check_num_args("ISection::members",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ISection::members",1,"ISection const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ISection,0))){
    SWIG_fail_ptr("ISection_members",1,SWIGTYPE_p_ISection);
  }
  
  result = (IMemberIterator *)((ISection const *)arg1)->members();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMemberIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISection_isStatic(lua_State* L) {
  int SWIG_arg = 0;
  ISection *arg1 = (ISection *) 0 ;
  bool result;
  
  SWIG_check_num_args("ISection::isStatic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ISection::isStatic",1,"ISection const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ISection,0))){
    SWIG_fail_ptr("ISection_isStatic",1,SWIGTYPE_p_ISection);
  }
  
  result = (bool)((ISection const *)arg1)->isStatic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISection_isPublic(lua_State* L) {
  int SWIG_arg = 0;
  ISection *arg1 = (ISection *) 0 ;
  bool result;
  
  SWIG_check_num_args("ISection::isPublic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ISection::isPublic",1,"ISection const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ISection,0))){
    SWIG_fail_ptr("ISection_isPublic",1,SWIGTYPE_p_ISection);
  }
  
  result = (bool)((ISection const *)arg1)->isPublic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISection_isPrivate(lua_State* L) {
  int SWIG_arg = 0;
  ISection *arg1 = (ISection *) 0 ;
  bool result;
  
  SWIG_check_num_args("ISection::isPrivate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ISection::isPrivate",1,"ISection const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ISection,0))){
    SWIG_fail_ptr("ISection_isPrivate",1,SWIGTYPE_p_ISection);
  }
  
  result = (bool)((ISection const *)arg1)->isPrivate();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISection_isProtected(lua_State* L) {
  int SWIG_arg = 0;
  ISection *arg1 = (ISection *) 0 ;
  bool result;
  
  SWIG_check_num_args("ISection::isProtected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ISection::isProtected",1,"ISection const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ISection,0))){
    SWIG_fail_ptr("ISection_isProtected",1,SWIGTYPE_p_ISection);
  }
  
  result = (bool)((ISection const *)arg1)->isProtected();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ISection(void *obj) {
ISection *arg1 = (ISection *) obj;
delete arg1;
}
static swig_lua_method swig_ISection_methods[] = {
    {"kindString", _wrap_ISection_kindString}, 
    {"kind", _wrap_ISection_kind}, 
    {"description", _wrap_ISection_description}, 
    {"members", _wrap_ISection_members}, 
    {"isStatic", _wrap_ISection_isStatic}, 
    {"isPublic", _wrap_ISection_isPublic}, 
    {"isPrivate", _wrap_ISection_isPrivate}, 
    {"isProtected", _wrap_ISection_isProtected}, 
    {0,0}
};
static swig_lua_attribute swig_ISection_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ISection_bases[] = {0};
static const char *swig_ISection_base_names[] = {0};
static swig_lua_class _wrap_class_ISection = { "ISection", &SWIGTYPE_p_ISection,0, swig_delete_ISection, swig_ISection_methods, swig_ISection_attributes, swig_ISection_bases, swig_ISection_base_names };

static int _wrap_IUserDefined_header(lua_State* L) {
  int SWIG_arg = 0;
  IUserDefined *arg1 = (IUserDefined *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IUserDefined::header",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IUserDefined::header",1,"IUserDefined const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IUserDefined,0))){
    SWIG_fail_ptr("IUserDefined_header",1,SWIGTYPE_p_IUserDefined);
  }
  
  result = (IString *)((IUserDefined const *)arg1)->header();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IUserDefined(void *obj) {
IUserDefined *arg1 = (IUserDefined *) obj;
delete arg1;
}
static swig_lua_method swig_IUserDefined_methods[] = {
    {"header", _wrap_IUserDefined_header}, 
    {0,0}
};
static swig_lua_attribute swig_IUserDefined_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IUserDefined_bases[] = {0,0};
static const char *swig_IUserDefined_base_names[] = {"ISection *",0};
static swig_lua_class _wrap_class_IUserDefined = { "IUserDefined", &SWIGTYPE_p_IUserDefined,0, swig_delete_IUserDefined, swig_IUserDefined_methods, swig_IUserDefined_attributes, swig_IUserDefined_bases, swig_IUserDefined_base_names };

static int _wrap_ISectionIterator_toFirst(lua_State* L) {
  int SWIG_arg = 0;
  ISectionIterator *arg1 = (ISectionIterator *) 0 ;
  ISection *result = 0 ;
  
  SWIG_check_num_args("ISectionIterator::toFirst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ISectionIterator::toFirst",1,"ISectionIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ISectionIterator,0))){
    SWIG_fail_ptr("ISectionIterator_toFirst",1,SWIGTYPE_p_ISectionIterator);
  }
  
  result = (ISection *)(arg1)->toFirst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ISection,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISectionIterator_toLast(lua_State* L) {
  int SWIG_arg = 0;
  ISectionIterator *arg1 = (ISectionIterator *) 0 ;
  ISection *result = 0 ;
  
  SWIG_check_num_args("ISectionIterator::toLast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ISectionIterator::toLast",1,"ISectionIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ISectionIterator,0))){
    SWIG_fail_ptr("ISectionIterator_toLast",1,SWIGTYPE_p_ISectionIterator);
  }
  
  result = (ISection *)(arg1)->toLast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ISection,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISectionIterator_toNext(lua_State* L) {
  int SWIG_arg = 0;
  ISectionIterator *arg1 = (ISectionIterator *) 0 ;
  ISection *result = 0 ;
  
  SWIG_check_num_args("ISectionIterator::toNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ISectionIterator::toNext",1,"ISectionIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ISectionIterator,0))){
    SWIG_fail_ptr("ISectionIterator_toNext",1,SWIGTYPE_p_ISectionIterator);
  }
  
  result = (ISection *)(arg1)->toNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ISection,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISectionIterator_toPrev(lua_State* L) {
  int SWIG_arg = 0;
  ISectionIterator *arg1 = (ISectionIterator *) 0 ;
  ISection *result = 0 ;
  
  SWIG_check_num_args("ISectionIterator::toPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ISectionIterator::toPrev",1,"ISectionIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ISectionIterator,0))){
    SWIG_fail_ptr("ISectionIterator_toPrev",1,SWIGTYPE_p_ISectionIterator);
  }
  
  result = (ISection *)(arg1)->toPrev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ISection,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISectionIterator_current(lua_State* L) {
  int SWIG_arg = 0;
  ISectionIterator *arg1 = (ISectionIterator *) 0 ;
  ISection *result = 0 ;
  
  SWIG_check_num_args("ISectionIterator::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ISectionIterator::current",1,"ISectionIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ISectionIterator,0))){
    SWIG_fail_ptr("ISectionIterator_current",1,SWIGTYPE_p_ISectionIterator);
  }
  
  result = (ISection *)((ISectionIterator const *)arg1)->current();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ISection,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISectionIterator_release(lua_State* L) {
  int SWIG_arg = 0;
  ISectionIterator *arg1 = (ISectionIterator *) 0 ;
  
  SWIG_check_num_args("ISectionIterator::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ISectionIterator::release",1,"ISectionIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ISectionIterator,0))){
    SWIG_fail_ptr("ISectionIterator_release",1,SWIGTYPE_p_ISectionIterator);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ISectionIterator(void *obj) {
ISectionIterator *arg1 = (ISectionIterator *) obj;
delete arg1;
}
static swig_lua_method swig_ISectionIterator_methods[] = {
    {"toFirst", _wrap_ISectionIterator_toFirst}, 
    {"toLast", _wrap_ISectionIterator_toLast}, 
    {"toNext", _wrap_ISectionIterator_toNext}, 
    {"toPrev", _wrap_ISectionIterator_toPrev}, 
    {"current", _wrap_ISectionIterator_current}, 
    {"release", _wrap_ISectionIterator_release}, 
    {0,0}
};
static swig_lua_attribute swig_ISectionIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ISectionIterator_bases[] = {0};
static const char *swig_ISectionIterator_base_names[] = {0};
static swig_lua_class _wrap_class_ISectionIterator = { "ISectionIterator", &SWIGTYPE_p_ISectionIterator,0, swig_delete_ISectionIterator, swig_ISectionIterator_methods, swig_ISectionIterator_attributes, swig_ISectionIterator_bases, swig_ISectionIterator_base_names };

static int _wrap_ICompound_name(lua_State* L) {
  int SWIG_arg = 0;
  ICompound *arg1 = (ICompound *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("ICompound::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompound::name",1,"ICompound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompound,0))){
    SWIG_fail_ptr("ICompound_name",1,SWIGTYPE_p_ICompound);
  }
  
  result = (IString *)((ICompound const *)arg1)->name();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICompound_id(lua_State* L) {
  int SWIG_arg = 0;
  ICompound *arg1 = (ICompound *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("ICompound::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompound::id",1,"ICompound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompound,0))){
    SWIG_fail_ptr("ICompound_id",1,SWIGTYPE_p_ICompound);
  }
  
  result = (IString *)((ICompound const *)arg1)->id();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICompound_kind(lua_State* L) {
  int SWIG_arg = 0;
  ICompound *arg1 = (ICompound *) 0 ;
  ICompound::CompoundKind result;
  
  SWIG_check_num_args("ICompound::kind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompound::kind",1,"ICompound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompound,0))){
    SWIG_fail_ptr("ICompound_kind",1,SWIGTYPE_p_ICompound);
  }
  
  result = (ICompound::CompoundKind)((ICompound const *)arg1)->kind();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICompound_kindString(lua_State* L) {
  int SWIG_arg = 0;
  ICompound *arg1 = (ICompound *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("ICompound::kindString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompound::kindString",1,"ICompound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompound,0))){
    SWIG_fail_ptr("ICompound_kindString",1,SWIGTYPE_p_ICompound);
  }
  
  result = (IString *)((ICompound const *)arg1)->kindString();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICompound_sections(lua_State* L) {
  int SWIG_arg = 0;
  ICompound *arg1 = (ICompound *) 0 ;
  ISectionIterator *result = 0 ;
  
  SWIG_check_num_args("ICompound::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompound::sections",1,"ICompound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompound,0))){
    SWIG_fail_ptr("ICompound_sections",1,SWIGTYPE_p_ICompound);
  }
  
  result = (ISectionIterator *)((ICompound const *)arg1)->sections();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ISectionIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICompound_briefDescription(lua_State* L) {
  int SWIG_arg = 0;
  ICompound *arg1 = (ICompound *) 0 ;
  IDocRoot *result = 0 ;
  
  SWIG_check_num_args("ICompound::briefDescription",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompound::briefDescription",1,"ICompound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompound,0))){
    SWIG_fail_ptr("ICompound_briefDescription",1,SWIGTYPE_p_ICompound);
  }
  
  result = (IDocRoot *)((ICompound const *)arg1)->briefDescription();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocRoot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICompound_detailedDescription(lua_State* L) {
  int SWIG_arg = 0;
  ICompound *arg1 = (ICompound *) 0 ;
  IDocRoot *result = 0 ;
  
  SWIG_check_num_args("ICompound::detailedDescription",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompound::detailedDescription",1,"ICompound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompound,0))){
    SWIG_fail_ptr("ICompound_detailedDescription",1,SWIGTYPE_p_ICompound);
  }
  
  result = (IDocRoot *)((ICompound const *)arg1)->detailedDescription();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocRoot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICompound_memberById(lua_State* L) {
  int SWIG_arg = 0;
  ICompound *arg1 = (ICompound *) 0 ;
  char *arg2 = (char *) 0 ;
  IMember *result = 0 ;
  
  SWIG_check_num_args("ICompound::memberById",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompound::memberById",1,"ICompound const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ICompound::memberById",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompound,0))){
    SWIG_fail_ptr("ICompound_memberById",1,SWIGTYPE_p_ICompound);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (IMember *)((ICompound const *)arg1)->memberById((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMember,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICompound_memberByName(lua_State* L) {
  int SWIG_arg = 0;
  ICompound *arg1 = (ICompound *) 0 ;
  char *arg2 = (char *) 0 ;
  IMemberIterator *result = 0 ;
  
  SWIG_check_num_args("ICompound::memberByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompound::memberByName",1,"ICompound const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ICompound::memberByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompound,0))){
    SWIG_fail_ptr("ICompound_memberByName",1,SWIGTYPE_p_ICompound);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (IMemberIterator *)((ICompound const *)arg1)->memberByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IMemberIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICompound_release(lua_State* L) {
  int SWIG_arg = 0;
  ICompound *arg1 = (ICompound *) 0 ;
  
  SWIG_check_num_args("ICompound::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompound::release",1,"ICompound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompound,0))){
    SWIG_fail_ptr("ICompound_release",1,SWIGTYPE_p_ICompound);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ICompound(void *obj) {
ICompound *arg1 = (ICompound *) obj;
delete arg1;
}
static swig_lua_method swig_ICompound_methods[] = {
    {"name", _wrap_ICompound_name}, 
    {"id", _wrap_ICompound_id}, 
    {"kind", _wrap_ICompound_kind}, 
    {"kindString", _wrap_ICompound_kindString}, 
    {"sections", _wrap_ICompound_sections}, 
    {"briefDescription", _wrap_ICompound_briefDescription}, 
    {"detailedDescription", _wrap_ICompound_detailedDescription}, 
    {"memberById", _wrap_ICompound_memberById}, 
    {"memberByName", _wrap_ICompound_memberByName}, 
    {"release", _wrap_ICompound_release}, 
    {0,0}
};
static swig_lua_attribute swig_ICompound_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ICompound_bases[] = {0};
static const char *swig_ICompound_base_names[] = {0};
static swig_lua_class _wrap_class_ICompound = { "ICompound", &SWIGTYPE_p_ICompound,0, swig_delete_ICompound, swig_ICompound_methods, swig_ICompound_attributes, swig_ICompound_bases, swig_ICompound_base_names };

static int _wrap_ICompoundIterator_toFirst(lua_State* L) {
  int SWIG_arg = 0;
  ICompoundIterator *arg1 = (ICompoundIterator *) 0 ;
  
  SWIG_check_num_args("ICompoundIterator::toFirst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompoundIterator::toFirst",1,"ICompoundIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompoundIterator,0))){
    SWIG_fail_ptr("ICompoundIterator_toFirst",1,SWIGTYPE_p_ICompoundIterator);
  }
  
  (arg1)->toFirst();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICompoundIterator_toLast(lua_State* L) {
  int SWIG_arg = 0;
  ICompoundIterator *arg1 = (ICompoundIterator *) 0 ;
  
  SWIG_check_num_args("ICompoundIterator::toLast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompoundIterator::toLast",1,"ICompoundIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompoundIterator,0))){
    SWIG_fail_ptr("ICompoundIterator_toLast",1,SWIGTYPE_p_ICompoundIterator);
  }
  
  (arg1)->toLast();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICompoundIterator_toNext(lua_State* L) {
  int SWIG_arg = 0;
  ICompoundIterator *arg1 = (ICompoundIterator *) 0 ;
  
  SWIG_check_num_args("ICompoundIterator::toNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompoundIterator::toNext",1,"ICompoundIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompoundIterator,0))){
    SWIG_fail_ptr("ICompoundIterator_toNext",1,SWIGTYPE_p_ICompoundIterator);
  }
  
  (arg1)->toNext();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICompoundIterator_toPrev(lua_State* L) {
  int SWIG_arg = 0;
  ICompoundIterator *arg1 = (ICompoundIterator *) 0 ;
  
  SWIG_check_num_args("ICompoundIterator::toPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompoundIterator::toPrev",1,"ICompoundIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompoundIterator,0))){
    SWIG_fail_ptr("ICompoundIterator_toPrev",1,SWIGTYPE_p_ICompoundIterator);
  }
  
  (arg1)->toPrev();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICompoundIterator_current(lua_State* L) {
  int SWIG_arg = 0;
  ICompoundIterator *arg1 = (ICompoundIterator *) 0 ;
  ICompound *result = 0 ;
  
  SWIG_check_num_args("ICompoundIterator::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompoundIterator::current",1,"ICompoundIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompoundIterator,0))){
    SWIG_fail_ptr("ICompoundIterator_current",1,SWIGTYPE_p_ICompoundIterator);
  }
  
  result = (ICompound *)((ICompoundIterator const *)arg1)->current();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ICompound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICompoundIterator_release(lua_State* L) {
  int SWIG_arg = 0;
  ICompoundIterator *arg1 = (ICompoundIterator *) 0 ;
  
  SWIG_check_num_args("ICompoundIterator::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ICompoundIterator::release",1,"ICompoundIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ICompoundIterator,0))){
    SWIG_fail_ptr("ICompoundIterator_release",1,SWIGTYPE_p_ICompoundIterator);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ICompoundIterator(void *obj) {
ICompoundIterator *arg1 = (ICompoundIterator *) obj;
delete arg1;
}
static swig_lua_method swig_ICompoundIterator_methods[] = {
    {"toFirst", _wrap_ICompoundIterator_toFirst}, 
    {"toLast", _wrap_ICompoundIterator_toLast}, 
    {"toNext", _wrap_ICompoundIterator_toNext}, 
    {"toPrev", _wrap_ICompoundIterator_toPrev}, 
    {"current", _wrap_ICompoundIterator_current}, 
    {"release", _wrap_ICompoundIterator_release}, 
    {0,0}
};
static swig_lua_attribute swig_ICompoundIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ICompoundIterator_bases[] = {0};
static const char *swig_ICompoundIterator_base_names[] = {0};
static swig_lua_class _wrap_class_ICompoundIterator = { "ICompoundIterator", &SWIGTYPE_p_ICompoundIterator,0, swig_delete_ICompoundIterator, swig_ICompoundIterator_methods, swig_ICompoundIterator_attributes, swig_ICompoundIterator_bases, swig_ICompoundIterator_base_names };

static int _wrap_IRelatedCompound_compound(lua_State* L) {
  int SWIG_arg = 0;
  IRelatedCompound *arg1 = (IRelatedCompound *) 0 ;
  ICompound *result = 0 ;
  
  SWIG_check_num_args("IRelatedCompound::compound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IRelatedCompound::compound",1,"IRelatedCompound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IRelatedCompound,0))){
    SWIG_fail_ptr("IRelatedCompound_compound",1,SWIGTYPE_p_IRelatedCompound);
  }
  
  result = (ICompound *)((IRelatedCompound const *)arg1)->compound();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ICompound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRelatedCompound_protection(lua_State* L) {
  int SWIG_arg = 0;
  IRelatedCompound *arg1 = (IRelatedCompound *) 0 ;
  IRelatedCompound::Protection result;
  
  SWIG_check_num_args("IRelatedCompound::protection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IRelatedCompound::protection",1,"IRelatedCompound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IRelatedCompound,0))){
    SWIG_fail_ptr("IRelatedCompound_protection",1,SWIGTYPE_p_IRelatedCompound);
  }
  
  result = (IRelatedCompound::Protection)((IRelatedCompound const *)arg1)->protection();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRelatedCompound_kind(lua_State* L) {
  int SWIG_arg = 0;
  IRelatedCompound *arg1 = (IRelatedCompound *) 0 ;
  IRelatedCompound::Kind result;
  
  SWIG_check_num_args("IRelatedCompound::kind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IRelatedCompound::kind",1,"IRelatedCompound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IRelatedCompound,0))){
    SWIG_fail_ptr("IRelatedCompound_kind",1,SWIGTYPE_p_IRelatedCompound);
  }
  
  result = (IRelatedCompound::Kind)((IRelatedCompound const *)arg1)->kind();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRelatedCompound_name(lua_State* L) {
  int SWIG_arg = 0;
  IRelatedCompound *arg1 = (IRelatedCompound *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IRelatedCompound::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IRelatedCompound::name",1,"IRelatedCompound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IRelatedCompound,0))){
    SWIG_fail_ptr("IRelatedCompound_name",1,SWIGTYPE_p_IRelatedCompound);
  }
  
  result = (IString *)((IRelatedCompound const *)arg1)->name();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IRelatedCompound(void *obj) {
IRelatedCompound *arg1 = (IRelatedCompound *) obj;
delete arg1;
}
static swig_lua_method swig_IRelatedCompound_methods[] = {
    {"compound", _wrap_IRelatedCompound_compound}, 
    {"protection", _wrap_IRelatedCompound_protection}, 
    {"kind", _wrap_IRelatedCompound_kind}, 
    {"name", _wrap_IRelatedCompound_name}, 
    {0,0}
};
static swig_lua_attribute swig_IRelatedCompound_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IRelatedCompound_bases[] = {0};
static const char *swig_IRelatedCompound_base_names[] = {0};
static swig_lua_class _wrap_class_IRelatedCompound = { "IRelatedCompound", &SWIGTYPE_p_IRelatedCompound,0, swig_delete_IRelatedCompound, swig_IRelatedCompound_methods, swig_IRelatedCompound_attributes, swig_IRelatedCompound_bases, swig_IRelatedCompound_base_names };

static int _wrap_IRelatedCompoundIterator_toFirst(lua_State* L) {
  int SWIG_arg = 0;
  IRelatedCompoundIterator *arg1 = (IRelatedCompoundIterator *) 0 ;
  IRelatedCompound *result = 0 ;
  
  SWIG_check_num_args("IRelatedCompoundIterator::toFirst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IRelatedCompoundIterator::toFirst",1,"IRelatedCompoundIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IRelatedCompoundIterator,0))){
    SWIG_fail_ptr("IRelatedCompoundIterator_toFirst",1,SWIGTYPE_p_IRelatedCompoundIterator);
  }
  
  result = (IRelatedCompound *)(arg1)->toFirst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IRelatedCompound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRelatedCompoundIterator_toLast(lua_State* L) {
  int SWIG_arg = 0;
  IRelatedCompoundIterator *arg1 = (IRelatedCompoundIterator *) 0 ;
  IRelatedCompound *result = 0 ;
  
  SWIG_check_num_args("IRelatedCompoundIterator::toLast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IRelatedCompoundIterator::toLast",1,"IRelatedCompoundIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IRelatedCompoundIterator,0))){
    SWIG_fail_ptr("IRelatedCompoundIterator_toLast",1,SWIGTYPE_p_IRelatedCompoundIterator);
  }
  
  result = (IRelatedCompound *)(arg1)->toLast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IRelatedCompound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRelatedCompoundIterator_toNext(lua_State* L) {
  int SWIG_arg = 0;
  IRelatedCompoundIterator *arg1 = (IRelatedCompoundIterator *) 0 ;
  IRelatedCompound *result = 0 ;
  
  SWIG_check_num_args("IRelatedCompoundIterator::toNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IRelatedCompoundIterator::toNext",1,"IRelatedCompoundIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IRelatedCompoundIterator,0))){
    SWIG_fail_ptr("IRelatedCompoundIterator_toNext",1,SWIGTYPE_p_IRelatedCompoundIterator);
  }
  
  result = (IRelatedCompound *)(arg1)->toNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IRelatedCompound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRelatedCompoundIterator_toPrev(lua_State* L) {
  int SWIG_arg = 0;
  IRelatedCompoundIterator *arg1 = (IRelatedCompoundIterator *) 0 ;
  IRelatedCompound *result = 0 ;
  
  SWIG_check_num_args("IRelatedCompoundIterator::toPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IRelatedCompoundIterator::toPrev",1,"IRelatedCompoundIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IRelatedCompoundIterator,0))){
    SWIG_fail_ptr("IRelatedCompoundIterator_toPrev",1,SWIGTYPE_p_IRelatedCompoundIterator);
  }
  
  result = (IRelatedCompound *)(arg1)->toPrev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IRelatedCompound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRelatedCompoundIterator_current(lua_State* L) {
  int SWIG_arg = 0;
  IRelatedCompoundIterator *arg1 = (IRelatedCompoundIterator *) 0 ;
  IRelatedCompound *result = 0 ;
  
  SWIG_check_num_args("IRelatedCompoundIterator::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IRelatedCompoundIterator::current",1,"IRelatedCompoundIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IRelatedCompoundIterator,0))){
    SWIG_fail_ptr("IRelatedCompoundIterator_current",1,SWIGTYPE_p_IRelatedCompoundIterator);
  }
  
  result = (IRelatedCompound *)((IRelatedCompoundIterator const *)arg1)->current();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IRelatedCompound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRelatedCompoundIterator_release(lua_State* L) {
  int SWIG_arg = 0;
  IRelatedCompoundIterator *arg1 = (IRelatedCompoundIterator *) 0 ;
  
  SWIG_check_num_args("IRelatedCompoundIterator::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IRelatedCompoundIterator::release",1,"IRelatedCompoundIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IRelatedCompoundIterator,0))){
    SWIG_fail_ptr("IRelatedCompoundIterator_release",1,SWIGTYPE_p_IRelatedCompoundIterator);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IRelatedCompoundIterator(void *obj) {
IRelatedCompoundIterator *arg1 = (IRelatedCompoundIterator *) obj;
delete arg1;
}
static swig_lua_method swig_IRelatedCompoundIterator_methods[] = {
    {"toFirst", _wrap_IRelatedCompoundIterator_toFirst}, 
    {"toLast", _wrap_IRelatedCompoundIterator_toLast}, 
    {"toNext", _wrap_IRelatedCompoundIterator_toNext}, 
    {"toPrev", _wrap_IRelatedCompoundIterator_toPrev}, 
    {"current", _wrap_IRelatedCompoundIterator_current}, 
    {"release", _wrap_IRelatedCompoundIterator_release}, 
    {0,0}
};
static swig_lua_attribute swig_IRelatedCompoundIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IRelatedCompoundIterator_bases[] = {0};
static const char *swig_IRelatedCompoundIterator_base_names[] = {0};
static swig_lua_class _wrap_class_IRelatedCompoundIterator = { "IRelatedCompoundIterator", &SWIGTYPE_p_IRelatedCompoundIterator,0, swig_delete_IRelatedCompoundIterator, swig_IRelatedCompoundIterator_methods, swig_IRelatedCompoundIterator_attributes, swig_IRelatedCompoundIterator_bases, swig_IRelatedCompoundIterator_base_names };

static int _wrap_IClass_inheritanceGraph(lua_State* L) {
  int SWIG_arg = 0;
  IClass *arg1 = (IClass *) 0 ;
  IGraph *result = 0 ;
  
  SWIG_check_num_args("IClass::inheritanceGraph",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IClass::inheritanceGraph",1,"IClass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IClass,0))){
    SWIG_fail_ptr("IClass_inheritanceGraph",1,SWIGTYPE_p_IClass);
  }
  
  result = (IGraph *)((IClass const *)arg1)->inheritanceGraph();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IGraph,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IClass_collaborationGraph(lua_State* L) {
  int SWIG_arg = 0;
  IClass *arg1 = (IClass *) 0 ;
  IGraph *result = 0 ;
  
  SWIG_check_num_args("IClass::collaborationGraph",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IClass::collaborationGraph",1,"IClass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IClass,0))){
    SWIG_fail_ptr("IClass_collaborationGraph",1,SWIGTYPE_p_IClass);
  }
  
  result = (IGraph *)((IClass const *)arg1)->collaborationGraph();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IGraph,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IClass_baseCompounds(lua_State* L) {
  int SWIG_arg = 0;
  IClass *arg1 = (IClass *) 0 ;
  IRelatedCompoundIterator *result = 0 ;
  
  SWIG_check_num_args("IClass::baseCompounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IClass::baseCompounds",1,"IClass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IClass,0))){
    SWIG_fail_ptr("IClass_baseCompounds",1,SWIGTYPE_p_IClass);
  }
  
  result = (IRelatedCompoundIterator *)((IClass const *)arg1)->baseCompounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IRelatedCompoundIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IClass_derivedCompounds(lua_State* L) {
  int SWIG_arg = 0;
  IClass *arg1 = (IClass *) 0 ;
  IRelatedCompoundIterator *result = 0 ;
  
  SWIG_check_num_args("IClass::derivedCompounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IClass::derivedCompounds",1,"IClass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IClass,0))){
    SWIG_fail_ptr("IClass_derivedCompounds",1,SWIGTYPE_p_IClass);
  }
  
  result = (IRelatedCompoundIterator *)((IClass const *)arg1)->derivedCompounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IRelatedCompoundIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IClass_nestedCompounds(lua_State* L) {
  int SWIG_arg = 0;
  IClass *arg1 = (IClass *) 0 ;
  ICompoundIterator *result = 0 ;
  
  SWIG_check_num_args("IClass::nestedCompounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IClass::nestedCompounds",1,"IClass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IClass,0))){
    SWIG_fail_ptr("IClass_nestedCompounds",1,SWIGTYPE_p_IClass);
  }
  
  result = (ICompoundIterator *)((IClass const *)arg1)->nestedCompounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ICompoundIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IClass_templateParameters(lua_State* L) {
  int SWIG_arg = 0;
  IClass *arg1 = (IClass *) 0 ;
  IParamIterator *result = 0 ;
  
  SWIG_check_num_args("IClass::templateParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IClass::templateParameters",1,"IClass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IClass,0))){
    SWIG_fail_ptr("IClass_templateParameters",1,SWIGTYPE_p_IClass);
  }
  
  result = (IParamIterator *)((IClass const *)arg1)->templateParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IParamIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IClass_locationFile(lua_State* L) {
  int SWIG_arg = 0;
  IClass *arg1 = (IClass *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IClass::locationFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IClass::locationFile",1,"IClass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IClass,0))){
    SWIG_fail_ptr("IClass_locationFile",1,SWIGTYPE_p_IClass);
  }
  
  result = (IString *)((IClass const *)arg1)->locationFile();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IClass_locationLine(lua_State* L) {
  int SWIG_arg = 0;
  IClass *arg1 = (IClass *) 0 ;
  int result;
  
  SWIG_check_num_args("IClass::locationLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IClass::locationLine",1,"IClass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IClass,0))){
    SWIG_fail_ptr("IClass_locationLine",1,SWIGTYPE_p_IClass);
  }
  
  result = (int)((IClass const *)arg1)->locationLine();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IClass_locationBodyFile(lua_State* L) {
  int SWIG_arg = 0;
  IClass *arg1 = (IClass *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IClass::locationBodyFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IClass::locationBodyFile",1,"IClass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IClass,0))){
    SWIG_fail_ptr("IClass_locationBodyFile",1,SWIGTYPE_p_IClass);
  }
  
  result = (IString *)((IClass const *)arg1)->locationBodyFile();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IClass_locationBodyStartLine(lua_State* L) {
  int SWIG_arg = 0;
  IClass *arg1 = (IClass *) 0 ;
  int result;
  
  SWIG_check_num_args("IClass::locationBodyStartLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IClass::locationBodyStartLine",1,"IClass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IClass,0))){
    SWIG_fail_ptr("IClass_locationBodyStartLine",1,SWIGTYPE_p_IClass);
  }
  
  result = (int)((IClass const *)arg1)->locationBodyStartLine();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IClass_locationBodyEndLine(lua_State* L) {
  int SWIG_arg = 0;
  IClass *arg1 = (IClass *) 0 ;
  int result;
  
  SWIG_check_num_args("IClass::locationBodyEndLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IClass::locationBodyEndLine",1,"IClass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IClass,0))){
    SWIG_fail_ptr("IClass_locationBodyEndLine",1,SWIGTYPE_p_IClass);
  }
  
  result = (int)((IClass const *)arg1)->locationBodyEndLine();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IClass(void *obj) {
IClass *arg1 = (IClass *) obj;
delete arg1;
}
static swig_lua_method swig_IClass_methods[] = {
    {"inheritanceGraph", _wrap_IClass_inheritanceGraph}, 
    {"collaborationGraph", _wrap_IClass_collaborationGraph}, 
    {"baseCompounds", _wrap_IClass_baseCompounds}, 
    {"derivedCompounds", _wrap_IClass_derivedCompounds}, 
    {"nestedCompounds", _wrap_IClass_nestedCompounds}, 
    {"templateParameters", _wrap_IClass_templateParameters}, 
    {"locationFile", _wrap_IClass_locationFile}, 
    {"locationLine", _wrap_IClass_locationLine}, 
    {"locationBodyFile", _wrap_IClass_locationBodyFile}, 
    {"locationBodyStartLine", _wrap_IClass_locationBodyStartLine}, 
    {"locationBodyEndLine", _wrap_IClass_locationBodyEndLine}, 
    {0,0}
};
static swig_lua_attribute swig_IClass_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IClass_bases[] = {0,0};
static const char *swig_IClass_base_names[] = {"ICompound *",0};
static swig_lua_class _wrap_class_IClass = { "IClass", &SWIGTYPE_p_IClass,0, swig_delete_IClass, swig_IClass_methods, swig_IClass_attributes, swig_IClass_bases, swig_IClass_base_names };

static int _wrap_IStruct_nestedCompounds(lua_State* L) {
  int SWIG_arg = 0;
  IStruct *arg1 = (IStruct *) 0 ;
  ICompoundIterator *result = 0 ;
  
  SWIG_check_num_args("IStruct::nestedCompounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IStruct::nestedCompounds",1,"IStruct const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IStruct,0))){
    SWIG_fail_ptr("IStruct_nestedCompounds",1,SWIGTYPE_p_IStruct);
  }
  
  result = (ICompoundIterator *)((IStruct const *)arg1)->nestedCompounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ICompoundIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IStruct_baseCompounds(lua_State* L) {
  int SWIG_arg = 0;
  IStruct *arg1 = (IStruct *) 0 ;
  IRelatedCompoundIterator *result = 0 ;
  
  SWIG_check_num_args("IStruct::baseCompounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IStruct::baseCompounds",1,"IStruct const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IStruct,0))){
    SWIG_fail_ptr("IStruct_baseCompounds",1,SWIGTYPE_p_IStruct);
  }
  
  result = (IRelatedCompoundIterator *)((IStruct const *)arg1)->baseCompounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IRelatedCompoundIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IStruct_derivedCompounds(lua_State* L) {
  int SWIG_arg = 0;
  IStruct *arg1 = (IStruct *) 0 ;
  IRelatedCompoundIterator *result = 0 ;
  
  SWIG_check_num_args("IStruct::derivedCompounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IStruct::derivedCompounds",1,"IStruct const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IStruct,0))){
    SWIG_fail_ptr("IStruct_derivedCompounds",1,SWIGTYPE_p_IStruct);
  }
  
  result = (IRelatedCompoundIterator *)((IStruct const *)arg1)->derivedCompounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IRelatedCompoundIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IStruct_locationFile(lua_State* L) {
  int SWIG_arg = 0;
  IStruct *arg1 = (IStruct *) 0 ;
  IString *result = 0 ;
  
  SWIG_check_num_args("IStruct::locationFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IStruct::locationFile",1,"IStruct const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IStruct,0))){
    SWIG_fail_ptr("IStruct_locationFile",1,SWIGTYPE_p_IStruct);
  }
  
  result = (IString *)((IStruct const *)arg1)->locationFile();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IStruct_locationLine(lua_State* L) {
  int SWIG_arg = 0;
  IStruct *arg1 = (IStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("IStruct::locationLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IStruct::locationLine",1,"IStruct const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IStruct,0))){
    SWIG_fail_ptr("IStruct_locationLine",1,SWIGTYPE_p_IStruct);
  }
  
  result = (int)((IStruct const *)arg1)->locationLine();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IStruct_locationBodyStartLine(lua_State* L) {
  int SWIG_arg = 0;
  IStruct *arg1 = (IStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("IStruct::locationBodyStartLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IStruct::locationBodyStartLine",1,"IStruct const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IStruct,0))){
    SWIG_fail_ptr("IStruct_locationBodyStartLine",1,SWIGTYPE_p_IStruct);
  }
  
  result = (int)((IStruct const *)arg1)->locationBodyStartLine();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IStruct_locationBodyEndLine(lua_State* L) {
  int SWIG_arg = 0;
  IStruct *arg1 = (IStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("IStruct::locationBodyEndLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IStruct::locationBodyEndLine",1,"IStruct const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IStruct,0))){
    SWIG_fail_ptr("IStruct_locationBodyEndLine",1,SWIGTYPE_p_IStruct);
  }
  
  result = (int)((IStruct const *)arg1)->locationBodyEndLine();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IStruct(void *obj) {
IStruct *arg1 = (IStruct *) obj;
delete arg1;
}
static swig_lua_method swig_IStruct_methods[] = {
    {"nestedCompounds", _wrap_IStruct_nestedCompounds}, 
    {"baseCompounds", _wrap_IStruct_baseCompounds}, 
    {"derivedCompounds", _wrap_IStruct_derivedCompounds}, 
    {"locationFile", _wrap_IStruct_locationFile}, 
    {"locationLine", _wrap_IStruct_locationLine}, 
    {"locationBodyStartLine", _wrap_IStruct_locationBodyStartLine}, 
    {"locationBodyEndLine", _wrap_IStruct_locationBodyEndLine}, 
    {0,0}
};
static swig_lua_attribute swig_IStruct_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IStruct_bases[] = {0,0};
static const char *swig_IStruct_base_names[] = {"ICompound *",0};
static swig_lua_class _wrap_class_IStruct = { "IStruct", &SWIGTYPE_p_IStruct,0, swig_delete_IStruct, swig_IStruct_methods, swig_IStruct_attributes, swig_IStruct_bases, swig_IStruct_base_names };

static int _wrap_IUnion_nestedCompounds(lua_State* L) {
  int SWIG_arg = 0;
  IUnion *arg1 = (IUnion *) 0 ;
  ICompoundIterator *result = 0 ;
  
  SWIG_check_num_args("IUnion::nestedCompounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IUnion::nestedCompounds",1,"IUnion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IUnion,0))){
    SWIG_fail_ptr("IUnion_nestedCompounds",1,SWIGTYPE_p_IUnion);
  }
  
  result = (ICompoundIterator *)((IUnion const *)arg1)->nestedCompounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ICompoundIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IUnion(void *obj) {
IUnion *arg1 = (IUnion *) obj;
delete arg1;
}
static swig_lua_method swig_IUnion_methods[] = {
    {"nestedCompounds", _wrap_IUnion_nestedCompounds}, 
    {0,0}
};
static swig_lua_attribute swig_IUnion_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IUnion_bases[] = {0,0};
static const char *swig_IUnion_base_names[] = {"ICompound *",0};
static swig_lua_class _wrap_class_IUnion = { "IUnion", &SWIGTYPE_p_IUnion,0, swig_delete_IUnion, swig_IUnion_methods, swig_IUnion_attributes, swig_IUnion_bases, swig_IUnion_base_names };

static int _wrap_IInterface_baseCompounds(lua_State* L) {
  int SWIG_arg = 0;
  IInterface *arg1 = (IInterface *) 0 ;
  IRelatedCompoundIterator *result = 0 ;
  
  SWIG_check_num_args("IInterface::baseCompounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IInterface::baseCompounds",1,"IInterface const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IInterface,0))){
    SWIG_fail_ptr("IInterface_baseCompounds",1,SWIGTYPE_p_IInterface);
  }
  
  result = (IRelatedCompoundIterator *)((IInterface const *)arg1)->baseCompounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IRelatedCompoundIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IInterface_derivedCompounds(lua_State* L) {
  int SWIG_arg = 0;
  IInterface *arg1 = (IInterface *) 0 ;
  IRelatedCompoundIterator *result = 0 ;
  
  SWIG_check_num_args("IInterface::derivedCompounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IInterface::derivedCompounds",1,"IInterface const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IInterface,0))){
    SWIG_fail_ptr("IInterface_derivedCompounds",1,SWIGTYPE_p_IInterface);
  }
  
  result = (IRelatedCompoundIterator *)((IInterface const *)arg1)->derivedCompounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IRelatedCompoundIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IInterface(void *obj) {
IInterface *arg1 = (IInterface *) obj;
delete arg1;
}
static swig_lua_method swig_IInterface_methods[] = {
    {"baseCompounds", _wrap_IInterface_baseCompounds}, 
    {"derivedCompounds", _wrap_IInterface_derivedCompounds}, 
    {0,0}
};
static swig_lua_attribute swig_IInterface_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IInterface_bases[] = {0,0};
static const char *swig_IInterface_base_names[] = {"ICompound *",0};
static swig_lua_class _wrap_class_IInterface = { "IInterface", &SWIGTYPE_p_IInterface,0, swig_delete_IInterface, swig_IInterface_methods, swig_IInterface_attributes, swig_IInterface_bases, swig_IInterface_base_names };

static void swig_delete_IException(void *obj) {
IException *arg1 = (IException *) obj;
delete arg1;
}
static swig_lua_method swig_IException_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_IException_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IException_bases[] = {0,0};
static const char *swig_IException_base_names[] = {"ICompound *",0};
static swig_lua_class _wrap_class_IException = { "IException", &SWIGTYPE_p_IException,0, swig_delete_IException, swig_IException_methods, swig_IException_attributes, swig_IException_bases, swig_IException_base_names };

static int _wrap_INamespace_nestedCompounds(lua_State* L) {
  int SWIG_arg = 0;
  INamespace *arg1 = (INamespace *) 0 ;
  ICompoundIterator *result = 0 ;
  
  SWIG_check_num_args("INamespace::nestedCompounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("INamespace::nestedCompounds",1,"INamespace const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_INamespace,0))){
    SWIG_fail_ptr("INamespace_nestedCompounds",1,SWIGTYPE_p_INamespace);
  }
  
  result = (ICompoundIterator *)((INamespace const *)arg1)->nestedCompounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ICompoundIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_INamespace(void *obj) {
INamespace *arg1 = (INamespace *) obj;
delete arg1;
}
static swig_lua_method swig_INamespace_methods[] = {
    {"nestedCompounds", _wrap_INamespace_nestedCompounds}, 
    {0,0}
};
static swig_lua_attribute swig_INamespace_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_INamespace_bases[] = {0,0};
static const char *swig_INamespace_base_names[] = {"ICompound *",0};
static swig_lua_class _wrap_class_INamespace = { "INamespace", &SWIGTYPE_p_INamespace,0, swig_delete_INamespace, swig_INamespace_methods, swig_INamespace_attributes, swig_INamespace_bases, swig_INamespace_base_names };

static int _wrap_IFile_includeDependencyGraph(lua_State* L) {
  int SWIG_arg = 0;
  IFile *arg1 = (IFile *) 0 ;
  IGraph *result = 0 ;
  
  SWIG_check_num_args("IFile::includeDependencyGraph",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IFile::includeDependencyGraph",1,"IFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IFile,0))){
    SWIG_fail_ptr("IFile_includeDependencyGraph",1,SWIGTYPE_p_IFile);
  }
  
  result = (IGraph *)((IFile const *)arg1)->includeDependencyGraph();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IGraph,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFile_includedByDependencyGraph(lua_State* L) {
  int SWIG_arg = 0;
  IFile *arg1 = (IFile *) 0 ;
  IGraph *result = 0 ;
  
  SWIG_check_num_args("IFile::includedByDependencyGraph",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IFile::includedByDependencyGraph",1,"IFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IFile,0))){
    SWIG_fail_ptr("IFile_includedByDependencyGraph",1,SWIGTYPE_p_IFile);
  }
  
  result = (IGraph *)((IFile const *)arg1)->includedByDependencyGraph();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IGraph,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFile_source(lua_State* L) {
  int SWIG_arg = 0;
  IFile *arg1 = (IFile *) 0 ;
  IDocProgramListing *result = 0 ;
  
  SWIG_check_num_args("IFile::source",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IFile::source",1,"IFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IFile,0))){
    SWIG_fail_ptr("IFile_source",1,SWIGTYPE_p_IFile);
  }
  
  result = (IDocProgramListing *)((IFile const *)arg1)->source();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocProgramListing,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFile_nestedCompounds(lua_State* L) {
  int SWIG_arg = 0;
  IFile *arg1 = (IFile *) 0 ;
  ICompoundIterator *result = 0 ;
  
  SWIG_check_num_args("IFile::nestedCompounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IFile::nestedCompounds",1,"IFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IFile,0))){
    SWIG_fail_ptr("IFile_nestedCompounds",1,SWIGTYPE_p_IFile);
  }
  
  result = (ICompoundIterator *)((IFile const *)arg1)->nestedCompounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ICompoundIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFile_includes(lua_State* L) {
  int SWIG_arg = 0;
  IFile *arg1 = (IFile *) 0 ;
  IIncludeIterator *result = 0 ;
  
  SWIG_check_num_args("IFile::includes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IFile::includes",1,"IFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IFile,0))){
    SWIG_fail_ptr("IFile_includes",1,SWIGTYPE_p_IFile);
  }
  
  result = (IIncludeIterator *)((IFile const *)arg1)->includes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IIncludeIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFile_includedBy(lua_State* L) {
  int SWIG_arg = 0;
  IFile *arg1 = (IFile *) 0 ;
  IIncludeIterator *result = 0 ;
  
  SWIG_check_num_args("IFile::includedBy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IFile::includedBy",1,"IFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IFile,0))){
    SWIG_fail_ptr("IFile_includedBy",1,SWIGTYPE_p_IFile);
  }
  
  result = (IIncludeIterator *)((IFile const *)arg1)->includedBy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IIncludeIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IFile(void *obj) {
IFile *arg1 = (IFile *) obj;
delete arg1;
}
static swig_lua_method swig_IFile_methods[] = {
    {"includeDependencyGraph", _wrap_IFile_includeDependencyGraph}, 
    {"includedByDependencyGraph", _wrap_IFile_includedByDependencyGraph}, 
    {"source", _wrap_IFile_source}, 
    {"nestedCompounds", _wrap_IFile_nestedCompounds}, 
    {"includes", _wrap_IFile_includes}, 
    {"includedBy", _wrap_IFile_includedBy}, 
    {0,0}
};
static swig_lua_attribute swig_IFile_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IFile_bases[] = {0,0};
static const char *swig_IFile_base_names[] = {"ICompound *",0};
static swig_lua_class _wrap_class_IFile = { "IFile", &SWIGTYPE_p_IFile,0, swig_delete_IFile, swig_IFile_methods, swig_IFile_attributes, swig_IFile_bases, swig_IFile_base_names };

static int _wrap_IGroup_nestedCompounds(lua_State* L) {
  int SWIG_arg = 0;
  IGroup *arg1 = (IGroup *) 0 ;
  ICompoundIterator *result = 0 ;
  
  SWIG_check_num_args("IGroup::nestedCompounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IGroup::nestedCompounds",1,"IGroup const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IGroup,0))){
    SWIG_fail_ptr("IGroup_nestedCompounds",1,SWIGTYPE_p_IGroup);
  }
  
  result = (ICompoundIterator *)((IGroup const *)arg1)->nestedCompounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ICompoundIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IGroup(void *obj) {
IGroup *arg1 = (IGroup *) obj;
delete arg1;
}
static swig_lua_method swig_IGroup_methods[] = {
    {"nestedCompounds", _wrap_IGroup_nestedCompounds}, 
    {0,0}
};
static swig_lua_attribute swig_IGroup_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IGroup_bases[] = {0,0};
static const char *swig_IGroup_base_names[] = {"ICompound *",0};
static swig_lua_class _wrap_class_IGroup = { "IGroup", &SWIGTYPE_p_IGroup,0, swig_delete_IGroup, swig_IGroup_methods, swig_IGroup_attributes, swig_IGroup_bases, swig_IGroup_base_names };

static int _wrap_IPage_title(lua_State* L) {
  int SWIG_arg = 0;
  IPage *arg1 = (IPage *) 0 ;
  IDocTitle *result = 0 ;
  
  SWIG_check_num_args("IPage::title",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IPage::title",1,"IPage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPage,0))){
    SWIG_fail_ptr("IPage_title",1,SWIGTYPE_p_IPage);
  }
  
  result = (IDocTitle *)((IPage const *)arg1)->title();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDocTitle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IPage(void *obj) {
IPage *arg1 = (IPage *) obj;
delete arg1;
}
static swig_lua_method swig_IPage_methods[] = {
    {"title", _wrap_IPage_title}, 
    {0,0}
};
static swig_lua_attribute swig_IPage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IPage_bases[] = {0,0};
static const char *swig_IPage_base_names[] = {"ICompound *",0};
static swig_lua_class _wrap_class_IPage = { "IPage", &SWIGTYPE_p_IPage,0, swig_delete_IPage, swig_IPage_methods, swig_IPage_attributes, swig_IPage_bases, swig_IPage_base_names };

static int _wrap_IDoxygen_compounds(lua_State* L) {
  int SWIG_arg = 0;
  IDoxygen *arg1 = (IDoxygen *) 0 ;
  ICompoundIterator *result = 0 ;
  
  SWIG_check_num_args("IDoxygen::compounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDoxygen::compounds",1,"IDoxygen const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDoxygen,0))){
    SWIG_fail_ptr("IDoxygen_compounds",1,SWIGTYPE_p_IDoxygen);
  }
  
  result = (ICompoundIterator *)((IDoxygen const *)arg1)->compounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ICompoundIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDoxygen_compoundById(lua_State* L) {
  int SWIG_arg = 0;
  IDoxygen *arg1 = (IDoxygen *) 0 ;
  char *arg2 = (char *) 0 ;
  ICompound *result = 0 ;
  
  SWIG_check_num_args("IDoxygen::compoundById",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDoxygen::compoundById",1,"IDoxygen const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("IDoxygen::compoundById",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDoxygen,0))){
    SWIG_fail_ptr("IDoxygen_compoundById",1,SWIGTYPE_p_IDoxygen);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ICompound *)((IDoxygen const *)arg1)->compoundById((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ICompound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDoxygen_compoundByName(lua_State* L) {
  int SWIG_arg = 0;
  IDoxygen *arg1 = (IDoxygen *) 0 ;
  char *arg2 = (char *) 0 ;
  ICompound *result = 0 ;
  
  SWIG_check_num_args("IDoxygen::compoundByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDoxygen::compoundByName",1,"IDoxygen const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("IDoxygen::compoundByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDoxygen,0))){
    SWIG_fail_ptr("IDoxygen_compoundByName",1,SWIGTYPE_p_IDoxygen);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ICompound *)((IDoxygen const *)arg1)->compoundByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ICompound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDoxygen_memberById(lua_State* L) {
  int SWIG_arg = 0;
  IDoxygen *arg1 = (IDoxygen *) 0 ;
  char *arg2 = (char *) 0 ;
  ICompound *result = 0 ;
  
  SWIG_check_num_args("IDoxygen::memberById",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDoxygen::memberById",1,"IDoxygen const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("IDoxygen::memberById",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDoxygen,0))){
    SWIG_fail_ptr("IDoxygen_memberById",1,SWIGTYPE_p_IDoxygen);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ICompound *)((IDoxygen const *)arg1)->memberById((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ICompound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDoxygen_memberByName(lua_State* L) {
  int SWIG_arg = 0;
  IDoxygen *arg1 = (IDoxygen *) 0 ;
  char *arg2 = (char *) 0 ;
  ICompoundIterator *result = 0 ;
  
  SWIG_check_num_args("IDoxygen::memberByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDoxygen::memberByName",1,"IDoxygen const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("IDoxygen::memberByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDoxygen,0))){
    SWIG_fail_ptr("IDoxygen_memberByName",1,SWIGTYPE_p_IDoxygen);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ICompoundIterator *)((IDoxygen const *)arg1)->memberByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ICompoundIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDoxygen_release(lua_State* L) {
  int SWIG_arg = 0;
  IDoxygen *arg1 = (IDoxygen *) 0 ;
  
  SWIG_check_num_args("IDoxygen::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDoxygen::release",1,"IDoxygen *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDoxygen,0))){
    SWIG_fail_ptr("IDoxygen_release",1,SWIGTYPE_p_IDoxygen);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDoxygen_setDebugLevel(lua_State* L) {
  int SWIG_arg = 0;
  IDoxygen *arg1 = (IDoxygen *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("IDoxygen::setDebugLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDoxygen::setDebugLevel",1,"IDoxygen *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IDoxygen::setDebugLevel",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDoxygen,0))){
    SWIG_fail_ptr("IDoxygen_setDebugLevel",1,SWIGTYPE_p_IDoxygen);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDebugLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDoxygen_readXMLDir(lua_State* L) {
  int SWIG_arg = 0;
  IDoxygen *arg1 = (IDoxygen *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("IDoxygen::readXMLDir",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IDoxygen::readXMLDir",1,"IDoxygen *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("IDoxygen::readXMLDir",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDoxygen,0))){
    SWIG_fail_ptr("IDoxygen_readXMLDir",1,SWIGTYPE_p_IDoxygen);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->readXMLDir((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDoxygen(void *obj) {
IDoxygen *arg1 = (IDoxygen *) obj;
delete arg1;
}
static swig_lua_method swig_IDoxygen_methods[] = {
    {"compounds", _wrap_IDoxygen_compounds}, 
    {"compoundById", _wrap_IDoxygen_compoundById}, 
    {"compoundByName", _wrap_IDoxygen_compoundByName}, 
    {"memberById", _wrap_IDoxygen_memberById}, 
    {"memberByName", _wrap_IDoxygen_memberByName}, 
    {"release", _wrap_IDoxygen_release}, 
    {"setDebugLevel", _wrap_IDoxygen_setDebugLevel}, 
    {"readXMLDir", _wrap_IDoxygen_readXMLDir}, 
    {0,0}
};
static swig_lua_attribute swig_IDoxygen_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDoxygen_bases[] = {0};
static const char *swig_IDoxygen_base_names[] = {0};
static swig_lua_class _wrap_class_IDoxygen = { "IDoxygen", &SWIGTYPE_p_IDoxygen,0, swig_delete_IDoxygen, swig_IDoxygen_methods, swig_IDoxygen_attributes, swig_IDoxygen_bases, swig_IDoxygen_base_names };

static int _wrap_createObjectModel(lua_State* L) {
  int SWIG_arg = 0;
  IDoxygen *result = 0 ;
  
  SWIG_check_num_args("createObjectModel",0,0)
  result = (IDoxygen *)createObjectModel();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDoxygen,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "createObjectModel", _wrap_createObjectModel},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"ILinkedText_Kind_Text", (long) ILinkedText::Kind_Text, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ILinkedText_Kind_Ref", (long) ILinkedText::Kind_Ref, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ILT_Ref_Member", (long) ILT_Ref::Member, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ILT_Ref_Compound", (long) ILT_Ref::Compound, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Invalid", (long) IDoc::Invalid, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Para", (long) IDoc::Para, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Text", (long) IDoc::Text, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_MarkupModifier", (long) IDoc::MarkupModifier, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_ItemizedList", (long) IDoc::ItemizedList, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_OrderedList", (long) IDoc::OrderedList, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_ListItem", (long) IDoc::ListItem, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_ParameterList", (long) IDoc::ParameterList, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Parameter", (long) IDoc::Parameter, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_SimpleSect", (long) IDoc::SimpleSect, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Title", (long) IDoc::Title, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Ref", (long) IDoc::Ref, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_VariableList", (long) IDoc::VariableList, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_VariableListEntry", (long) IDoc::VariableListEntry, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_HRuler", (long) IDoc::HRuler, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_LineBreak", (long) IDoc::LineBreak, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_ULink", (long) IDoc::ULink, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_EMail", (long) IDoc::EMail, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Link", (long) IDoc::Link, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_ProgramListing", (long) IDoc::ProgramListing, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_CodeLine", (long) IDoc::CodeLine, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Highlight", (long) IDoc::Highlight, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Formula", (long) IDoc::Formula, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Image", (long) IDoc::Image, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_DotFile", (long) IDoc::DotFile, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_IndexEntry", (long) IDoc::IndexEntry, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Table", (long) IDoc::Table, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Row", (long) IDoc::Row, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Entry", (long) IDoc::Entry, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Section", (long) IDoc::Section, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Verbatim", (long) IDoc::Verbatim, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Copy", (long) IDoc::Copy, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_TocList", (long) IDoc::TocList, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_TocItem", (long) IDoc::TocItem, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Anchor", (long) IDoc::Anchor, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Symbol", (long) IDoc::Symbol, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Internal", (long) IDoc::Internal, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_Root", (long) IDoc::Root, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDoc_ParameterItem", (long) IDoc::ParameterItem, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocMarkup_Normal", (long) IDocMarkup::Normal, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocMarkup_Bold", (long) IDocMarkup::Bold, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocMarkup_Emphasis", (long) IDocMarkup::Emphasis, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocMarkup_ComputerOutput", (long) IDocMarkup::ComputerOutput, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocMarkup_Subscript", (long) IDocMarkup::Subscript, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocMarkup_Superscript", (long) IDocMarkup::Superscript, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocMarkup_SmallFont", (long) IDocMarkup::SmallFont, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocMarkup_Center", (long) IDocMarkup::Center, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocMarkup_Preformatted", (long) IDocMarkup::Preformatted, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocMarkup_Heading", (long) IDocMarkup::Heading, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocParameterList_Param", (long) IDocParameterList::Param, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocParameterList_RetVal", (long) IDocParameterList::RetVal, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocParameterList_Exception", (long) IDocParameterList::Exception, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Invalid", (long) IDocSimpleSect::Invalid, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_See", (long) IDocSimpleSect::See, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Return", (long) IDocSimpleSect::Return, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Author", (long) IDocSimpleSect::Author, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Version", (long) IDocSimpleSect::Version, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Since", (long) IDocSimpleSect::Since, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Date", (long) IDocSimpleSect::Date, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Bug", (long) IDocSimpleSect::Bug, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Note", (long) IDocSimpleSect::Note, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Warning", (long) IDocSimpleSect::Warning, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Par", (long) IDocSimpleSect::Par, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Deprecated", (long) IDocSimpleSect::Deprecated, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Pre", (long) IDocSimpleSect::Pre, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Post", (long) IDocSimpleSect::Post, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Invar", (long) IDocSimpleSect::Invar, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Remark", (long) IDocSimpleSect::Remark, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Attention", (long) IDocSimpleSect::Attention, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Todo", (long) IDocSimpleSect::Todo, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Test", (long) IDocSimpleSect::Test, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_RCS", (long) IDocSimpleSect::RCS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_EnumValues", (long) IDocSimpleSect::EnumValues, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSimpleSect_Examples", (long) IDocSimpleSect::Examples, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocRef_Member", (long) IDocRef::Member, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocRef_Compound", (long) IDocRef::Compound, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocHighlight_Invalid", (long) IDocHighlight::Invalid, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocHighlight_Comment", (long) IDocHighlight::Comment, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocHighlight_Keyword", (long) IDocHighlight::Keyword, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocHighlight_KeywordType", (long) IDocHighlight::KeywordType, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocHighlight_KeywordFlow", (long) IDocHighlight::KeywordFlow, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocHighlight_CharLiteral", (long) IDocHighlight::CharLiteral, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocHighlight_StringLiteral", (long) IDocHighlight::StringLiteral, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocHighlight_Preprocessor", (long) IDocHighlight::Preprocessor, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocVerbatim_Invalid", (long) IDocVerbatim::Invalid, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocVerbatim_HtmlOnly", (long) IDocVerbatim::HtmlOnly, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocVerbatim_LatexOnly", (long) IDocVerbatim::LatexOnly, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocVerbatim_Verbatim", (long) IDocVerbatim::Verbatim, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSymbol_Invalid", (long) IDocSymbol::Invalid, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSymbol_Umlaut", (long) IDocSymbol::Umlaut, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSymbol_Acute", (long) IDocSymbol::Acute, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSymbol_Grave", (long) IDocSymbol::Grave, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSymbol_Circ", (long) IDocSymbol::Circ, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSymbol_Tilde", (long) IDocSymbol::Tilde, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSymbol_Szlig", (long) IDocSymbol::Szlig, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSymbol_Cedil", (long) IDocSymbol::Cedil, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSymbol_Ring", (long) IDocSymbol::Ring, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSymbol_Nbsp", (long) IDocSymbol::Nbsp, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IDocSymbol_Copy", (long) IDocSymbol::Copy, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IChildNode_PublicInheritance", (long) IChildNode::PublicInheritance, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IChildNode_ProtectedInheritance", (long) IChildNode::ProtectedInheritance, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IChildNode_PrivateInheritance", (long) IChildNode::PrivateInheritance, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IChildNode_Usage", (long) IChildNode::Usage, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IChildNode_TemplateInstance", (long) IChildNode::TemplateInstance, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IMember_Invalid", (long) IMember::Invalid, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IMember_Define", (long) IMember::Define, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IMember_Property", (long) IMember::Property, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IMember_Variable", (long) IMember::Variable, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IMember_Typedef", (long) IMember::Typedef, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IMember_Enum", (long) IMember::Enum, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IMember_Function", (long) IMember::Function, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IMember_Signal", (long) IMember::Signal, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IMember_Prototype", (long) IMember::Prototype, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IMember_Friend", (long) IMember::Friend, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IMember_DCOP", (long) IMember::DCOP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IMember_Slot", (long) IMember::Slot, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IMember_EnumValue", (long) IMember::EnumValue, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_Invalid", (long) ISection::Invalid, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_UserDefined", (long) ISection::UserDefined, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PubTypes", (long) ISection::PubTypes, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PubFuncs", (long) ISection::PubFuncs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PubAttribs", (long) ISection::PubAttribs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PubSlots", (long) ISection::PubSlots, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_Signals", (long) ISection::Signals, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_DCOPFuncs", (long) ISection::DCOPFuncs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_Properties", (long) ISection::Properties, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_Events", (long) ISection::Events, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PubStatFuncs", (long) ISection::PubStatFuncs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PubStatAttribs", (long) ISection::PubStatAttribs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_ProTypes", (long) ISection::ProTypes, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_ProFuncs", (long) ISection::ProFuncs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_ProAttribs", (long) ISection::ProAttribs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_ProSlots", (long) ISection::ProSlots, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_ProStatFuncs", (long) ISection::ProStatFuncs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_ProStatAttribs", (long) ISection::ProStatAttribs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PacTypes", (long) ISection::PacTypes, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PacFuncs", (long) ISection::PacFuncs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PacAttribs", (long) ISection::PacAttribs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PacStatFuncs", (long) ISection::PacStatFuncs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PacStatAttribs", (long) ISection::PacStatAttribs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PriTypes", (long) ISection::PriTypes, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PriFuncs", (long) ISection::PriFuncs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PriAttribs", (long) ISection::PriAttribs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PriSlots", (long) ISection::PriSlots, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PriStatFuncs", (long) ISection::PriStatFuncs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_PriStatAttribs", (long) ISection::PriStatAttribs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_Friend", (long) ISection::Friend, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_Related", (long) ISection::Related, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_Defines", (long) ISection::Defines, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_Prototypes", (long) ISection::Prototypes, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_Typedefs", (long) ISection::Typedefs, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_Enums", (long) ISection::Enums, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_Functions", (long) ISection::Functions, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ISection_Variables", (long) ISection::Variables, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ICompound_Invalid", (long) ICompound::Invalid, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ICompound_Class", (long) ICompound::Class, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ICompound_Struct", (long) ICompound::Struct, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ICompound_Union", (long) ICompound::Union, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ICompound_Interface", (long) ICompound::Interface, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ICompound_Protocol", (long) ICompound::Protocol, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ICompound_Category", (long) ICompound::Category, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ICompound_Exception", (long) ICompound::Exception, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ICompound_File", (long) ICompound::File, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ICompound_Namespace", (long) ICompound::Namespace, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ICompound_Group", (long) ICompound::Group, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ICompound_Page", (long) ICompound::Page, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ICompound_Example", (long) ICompound::Example, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ICompound_Dir", (long) ICompound::Dir, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IRelatedCompound_Public", (long) IRelatedCompound::Public, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IRelatedCompound_Protected", (long) IRelatedCompound::Protected, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IRelatedCompound_Private", (long) IRelatedCompound::Private, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IRelatedCompound_Normal", (long) IRelatedCompound::Normal, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IRelatedCompound_Virtual", (long) IRelatedCompound::Virtual, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_IDocSectionTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocSection *) x));
}
static void *_p_IDocTextTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *) (IDocMarkup *) ((IDocText *) x));
}
static void *_p_IDocIndexEntryTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocIndexEntry *) x));
}
static void *_p_IDocInternalTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocInternal *) x));
}
static void *_p_IDocParaTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocPara *) x));
}
static void *_p_IDocTableTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocTable *) x));
}
static void *_p_IDocMarkupTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocMarkup *) x));
}
static void *_p_IDocEMailTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocEMail *) x));
}
static void *_p_IDocCodeLineTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocCodeLine *) x));
}
static void *_p_IDocTitleTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocTitle *) x));
}
static void *_p_IDocSymbolTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocSymbol *) x));
}
static void *_p_IDocParameterListTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocParameterList *) x));
}
static void *_p_IDocDotFileTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocDotFile *) x));
}
static void *_p_IDocSimpleSectTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocSimpleSect *) x));
}
static void *_p_IDocTocListTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocTocList *) x));
}
static void *_p_IDocCopyTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocCopy *) x));
}
static void *_p_IDocRefTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocRef *) x));
}
static void *_p_IDocVerbatimTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocVerbatim *) x));
}
static void *_p_IDocMarkupModifierTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocMarkupModifier *) x));
}
static void *_p_IDocHighlightTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocHighlight *) x));
}
static void *_p_IDocRowTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocRow *) x));
}
static void *_p_IDocULinkTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocULink *) x));
}
static void *_p_IDocVariableListTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocVariableList *) x));
}
static void *_p_IDocParameterTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocParameter *) x));
}
static void *_p_IDocProgramListingTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocProgramListing *) x));
}
static void *_p_IDocParameterItemTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocParameterItem *) x));
}
static void *_p_IDocLineBreakTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocLineBreak *) x));
}
static void *_p_IDocTocItemTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocTocItem *) x));
}
static void *_p_IDocListItemTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocListItem *) x));
}
static void *_p_IDocEntryTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocEntry *) x));
}
static void *_p_IDocRootTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocRoot *) x));
}
static void *_p_IDocImageTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocImage *) x));
}
static void *_p_IDocAnchorTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocAnchor *) x));
}
static void *_p_IDocHRulerTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocHRuler *) x));
}
static void *_p_IDocFormulaTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocFormula *) x));
}
static void *_p_IDocLinkTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocLink *) x));
}
static void *_p_IDocItemizedListTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocItemizedList *) x));
}
static void *_p_IDocOrderedListTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocOrderedList *) x));
}
static void *_p_IDocVariableListEntryTo_p_IDoc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDoc *)  ((IDocVariableListEntry *) x));
}
static void *_p_IDocTextTo_p_IDocMarkup(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDocMarkup *)  ((IDocText *) x));
}
static void *_p_IUnionTo_p_ICompound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ICompound *)  ((IUnion *) x));
}
static void *_p_IInterfaceTo_p_ICompound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ICompound *)  ((IInterface *) x));
}
static void *_p_IGroupTo_p_ICompound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ICompound *)  ((IGroup *) x));
}
static void *_p_IClassTo_p_ICompound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ICompound *)  ((IClass *) x));
}
static void *_p_IExceptionTo_p_ICompound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ICompound *)  ((IException *) x));
}
static void *_p_IPageTo_p_ICompound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ICompound *)  ((IPage *) x));
}
static void *_p_IStructTo_p_ICompound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ICompound *)  ((IStruct *) x));
}
static void *_p_INamespaceTo_p_ICompound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ICompound *)  ((INamespace *) x));
}
static void *_p_IFileTo_p_ICompound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ICompound *)  ((IFile *) x));
}
static void *_p_IPropertyTo_p_IMember(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMember *)  ((IProperty *) x));
}
static void *_p_IFriendTo_p_IMember(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMember *)  ((IFriend *) x));
}
static void *_p_IVariableTo_p_IMember(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMember *)  ((IVariable *) x));
}
static void *_p_IDCOPTo_p_IMember(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMember *)  ((IDCOP *) x));
}
static void *_p_IFunctionTo_p_IMember(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMember *)  ((IFunction *) x));
}
static void *_p_ISlotTo_p_IMember(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMember *)  ((ISlot *) x));
}
static void *_p_IEnumTo_p_IMember(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMember *)  ((IEnum *) x));
}
static void *_p_ITypedefTo_p_IMember(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMember *)  ((ITypedef *) x));
}
static void *_p_ISignalTo_p_IMember(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMember *)  ((ISignal *) x));
}
static void *_p_IPrototypeTo_p_IMember(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMember *)  ((IPrototype *) x));
}
static void *_p_IDefineTo_p_IMember(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMember *)  ((IDefine *) x));
}
static void *_p_IEnumValueTo_p_IMember(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMember *)  ((IEnumValue *) x));
}
static void *_p_ILT_TextTo_p_ILinkedText(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ILinkedText *)  ((ILT_Text *) x));
}
static void *_p_ILT_RefTo_p_ILinkedText(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ILinkedText *)  ((ILT_Ref *) x));
}
static void *_p_IUserDefinedTo_p_ISection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ISection *)  ((IUserDefined *) x));
}
static swig_type_info _swigt__p_IChildNode = {"_p_IChildNode", "IChildNode *", 0, 0, (void*)&_wrap_class_IChildNode, 0};
static swig_type_info _swigt__p_IChildNodeIterator = {"_p_IChildNodeIterator", "IChildNodeIterator *", 0, 0, (void*)&_wrap_class_IChildNodeIterator, 0};
static swig_type_info _swigt__p_IClass = {"_p_IClass", "IClass *", 0, 0, (void*)&_wrap_class_IClass, 0};
static swig_type_info _swigt__p_ICompound = {"_p_ICompound", "ICompound *", 0, 0, (void*)&_wrap_class_ICompound, 0};
static swig_type_info _swigt__p_ICompoundIterator = {"_p_ICompoundIterator", "ICompoundIterator *", 0, 0, (void*)&_wrap_class_ICompoundIterator, 0};
static swig_type_info _swigt__p_IDCOP = {"_p_IDCOP", "IDCOP *", 0, 0, (void*)&_wrap_class_IDCOP, 0};
static swig_type_info _swigt__p_IDefine = {"_p_IDefine", "IDefine *", 0, 0, (void*)&_wrap_class_IDefine, 0};
static swig_type_info _swigt__p_IDoc = {"_p_IDoc", "IDoc *", 0, 0, (void*)&_wrap_class_IDoc, 0};
static swig_type_info _swigt__p_IDocAnchor = {"_p_IDocAnchor", "IDocAnchor *", 0, 0, (void*)&_wrap_class_IDocAnchor, 0};
static swig_type_info _swigt__p_IDocCodeLine = {"_p_IDocCodeLine", "IDocCodeLine *", 0, 0, (void*)&_wrap_class_IDocCodeLine, 0};
static swig_type_info _swigt__p_IDocCopy = {"_p_IDocCopy", "IDocCopy *", 0, 0, (void*)&_wrap_class_IDocCopy, 0};
static swig_type_info _swigt__p_IDocDotFile = {"_p_IDocDotFile", "IDocDotFile *", 0, 0, (void*)&_wrap_class_IDocDotFile, 0};
static swig_type_info _swigt__p_IDocEMail = {"_p_IDocEMail", "IDocEMail *", 0, 0, (void*)&_wrap_class_IDocEMail, 0};
static swig_type_info _swigt__p_IDocEntry = {"_p_IDocEntry", "IDocEntry *", 0, 0, (void*)&_wrap_class_IDocEntry, 0};
static swig_type_info _swigt__p_IDocFormula = {"_p_IDocFormula", "IDocFormula *", 0, 0, (void*)&_wrap_class_IDocFormula, 0};
static swig_type_info _swigt__p_IDocHRuler = {"_p_IDocHRuler", "IDocHRuler *", 0, 0, (void*)&_wrap_class_IDocHRuler, 0};
static swig_type_info _swigt__p_IDocHighlight = {"_p_IDocHighlight", "IDocHighlight *", 0, 0, (void*)&_wrap_class_IDocHighlight, 0};
static swig_type_info _swigt__p_IDocImage = {"_p_IDocImage", "IDocImage *", 0, 0, (void*)&_wrap_class_IDocImage, 0};
static swig_type_info _swigt__p_IDocIndexEntry = {"_p_IDocIndexEntry", "IDocIndexEntry *", 0, 0, (void*)&_wrap_class_IDocIndexEntry, 0};
static swig_type_info _swigt__p_IDocInternal = {"_p_IDocInternal", "IDocInternal *", 0, 0, (void*)&_wrap_class_IDocInternal, 0};
static swig_type_info _swigt__p_IDocItemizedList = {"_p_IDocItemizedList", "IDocItemizedList *", 0, 0, (void*)&_wrap_class_IDocItemizedList, 0};
static swig_type_info _swigt__p_IDocIterator = {"_p_IDocIterator", "IDocIterator *", 0, 0, (void*)&_wrap_class_IDocIterator, 0};
static swig_type_info _swigt__p_IDocLineBreak = {"_p_IDocLineBreak", "IDocLineBreak *", 0, 0, (void*)&_wrap_class_IDocLineBreak, 0};
static swig_type_info _swigt__p_IDocLink = {"_p_IDocLink", "IDocLink *", 0, 0, (void*)&_wrap_class_IDocLink, 0};
static swig_type_info _swigt__p_IDocListItem = {"_p_IDocListItem", "IDocListItem *", 0, 0, (void*)&_wrap_class_IDocListItem, 0};
static swig_type_info _swigt__p_IDocMarkup = {"_p_IDocMarkup", "IDocMarkup *", 0, 0, (void*)&_wrap_class_IDocMarkup, 0};
static swig_type_info _swigt__p_IDocMarkupModifier = {"_p_IDocMarkupModifier", "IDocMarkupModifier *", 0, 0, (void*)&_wrap_class_IDocMarkupModifier, 0};
static swig_type_info _swigt__p_IDocOrderedList = {"_p_IDocOrderedList", "IDocOrderedList *", 0, 0, (void*)&_wrap_class_IDocOrderedList, 0};
static swig_type_info _swigt__p_IDocPara = {"_p_IDocPara", "IDocPara *", 0, 0, (void*)&_wrap_class_IDocPara, 0};
static swig_type_info _swigt__p_IDocParameter = {"_p_IDocParameter", "IDocParameter *", 0, 0, (void*)&_wrap_class_IDocParameter, 0};
static swig_type_info _swigt__p_IDocParameterItem = {"_p_IDocParameterItem", "IDocParameterItem *", 0, 0, (void*)&_wrap_class_IDocParameterItem, 0};
static swig_type_info _swigt__p_IDocParameterList = {"_p_IDocParameterList", "IDocParameterList *", 0, 0, (void*)&_wrap_class_IDocParameterList, 0};
static swig_type_info _swigt__p_IDocProgramListing = {"_p_IDocProgramListing", "IDocProgramListing *", 0, 0, (void*)&_wrap_class_IDocProgramListing, 0};
static swig_type_info _swigt__p_IDocRef = {"_p_IDocRef", "IDocRef *", 0, 0, (void*)&_wrap_class_IDocRef, 0};
static swig_type_info _swigt__p_IDocRoot = {"_p_IDocRoot", "IDocRoot *", 0, 0, (void*)&_wrap_class_IDocRoot, 0};
static swig_type_info _swigt__p_IDocRow = {"_p_IDocRow", "IDocRow *", 0, 0, (void*)&_wrap_class_IDocRow, 0};
static swig_type_info _swigt__p_IDocSection = {"_p_IDocSection", "IDocSection *", 0, 0, (void*)&_wrap_class_IDocSection, 0};
static swig_type_info _swigt__p_IDocSimpleSect = {"_p_IDocSimpleSect", "IDocSimpleSect *", 0, 0, (void*)&_wrap_class_IDocSimpleSect, 0};
static swig_type_info _swigt__p_IDocSymbol = {"_p_IDocSymbol", "IDocSymbol *", 0, 0, (void*)&_wrap_class_IDocSymbol, 0};
static swig_type_info _swigt__p_IDocTable = {"_p_IDocTable", "IDocTable *", 0, 0, (void*)&_wrap_class_IDocTable, 0};
static swig_type_info _swigt__p_IDocText = {"_p_IDocText", "IDocText *", 0, 0, (void*)&_wrap_class_IDocText, 0};
static swig_type_info _swigt__p_IDocTitle = {"_p_IDocTitle", "IDocTitle *", 0, 0, (void*)&_wrap_class_IDocTitle, 0};
static swig_type_info _swigt__p_IDocTocItem = {"_p_IDocTocItem", "IDocTocItem *", 0, 0, (void*)&_wrap_class_IDocTocItem, 0};
static swig_type_info _swigt__p_IDocTocList = {"_p_IDocTocList", "IDocTocList *", 0, 0, (void*)&_wrap_class_IDocTocList, 0};
static swig_type_info _swigt__p_IDocULink = {"_p_IDocULink", "IDocULink *", 0, 0, (void*)&_wrap_class_IDocULink, 0};
static swig_type_info _swigt__p_IDocVariableList = {"_p_IDocVariableList", "IDocVariableList *", 0, 0, (void*)&_wrap_class_IDocVariableList, 0};
static swig_type_info _swigt__p_IDocVariableListEntry = {"_p_IDocVariableListEntry", "IDocVariableListEntry *", 0, 0, (void*)&_wrap_class_IDocVariableListEntry, 0};
static swig_type_info _swigt__p_IDocVerbatim = {"_p_IDocVerbatim", "IDocVerbatim *", 0, 0, (void*)&_wrap_class_IDocVerbatim, 0};
static swig_type_info _swigt__p_IDoxygen = {"_p_IDoxygen", "IDoxygen *", 0, 0, (void*)&_wrap_class_IDoxygen, 0};
static swig_type_info _swigt__p_IEdgeLabel = {"_p_IEdgeLabel", "IEdgeLabel *", 0, 0, (void*)&_wrap_class_IEdgeLabel, 0};
static swig_type_info _swigt__p_IEdgeLabelIterator = {"_p_IEdgeLabelIterator", "IEdgeLabelIterator *", 0, 0, (void*)&_wrap_class_IEdgeLabelIterator, 0};
static swig_type_info _swigt__p_IEnum = {"_p_IEnum", "IEnum *", 0, 0, (void*)&_wrap_class_IEnum, 0};
static swig_type_info _swigt__p_IEnumValue = {"_p_IEnumValue", "IEnumValue *", 0, 0, (void*)&_wrap_class_IEnumValue, 0};
static swig_type_info _swigt__p_IException = {"_p_IException", "IException *", 0, 0, (void*)&_wrap_class_IException, 0};
static swig_type_info _swigt__p_IFile = {"_p_IFile", "IFile *", 0, 0, (void*)&_wrap_class_IFile, 0};
static swig_type_info _swigt__p_IFriend = {"_p_IFriend", "IFriend *", 0, 0, (void*)&_wrap_class_IFriend, 0};
static swig_type_info _swigt__p_IFunction = {"_p_IFunction", "IFunction *", 0, 0, (void*)&_wrap_class_IFunction, 0};
static swig_type_info _swigt__p_IGraph = {"_p_IGraph", "IGraph *", 0, 0, (void*)&_wrap_class_IGraph, 0};
static swig_type_info _swigt__p_IGroup = {"_p_IGroup", "IGroup *", 0, 0, (void*)&_wrap_class_IGroup, 0};
static swig_type_info _swigt__p_IInclude = {"_p_IInclude", "IInclude *", 0, 0, (void*)&_wrap_class_IInclude, 0};
static swig_type_info _swigt__p_IIncludeIterator = {"_p_IIncludeIterator", "IIncludeIterator *", 0, 0, (void*)&_wrap_class_IIncludeIterator, 0};
static swig_type_info _swigt__p_IInterface = {"_p_IInterface", "IInterface *", 0, 0, (void*)&_wrap_class_IInterface, 0};
static swig_type_info _swigt__p_ILT_Ref = {"_p_ILT_Ref", "ILT_Ref *", 0, 0, (void*)&_wrap_class_ILT_Ref, 0};
static swig_type_info _swigt__p_ILT_Text = {"_p_ILT_Text", "ILT_Text *", 0, 0, (void*)&_wrap_class_ILT_Text, 0};
static swig_type_info _swigt__p_ILinkedText = {"_p_ILinkedText", "ILinkedText *", 0, 0, (void*)&_wrap_class_ILinkedText, 0};
static swig_type_info _swigt__p_ILinkedTextIterator = {"_p_ILinkedTextIterator", "ILinkedTextIterator *", 0, 0, (void*)&_wrap_class_ILinkedTextIterator, 0};
static swig_type_info _swigt__p_IMember = {"_p_IMember", "IMember *", 0, 0, (void*)&_wrap_class_IMember, 0};
static swig_type_info _swigt__p_IMemberIterator = {"_p_IMemberIterator", "IMemberIterator *", 0, 0, (void*)&_wrap_class_IMemberIterator, 0};
static swig_type_info _swigt__p_IMemberReference = {"_p_IMemberReference", "IMemberReference *", 0, 0, (void*)&_wrap_class_IMemberReference, 0};
static swig_type_info _swigt__p_IMemberReferenceIterator = {"_p_IMemberReferenceIterator", "IMemberReferenceIterator *", 0, 0, (void*)&_wrap_class_IMemberReferenceIterator, 0};
static swig_type_info _swigt__p_INamespace = {"_p_INamespace", "INamespace *", 0, 0, (void*)&_wrap_class_INamespace, 0};
static swig_type_info _swigt__p_INode = {"_p_INode", "INode *", 0, 0, (void*)&_wrap_class_INode, 0};
static swig_type_info _swigt__p_INodeIterator = {"_p_INodeIterator", "INodeIterator *", 0, 0, (void*)&_wrap_class_INodeIterator, 0};
static swig_type_info _swigt__p_IPage = {"_p_IPage", "IPage *", 0, 0, (void*)&_wrap_class_IPage, 0};
static swig_type_info _swigt__p_IParam = {"_p_IParam", "IParam *", 0, 0, (void*)&_wrap_class_IParam, 0};
static swig_type_info _swigt__p_IParamIterator = {"_p_IParamIterator", "IParamIterator *", 0, 0, (void*)&_wrap_class_IParamIterator, 0};
static swig_type_info _swigt__p_IProperty = {"_p_IProperty", "IProperty *", 0, 0, (void*)&_wrap_class_IProperty, 0};
static swig_type_info _swigt__p_IPrototype = {"_p_IPrototype", "IPrototype *", 0, 0, (void*)&_wrap_class_IPrototype, 0};
static swig_type_info _swigt__p_IRelatedCompound = {"_p_IRelatedCompound", "IRelatedCompound *", 0, 0, (void*)&_wrap_class_IRelatedCompound, 0};
static swig_type_info _swigt__p_IRelatedCompoundIterator = {"_p_IRelatedCompoundIterator", "IRelatedCompoundIterator *", 0, 0, (void*)&_wrap_class_IRelatedCompoundIterator, 0};
static swig_type_info _swigt__p_ISection = {"_p_ISection", "ISection *", 0, 0, (void*)&_wrap_class_ISection, 0};
static swig_type_info _swigt__p_ISectionIterator = {"_p_ISectionIterator", "ISectionIterator *", 0, 0, (void*)&_wrap_class_ISectionIterator, 0};
static swig_type_info _swigt__p_ISignal = {"_p_ISignal", "ISignal *", 0, 0, (void*)&_wrap_class_ISignal, 0};
static swig_type_info _swigt__p_ISlot = {"_p_ISlot", "ISlot *", 0, 0, (void*)&_wrap_class_ISlot, 0};
static swig_type_info _swigt__p_IString = {"_p_IString", "IString *", 0, 0, (void*)&_wrap_class_IString, 0};
static swig_type_info _swigt__p_IStruct = {"_p_IStruct", "IStruct *", 0, 0, (void*)&_wrap_class_IStruct, 0};
static swig_type_info _swigt__p_ITypedef = {"_p_ITypedef", "ITypedef *", 0, 0, (void*)&_wrap_class_ITypedef, 0};
static swig_type_info _swigt__p_IUnion = {"_p_IUnion", "IUnion *", 0, 0, (void*)&_wrap_class_IUnion, 0};
static swig_type_info _swigt__p_IUserDefined = {"_p_IUserDefined", "IUserDefined *", 0, 0, (void*)&_wrap_class_IUserDefined, 0};
static swig_type_info _swigt__p_IVariable = {"_p_IVariable", "IVariable *", 0, 0, (void*)&_wrap_class_IVariable, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_IChildNode,
  &_swigt__p_IChildNodeIterator,
  &_swigt__p_IClass,
  &_swigt__p_ICompound,
  &_swigt__p_ICompoundIterator,
  &_swigt__p_IDCOP,
  &_swigt__p_IDefine,
  &_swigt__p_IDoc,
  &_swigt__p_IDocAnchor,
  &_swigt__p_IDocCodeLine,
  &_swigt__p_IDocCopy,
  &_swigt__p_IDocDotFile,
  &_swigt__p_IDocEMail,
  &_swigt__p_IDocEntry,
  &_swigt__p_IDocFormula,
  &_swigt__p_IDocHRuler,
  &_swigt__p_IDocHighlight,
  &_swigt__p_IDocImage,
  &_swigt__p_IDocIndexEntry,
  &_swigt__p_IDocInternal,
  &_swigt__p_IDocItemizedList,
  &_swigt__p_IDocIterator,
  &_swigt__p_IDocLineBreak,
  &_swigt__p_IDocLink,
  &_swigt__p_IDocListItem,
  &_swigt__p_IDocMarkup,
  &_swigt__p_IDocMarkupModifier,
  &_swigt__p_IDocOrderedList,
  &_swigt__p_IDocPara,
  &_swigt__p_IDocParameter,
  &_swigt__p_IDocParameterItem,
  &_swigt__p_IDocParameterList,
  &_swigt__p_IDocProgramListing,
  &_swigt__p_IDocRef,
  &_swigt__p_IDocRoot,
  &_swigt__p_IDocRow,
  &_swigt__p_IDocSection,
  &_swigt__p_IDocSimpleSect,
  &_swigt__p_IDocSymbol,
  &_swigt__p_IDocTable,
  &_swigt__p_IDocText,
  &_swigt__p_IDocTitle,
  &_swigt__p_IDocTocItem,
  &_swigt__p_IDocTocList,
  &_swigt__p_IDocULink,
  &_swigt__p_IDocVariableList,
  &_swigt__p_IDocVariableListEntry,
  &_swigt__p_IDocVerbatim,
  &_swigt__p_IDoxygen,
  &_swigt__p_IEdgeLabel,
  &_swigt__p_IEdgeLabelIterator,
  &_swigt__p_IEnum,
  &_swigt__p_IEnumValue,
  &_swigt__p_IException,
  &_swigt__p_IFile,
  &_swigt__p_IFriend,
  &_swigt__p_IFunction,
  &_swigt__p_IGraph,
  &_swigt__p_IGroup,
  &_swigt__p_IInclude,
  &_swigt__p_IIncludeIterator,
  &_swigt__p_IInterface,
  &_swigt__p_ILT_Ref,
  &_swigt__p_ILT_Text,
  &_swigt__p_ILinkedText,
  &_swigt__p_ILinkedTextIterator,
  &_swigt__p_IMember,
  &_swigt__p_IMemberIterator,
  &_swigt__p_IMemberReference,
  &_swigt__p_IMemberReferenceIterator,
  &_swigt__p_INamespace,
  &_swigt__p_INode,
  &_swigt__p_INodeIterator,
  &_swigt__p_IPage,
  &_swigt__p_IParam,
  &_swigt__p_IParamIterator,
  &_swigt__p_IProperty,
  &_swigt__p_IPrototype,
  &_swigt__p_IRelatedCompound,
  &_swigt__p_IRelatedCompoundIterator,
  &_swigt__p_ISection,
  &_swigt__p_ISectionIterator,
  &_swigt__p_ISignal,
  &_swigt__p_ISlot,
  &_swigt__p_IString,
  &_swigt__p_IStruct,
  &_swigt__p_ITypedef,
  &_swigt__p_IUnion,
  &_swigt__p_IUserDefined,
  &_swigt__p_IVariable,
};

static swig_cast_info _swigc__p_IChildNode[] = {  {&_swigt__p_IChildNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IChildNodeIterator[] = {  {&_swigt__p_IChildNodeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IClass[] = {  {&_swigt__p_IClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ICompound[] = {  {&_swigt__p_IInterface, _p_IInterfaceTo_p_ICompound, 0, 0},  {&_swigt__p_IPage, _p_IPageTo_p_ICompound, 0, 0},  {&_swigt__p_ICompound, 0, 0, 0},  {&_swigt__p_IUnion, _p_IUnionTo_p_ICompound, 0, 0},  {&_swigt__p_IGroup, _p_IGroupTo_p_ICompound, 0, 0},  {&_swigt__p_IException, _p_IExceptionTo_p_ICompound, 0, 0},  {&_swigt__p_IClass, _p_IClassTo_p_ICompound, 0, 0},  {&_swigt__p_IStruct, _p_IStructTo_p_ICompound, 0, 0},  {&_swigt__p_IFile, _p_IFileTo_p_ICompound, 0, 0},  {&_swigt__p_INamespace, _p_INamespaceTo_p_ICompound, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ICompoundIterator[] = {  {&_swigt__p_ICompoundIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDCOP[] = {  {&_swigt__p_IDCOP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDefine[] = {  {&_swigt__p_IDefine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDoc[] = {  {&_swigt__p_IDocSection, _p_IDocSectionTo_p_IDoc, 0, 0},  {&_swigt__p_IDocText, _p_IDocTextTo_p_IDoc, 0, 0},  {&_swigt__p_IDocIndexEntry, _p_IDocIndexEntryTo_p_IDoc, 0, 0},  {&_swigt__p_IDocInternal, _p_IDocInternalTo_p_IDoc, 0, 0},  {&_swigt__p_IDocPara, _p_IDocParaTo_p_IDoc, 0, 0},  {&_swigt__p_IDocTable, _p_IDocTableTo_p_IDoc, 0, 0},  {&_swigt__p_IDocMarkup, _p_IDocMarkupTo_p_IDoc, 0, 0},  {&_swigt__p_IDocEMail, _p_IDocEMailTo_p_IDoc, 0, 0},  {&_swigt__p_IDocCodeLine, _p_IDocCodeLineTo_p_IDoc, 0, 0},  {&_swigt__p_IDocTitle, _p_IDocTitleTo_p_IDoc, 0, 0},  {&_swigt__p_IDocSymbol, _p_IDocSymbolTo_p_IDoc, 0, 0},  {&_swigt__p_IDoc, 0, 0, 0},  {&_swigt__p_IDocParameterList, _p_IDocParameterListTo_p_IDoc, 0, 0},  {&_swigt__p_IDocDotFile, _p_IDocDotFileTo_p_IDoc, 0, 0},  {&_swigt__p_IDocSimpleSect, _p_IDocSimpleSectTo_p_IDoc, 0, 0},  {&_swigt__p_IDocTocList, _p_IDocTocListTo_p_IDoc, 0, 0},  {&_swigt__p_IDocCopy, _p_IDocCopyTo_p_IDoc, 0, 0},  {&_swigt__p_IDocRef, _p_IDocRefTo_p_IDoc, 0, 0},  {&_swigt__p_IDocVerbatim, _p_IDocVerbatimTo_p_IDoc, 0, 0},  {&_swigt__p_IDocMarkupModifier, _p_IDocMarkupModifierTo_p_IDoc, 0, 0},  {&_swigt__p_IDocHighlight, _p_IDocHighlightTo_p_IDoc, 0, 0},  {&_swigt__p_IDocRow, _p_IDocRowTo_p_IDoc, 0, 0},  {&_swigt__p_IDocULink, _p_IDocULinkTo_p_IDoc, 0, 0},  {&_swigt__p_IDocVariableList, _p_IDocVariableListTo_p_IDoc, 0, 0},  {&_swigt__p_IDocParameter, _p_IDocParameterTo_p_IDoc, 0, 0},  {&_swigt__p_IDocProgramListing, _p_IDocProgramListingTo_p_IDoc, 0, 0},  {&_swigt__p_IDocParameterItem, _p_IDocParameterItemTo_p_IDoc, 0, 0},  {&_swigt__p_IDocLineBreak, _p_IDocLineBreakTo_p_IDoc, 0, 0},  {&_swigt__p_IDocTocItem, _p_IDocTocItemTo_p_IDoc, 0, 0},  {&_swigt__p_IDocListItem, _p_IDocListItemTo_p_IDoc, 0, 0},  {&_swigt__p_IDocEntry, _p_IDocEntryTo_p_IDoc, 0, 0},  {&_swigt__p_IDocRoot, _p_IDocRootTo_p_IDoc, 0, 0},  {&_swigt__p_IDocAnchor, _p_IDocAnchorTo_p_IDoc, 0, 0},  {&_swigt__p_IDocImage, _p_IDocImageTo_p_IDoc, 0, 0},  {&_swigt__p_IDocHRuler, _p_IDocHRulerTo_p_IDoc, 0, 0},  {&_swigt__p_IDocFormula, _p_IDocFormulaTo_p_IDoc, 0, 0},  {&_swigt__p_IDocLink, _p_IDocLinkTo_p_IDoc, 0, 0},  {&_swigt__p_IDocItemizedList, _p_IDocItemizedListTo_p_IDoc, 0, 0},  {&_swigt__p_IDocOrderedList, _p_IDocOrderedListTo_p_IDoc, 0, 0},  {&_swigt__p_IDocVariableListEntry, _p_IDocVariableListEntryTo_p_IDoc, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocAnchor[] = {  {&_swigt__p_IDocAnchor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocCodeLine[] = {  {&_swigt__p_IDocCodeLine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocCopy[] = {  {&_swigt__p_IDocCopy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocDotFile[] = {  {&_swigt__p_IDocDotFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocEMail[] = {  {&_swigt__p_IDocEMail, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocEntry[] = {  {&_swigt__p_IDocEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocFormula[] = {  {&_swigt__p_IDocFormula, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocHRuler[] = {  {&_swigt__p_IDocHRuler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocHighlight[] = {  {&_swigt__p_IDocHighlight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocImage[] = {  {&_swigt__p_IDocImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocIndexEntry[] = {  {&_swigt__p_IDocIndexEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocInternal[] = {  {&_swigt__p_IDocInternal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocItemizedList[] = {  {&_swigt__p_IDocItemizedList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocIterator[] = {  {&_swigt__p_IDocIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocLineBreak[] = {  {&_swigt__p_IDocLineBreak, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocLink[] = {  {&_swigt__p_IDocLink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocListItem[] = {  {&_swigt__p_IDocListItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocMarkup[] = {  {&_swigt__p_IDocMarkup, 0, 0, 0},  {&_swigt__p_IDocText, _p_IDocTextTo_p_IDocMarkup, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocMarkupModifier[] = {  {&_swigt__p_IDocMarkupModifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocOrderedList[] = {  {&_swigt__p_IDocOrderedList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocPara[] = {  {&_swigt__p_IDocPara, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocParameter[] = {  {&_swigt__p_IDocParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocParameterItem[] = {  {&_swigt__p_IDocParameterItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocParameterList[] = {  {&_swigt__p_IDocParameterList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocProgramListing[] = {  {&_swigt__p_IDocProgramListing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocRef[] = {  {&_swigt__p_IDocRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocRoot[] = {  {&_swigt__p_IDocRoot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocRow[] = {  {&_swigt__p_IDocRow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocSection[] = {  {&_swigt__p_IDocSection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocSimpleSect[] = {  {&_swigt__p_IDocSimpleSect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocSymbol[] = {  {&_swigt__p_IDocSymbol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocTable[] = {  {&_swigt__p_IDocTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocText[] = {  {&_swigt__p_IDocText, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocTitle[] = {  {&_swigt__p_IDocTitle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocTocItem[] = {  {&_swigt__p_IDocTocItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocTocList[] = {  {&_swigt__p_IDocTocList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocULink[] = {  {&_swigt__p_IDocULink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocVariableList[] = {  {&_swigt__p_IDocVariableList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocVariableListEntry[] = {  {&_swigt__p_IDocVariableListEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDocVerbatim[] = {  {&_swigt__p_IDocVerbatim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDoxygen[] = {  {&_swigt__p_IDoxygen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IEdgeLabel[] = {  {&_swigt__p_IEdgeLabel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IEdgeLabelIterator[] = {  {&_swigt__p_IEdgeLabelIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IEnum[] = {  {&_swigt__p_IEnum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IEnumValue[] = {  {&_swigt__p_IEnumValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IException[] = {  {&_swigt__p_IException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IFile[] = {  {&_swigt__p_IFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IFriend[] = {  {&_swigt__p_IFriend, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IFunction[] = {  {&_swigt__p_IFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IGraph[] = {  {&_swigt__p_IGraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IGroup[] = {  {&_swigt__p_IGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IInclude[] = {  {&_swigt__p_IInclude, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IIncludeIterator[] = {  {&_swigt__p_IIncludeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IInterface[] = {  {&_swigt__p_IInterface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ILT_Ref[] = {  {&_swigt__p_ILT_Ref, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ILT_Text[] = {  {&_swigt__p_ILT_Text, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ILinkedText[] = {  {&_swigt__p_ILT_Text, _p_ILT_TextTo_p_ILinkedText, 0, 0},  {&_swigt__p_ILinkedText, 0, 0, 0},  {&_swigt__p_ILT_Ref, _p_ILT_RefTo_p_ILinkedText, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ILinkedTextIterator[] = {  {&_swigt__p_ILinkedTextIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMember[] = {  {&_swigt__p_IProperty, _p_IPropertyTo_p_IMember, 0, 0},  {&_swigt__p_IFriend, _p_IFriendTo_p_IMember, 0, 0},  {&_swigt__p_IDCOP, _p_IDCOPTo_p_IMember, 0, 0},  {&_swigt__p_IMember, 0, 0, 0},  {&_swigt__p_IVariable, _p_IVariableTo_p_IMember, 0, 0},  {&_swigt__p_IFunction, _p_IFunctionTo_p_IMember, 0, 0},  {&_swigt__p_ISlot, _p_ISlotTo_p_IMember, 0, 0},  {&_swigt__p_IEnum, _p_IEnumTo_p_IMember, 0, 0},  {&_swigt__p_ITypedef, _p_ITypedefTo_p_IMember, 0, 0},  {&_swigt__p_ISignal, _p_ISignalTo_p_IMember, 0, 0},  {&_swigt__p_IPrototype, _p_IPrototypeTo_p_IMember, 0, 0},  {&_swigt__p_IDefine, _p_IDefineTo_p_IMember, 0, 0},  {&_swigt__p_IEnumValue, _p_IEnumValueTo_p_IMember, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMemberIterator[] = {  {&_swigt__p_IMemberIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMemberReference[] = {  {&_swigt__p_IMemberReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMemberReferenceIterator[] = {  {&_swigt__p_IMemberReferenceIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_INamespace[] = {  {&_swigt__p_INamespace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_INode[] = {  {&_swigt__p_INode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_INodeIterator[] = {  {&_swigt__p_INodeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IPage[] = {  {&_swigt__p_IPage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IParam[] = {  {&_swigt__p_IParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IParamIterator[] = {  {&_swigt__p_IParamIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IProperty[] = {  {&_swigt__p_IProperty, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IPrototype[] = {  {&_swigt__p_IPrototype, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IRelatedCompound[] = {  {&_swigt__p_IRelatedCompound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IRelatedCompoundIterator[] = {  {&_swigt__p_IRelatedCompoundIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISection[] = {  {&_swigt__p_IUserDefined, _p_IUserDefinedTo_p_ISection, 0, 0},  {&_swigt__p_ISection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISectionIterator[] = {  {&_swigt__p_ISectionIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISignal[] = {  {&_swigt__p_ISignal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISlot[] = {  {&_swigt__p_ISlot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IString[] = {  {&_swigt__p_IString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IStruct[] = {  {&_swigt__p_IStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ITypedef[] = {  {&_swigt__p_ITypedef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IUnion[] = {  {&_swigt__p_IUnion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IUserDefined[] = {  {&_swigt__p_IUserDefined, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IVariable[] = {  {&_swigt__p_IVariable, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_IChildNode,
  _swigc__p_IChildNodeIterator,
  _swigc__p_IClass,
  _swigc__p_ICompound,
  _swigc__p_ICompoundIterator,
  _swigc__p_IDCOP,
  _swigc__p_IDefine,
  _swigc__p_IDoc,
  _swigc__p_IDocAnchor,
  _swigc__p_IDocCodeLine,
  _swigc__p_IDocCopy,
  _swigc__p_IDocDotFile,
  _swigc__p_IDocEMail,
  _swigc__p_IDocEntry,
  _swigc__p_IDocFormula,
  _swigc__p_IDocHRuler,
  _swigc__p_IDocHighlight,
  _swigc__p_IDocImage,
  _swigc__p_IDocIndexEntry,
  _swigc__p_IDocInternal,
  _swigc__p_IDocItemizedList,
  _swigc__p_IDocIterator,
  _swigc__p_IDocLineBreak,
  _swigc__p_IDocLink,
  _swigc__p_IDocListItem,
  _swigc__p_IDocMarkup,
  _swigc__p_IDocMarkupModifier,
  _swigc__p_IDocOrderedList,
  _swigc__p_IDocPara,
  _swigc__p_IDocParameter,
  _swigc__p_IDocParameterItem,
  _swigc__p_IDocParameterList,
  _swigc__p_IDocProgramListing,
  _swigc__p_IDocRef,
  _swigc__p_IDocRoot,
  _swigc__p_IDocRow,
  _swigc__p_IDocSection,
  _swigc__p_IDocSimpleSect,
  _swigc__p_IDocSymbol,
  _swigc__p_IDocTable,
  _swigc__p_IDocText,
  _swigc__p_IDocTitle,
  _swigc__p_IDocTocItem,
  _swigc__p_IDocTocList,
  _swigc__p_IDocULink,
  _swigc__p_IDocVariableList,
  _swigc__p_IDocVariableListEntry,
  _swigc__p_IDocVerbatim,
  _swigc__p_IDoxygen,
  _swigc__p_IEdgeLabel,
  _swigc__p_IEdgeLabelIterator,
  _swigc__p_IEnum,
  _swigc__p_IEnumValue,
  _swigc__p_IException,
  _swigc__p_IFile,
  _swigc__p_IFriend,
  _swigc__p_IFunction,
  _swigc__p_IGraph,
  _swigc__p_IGroup,
  _swigc__p_IInclude,
  _swigc__p_IIncludeIterator,
  _swigc__p_IInterface,
  _swigc__p_ILT_Ref,
  _swigc__p_ILT_Text,
  _swigc__p_ILinkedText,
  _swigc__p_ILinkedTextIterator,
  _swigc__p_IMember,
  _swigc__p_IMemberIterator,
  _swigc__p_IMemberReference,
  _swigc__p_IMemberReferenceIterator,
  _swigc__p_INamespace,
  _swigc__p_INode,
  _swigc__p_INodeIterator,
  _swigc__p_IPage,
  _swigc__p_IParam,
  _swigc__p_IParamIterator,
  _swigc__p_IProperty,
  _swigc__p_IPrototype,
  _swigc__p_IRelatedCompound,
  _swigc__p_IRelatedCompoundIterator,
  _swigc__p_ISection,
  _swigc__p_ISectionIterator,
  _swigc__p_ISignal,
  _swigc__p_ISlot,
  _swigc__p_IString,
  _swigc__p_IStruct,
  _swigc__p_ITypedef,
  _swigc__p_IUnion,
  _swigc__p_IUserDefined,
  _swigc__p_IVariable,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

